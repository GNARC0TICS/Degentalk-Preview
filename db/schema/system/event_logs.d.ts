export declare const eventTypeEnum: import("drizzle-orm/pg-core").PgEnum<["rain_claimed", "thread_created", "post_created", "cosmetic_unlocked", "level_up", "badge_earned", "tip_sent", "tip_received", "xp_earned", "referral_completed", "product_purchased", "mission_completed", "airdrop_claimed"]>;
export declare const eventLogs: import("drizzle-orm/pg-core").PgTableWithColumns<{
    name: "event_logs";
    schema: undefined;
    columns: {
        id: import("drizzle-orm/pg-core").PgColumn<{
            name: "id";
            tableName: "event_logs";
            dataType: "string";
            columnType: "PgUUID";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: true;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        userId: import("drizzle-orm/pg-core").PgColumn<{
            name: "user_id";
            tableName: "event_logs";
            dataType: "string";
            columnType: "PgUUID";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        eventType: import("drizzle-orm/pg-core").PgColumn<{
            name: "event_type";
            tableName: "event_logs";
            dataType: "string";
            columnType: "PgEnumColumn";
            data: "level_up" | "tip_received" | "cosmetic_unlocked" | "post_created" | "thread_created" | "tip_sent" | "rain_claimed" | "badge_earned" | "xp_earned" | "referral_completed" | "product_purchased" | "mission_completed" | "airdrop_claimed";
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: ["rain_claimed", "thread_created", "post_created", "cosmetic_unlocked", "level_up", "badge_earned", "tip_sent", "tip_received", "xp_earned", "referral_completed", "product_purchased", "mission_completed", "airdrop_claimed"];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        relatedId: import("drizzle-orm/pg-core").PgColumn<{
            name: "related_id";
            tableName: "event_logs";
            dataType: "string";
            columnType: "PgUUID";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        meta: import("drizzle-orm/pg-core").PgColumn<{
            name: "meta";
            tableName: "event_logs";
            dataType: "json";
            columnType: "PgJsonb";
            data: unknown;
            driverParam: unknown;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        createdAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "created_at";
            tableName: "event_logs";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
    };
    dialect: "pg";
}>;
export type EventLog = typeof eventLogs.$inferSelect;
export type InsertEventLog = typeof eventLogs.$inferInsert;
//# sourceMappingURL=event_logs.d.ts.map