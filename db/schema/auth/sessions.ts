/**
 * Session Schema for Lucia Auth
 * 
 * This schema defines the user_session table required by Lucia Auth
 * for secure session management.
 */

import { pgTable, text, timestamp, uuid, inet, index } from 'drizzle-orm/pg-core';
import { sql, relations } from 'drizzle-orm';
import { users } from '../user/users';

/**
 * User sessions table for Lucia Auth
 * 
 * This table stores active user sessions with expiration tracking.
 * Lucia automatically cleans up expired sessions.
 */
export const sessions = pgTable('user_session', {
  /**
   * Session ID - Primary key
   * Generated by Lucia using cryptographically secure random values
   */
  id: text('id').primaryKey(),

  /**
   * User ID - Foreign key to users table
   * Links the session to a specific user account
   */
  userId: uuid('user_id')
    .notNull()
    .references(() => users.id, { onDelete: 'cascade' }),

  /**
   * Session expiration timestamp
   * When the session becomes invalid and should be cleaned up
   */
  expiresAt: timestamp('expires_at', { withTimezone: true }).notNull(),

  /**
   * Session creation timestamp
   * For audit trails and analytics
   */
  createdAt: timestamp('created_at', { withTimezone: true })
    .notNull()
    .default(sql`CURRENT_TIMESTAMP`),

  /**
   * Optional: IP address from which session was created
   */
  ipAddress: inet('ip_address'),

  /**
   * Optional: User agent string of the client
   */
  userAgent: text('user_agent'),

  /**
   * Optional: Generated device identifier for session tracking
   */
  deviceId: text('device_id'),

  /**
   * Optional: Last time this session was active
   */
  lastActiveAt: timestamp('last_active_at', { withTimezone: true })
    .default(sql`CURRENT_TIMESTAMP`),
}, (table) => ({
  // Indexes for performance
  userIdIdx: index('idx_user_sessions_user_id').on(table.userId),
  expiresAtIdx: index('idx_user_sessions_expires_at').on(table.expiresAt),
  deviceIdIdx: index('idx_user_sessions_device_id').on(table.deviceId)
}));

/**
 * Relations
 */
export const sessionsRelations = relations(sessions, ({ one }) => ({
  user: one(users, {
    fields: [sessions.userId],
    references: [users.id]
  })
}));

// Type exports for use in other modules
export type Session = typeof sessions.$inferSelect;
export type NewSession = typeof sessions.$inferInsert;

/**
 * Session with user information
 * Useful for queries that need both session and user data
 */
export type SessionWithUser = Session & {
  user: {
    id: string;
    username: string;
    email: string;
    role: string;
    isActive: boolean;
    isBanned: boolean;
  };
};

// Re-export with the correct name for Lucia compatibility
export const userSessions = sessions;