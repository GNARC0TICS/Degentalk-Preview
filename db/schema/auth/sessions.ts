/**
 * Session Schema for Lucia Auth
 * 
 * This schema defines the user_session table required by Lucia Auth
 * for secure session management.
 */

import { pgTable, text, timestamp, uuid } from 'drizzle-orm/pg-core';
import { sql } from 'drizzle-orm';
import { users } from '../user/users';

/**
 * User sessions table for Lucia Auth
 * 
 * This table stores active user sessions with expiration tracking.
 * Lucia automatically cleans up expired sessions.
 */
export const sessions = pgTable('user_session', {
  /**
   * Session ID - Primary key
   * Generated by Lucia using cryptographically secure random values
   */
  id: text('id').primaryKey(),

  /**
   * User ID - Foreign key to users table
   * Links the session to a specific user account
   */
  userId: uuid('user_id')
    .notNull()
    .references(() => users.id, { onDelete: 'cascade' }),

  /**
   * Session expiration timestamp
   * When the session becomes invalid and should be cleaned up
   */
  expiresAt: timestamp('expires_at', { withTimezone: true }).notNull(),

  /**
   * Session creation timestamp
   * For audit trails and analytics
   */
  createdAt: timestamp('created_at', { withTimezone: true })
    .notNull()
    .default(sql`CURRENT_TIMESTAMP`),

  /**
   * Optional: Last activity timestamp
   * Can be used for inactive session cleanup
   */
  lastActivityAt: timestamp('last_activity_at', { withTimezone: true })
    .default(sql`CURRENT_TIMESTAMP`),

  /**
   * Optional: Session metadata
   * Can store additional session information like IP, user agent, etc.
   */
  metadata: text('metadata'), // JSON string for flexibility
});

/**
 * Indexes for performance optimization
 * 
 * These are applied via migration scripts:
 * - idx_user_session_user_id: Fast lookup of user's sessions
 * - idx_user_session_expires_at: Efficient cleanup of expired sessions
 * - idx_user_session_last_activity: For inactive session management
 */

// Type exports for use in other modules
export type Session = typeof sessions.$inferSelect;
export type NewSession = typeof sessions.$inferInsert;

/**
 * Session with user information
 * Useful for queries that need both session and user data
 */
export type SessionWithUser = Session & {
  user: {
    id: string;
    username: string;
    email: string;
    role: string;
    isActive: boolean;
    isBanned: boolean;
  };
};

/**
 * Session metadata structure
 * Define the shape of data stored in the metadata field
 */
export interface SessionMetadata {
  ipAddress?: string;
  userAgent?: string;
  device?: string;
  location?: {
    country?: string;
    city?: string;
  };
  loginMethod?: 'password' | 'oauth' | 'dev_mock';
  // Add other metadata fields as needed
}