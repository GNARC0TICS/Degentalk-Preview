import { z } from 'zod';
export declare const shoutboxMessages: import("drizzle-orm/pg-core").PgTableWithColumns<{
    name: "shoutbox_messages";
    schema: undefined;
    columns: {
        id: import("drizzle-orm/pg-core").PgColumn<{
            name: "id";
            tableName: "shoutbox_messages";
            dataType: "string";
            columnType: "PgUUID";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: true;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        userId: import("drizzle-orm/pg-core").PgColumn<{
            name: "user_id";
            tableName: "shoutbox_messages";
            dataType: "string";
            columnType: "PgUUID";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        roomId: import("drizzle-orm/pg-core").PgColumn<{
            name: "room_id";
            tableName: "shoutbox_messages";
            dataType: "string";
            columnType: "PgUUID";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        content: import("drizzle-orm/pg-core").PgColumn<{
            name: "content";
            tableName: "shoutbox_messages";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        createdAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "created_at";
            tableName: "shoutbox_messages";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        editedAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "edited_at";
            tableName: "shoutbox_messages";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        isDeleted: import("drizzle-orm/pg-core").PgColumn<{
            name: "is_deleted";
            tableName: "shoutbox_messages";
            dataType: "boolean";
            columnType: "PgBoolean";
            data: boolean;
            driverParam: boolean;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        isPinned: import("drizzle-orm/pg-core").PgColumn<{
            name: "is_pinned";
            tableName: "shoutbox_messages";
            dataType: "boolean";
            columnType: "PgBoolean";
            data: boolean;
            driverParam: boolean;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        tipAmount: import("drizzle-orm/pg-core").PgColumn<{
            name: "tip_amount";
            tableName: "shoutbox_messages";
            dataType: "number";
            columnType: "PgInteger";
            data: number;
            driverParam: string | number;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
    };
    dialect: "pg";
}>;
export declare const insertShoutboxMessageSchema: z.ZodObject<Omit<{
    id: z.ZodOptional<z.ZodString>;
    userId: z.ZodString;
    roomId: z.ZodOptional<z.ZodString>;
    content: z.ZodString;
    createdAt: z.ZodOptional<z.ZodDate>;
    editedAt: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
    isDeleted: z.ZodOptional<z.ZodBoolean>;
    isPinned: z.ZodOptional<z.ZodBoolean>;
    tipAmount: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "createdAt" | "id" | "isDeleted" | "editedAt" | "isPinned" | "tipAmount">, "strip", z.ZodTypeAny, {
    userId: string;
    content: string;
    roomId?: string | undefined;
}, {
    userId: string;
    content: string;
    roomId?: string | undefined;
}>;
export type ShoutboxMessage = typeof shoutboxMessages.$inferSelect;
export type InsertShoutboxMessage = z.infer<typeof insertShoutboxMessageSchema>;
//# sourceMappingURL=shoutboxMessages.d.ts.map