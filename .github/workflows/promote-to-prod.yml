# Production Deployment Workflow with Approval Gates
#
# This workflow handles production database deployments with multiple safety checks:
# - Manual trigger only (no automatic production deployments)
# - Required approvals from designated reviewers
# - Automatic Neon database backup before deployment
# - Migration safety validation
# - Comprehensive audit trail
#
# To use:
# 1. Go to Actions → Promote to Production
# 2. Enter staging commit SHA to deploy
# 3. Select migration type
# 4. Wait for approvals
# 5. Monitor deployment progress
#
# Emergency deployments can bypass some checks but still require approval

name: Promote to Production

on:
  workflow_dispatch:
    inputs:
      staging_commit:
        description: 'Staging commit SHA to promote'
        required: true
        type: string
      migration_type:
        description: 'Type of migration'
        required: true
        type: choice
        options:
          - schema_safe
          - config_only
          - data_migration
          - hotfix
      emergency:
        description: 'Emergency deployment (bypasses some checks)'
        required: false
        type: boolean
        default: false

jobs:
  validate-promotion:
    name: Validate Promotion Request
    runs-on: ubuntu-latest
    outputs:
      can_promote: ${{ steps.validation.outputs.can_promote }}
      commit_sha: ${{ steps.validation.outputs.commit_sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate staging commit
        id: validation
        run: |
          COMMIT_SHA="${{ github.event.inputs.staging_commit }}"

          # Verify commit exists on staging branch
          if git branch -r --contains "$COMMIT_SHA" | grep -q "origin/staging"; then
            echo "✅ Commit $COMMIT_SHA found on staging branch"
            echo "can_promote=true" >> $GITHUB_OUTPUT
            echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          else
            echo "❌ Commit $COMMIT_SHA not found on staging branch"
            echo "can_promote=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Check for safe migration files
        run: |
          git diff --name-only HEAD..${{ steps.validation.outputs.commit_sha }} | grep -E "\.sql$" | while read file; do
            if [[ ! "$file" =~ _safe\.sql$ ]] && [[ "${{ github.event.inputs.emergency }}" != "true" ]]; then
              echo "❌ Non-safe migration detected: $file"
              echo "Use emergency flag or rename to *_safe.sql"
              exit 1
            fi
          done
          echo "✅ Migration safety check passed"

  request-approval:
    name: Request Production Approval
    runs-on: ubuntu-latest
    needs: validate-promotion
    if: needs.validate-promotion.outputs.can_promote == 'true'
    environment:
      name: production-approval
      reviewers:
        - gnarcotic
        - dave-dev
    steps:
      - name: Approval checkpoint
        run: |
          echo "🚨 PRODUCTION DEPLOYMENT REQUESTED"
          echo "📋 Migration Type: ${{ github.event.inputs.migration_type }}"
          echo "📦 Commit: ${{ needs.validate-promotion.outputs.commit_sha }}"
          echo "🚨 Emergency: ${{ github.event.inputs.emergency }}"
          echo ""
          echo "✅ Approved by required reviewers"

  backup-production:
    name: Backup Production Database
    runs-on: ubuntu-latest
    needs: [validate-promotion, request-approval]
    environment: production
    outputs:
      backup_id: ${{ steps.backup.outputs.backup_id }}
    steps:
      - name: Create database backup
        id: backup
        env:
          NEON_API_KEY: ${{ secrets.NEON_API_KEY }}
          NEON_PROJECT_ID: ${{ secrets.NEON_PRODUCTION_PROJECT_ID }}
        run: |
          BACKUP_ID="prod-backup-$(date +%Y%m%d-%H%M%S)"
          echo "📦 Creating production database backup: $BACKUP_ID"

          # Use Neon API to create branch backup
          curl -X POST \
            "https://console.neon.tech/api/v2/projects/$NEON_PROJECT_ID/branches" \
            -H "Authorization: Bearer $NEON_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{
              \"branch\": {
                \"name\": \"$BACKUP_ID\",
                \"parent_id\": \"main\"
              }
            }"

          echo "backup_id=$BACKUP_ID" >> $GITHUB_OUTPUT
          echo "✅ Production backup created: $BACKUP_ID"

  deploy-to-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate-promotion, request-approval, backup-production]
    environment: production
    steps:
      - name: Checkout production commit
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate-promotion.outputs.commit_sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Apply migrations to production
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          BACKUP_ID: ${{ needs.backup-production.outputs.backup_id }}
        run: |
          echo "🚀 DEPLOYING TO PRODUCTION"
          echo "📦 Backup ID: $BACKUP_ID"
          echo "📋 Migration Type: ${{ github.event.inputs.migration_type }}"

          # Apply migrations with extra safety
          if [[ "${{ github.event.inputs.migration_type }}" == "config_only" ]]; then
            echo "🔄 Config-only deployment - syncing forums..."
            npm run sync:forums
          else
            echo "🗄️ Applying database migrations..."
            npm run db:migrate:Apply
            npm run sync:forums
          fi

          echo "✅ Production deployment completed"

      - name: Verify deployment
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          echo "🧪 Verifying production deployment..."
          npm run sync:check-forum-config
          echo "✅ Production verification completed"

      - name: Update main branch
        if: success()
        run: |
          git checkout main
          git merge ${{ needs.validate-promotion.outputs.commit_sha }} --ff-only
          git push origin main
          echo "✅ Main branch updated with production deployment"

  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-to-production, backup-production]
    if: always()
    steps:
      - name: Deployment notification
        run: |
          if [[ "${{ needs.deploy-to-production.result }}" == "success" ]]; then
            echo "🎉 PRODUCTION DEPLOYMENT SUCCESSFUL"
            echo "📦 Backup: ${{ needs.backup-production.outputs.backup_id }}"
            echo "📋 Type: ${{ github.event.inputs.migration_type }}"
            echo "📦 Commit: ${{ needs.validate-promotion.outputs.commit_sha }}"
          else
            echo "❌ PRODUCTION DEPLOYMENT FAILED"
            echo "🔄 Rollback may be required"
            echo "📦 Backup available: ${{ needs.backup-production.outputs.backup_id }}"
          fi

  audit-trail:
    name: Create Audit Trail
    runs-on: ubuntu-latest
    needs: [deploy-to-production, backup-production]
    if: always()
    steps:
      - name: Log deployment audit
        env:
          AUDIT_WEBHOOK: ${{ secrets.AUDIT_WEBHOOK_URL }}
        run: |
          AUDIT_DATA=$(cat << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "event": "production_deployment",
            "status": "${{ needs.deploy-to-production.result }}",
            "details": {
              "commit": "${{ needs.validate-promotion.outputs.commit_sha }}",
              "migration_type": "${{ github.event.inputs.migration_type }}",
              "emergency": ${{ github.event.inputs.emergency }},
              "backup_id": "${{ needs.backup-production.outputs.backup_id }}",
              "triggered_by": "${{ github.actor }}",
              "workflow_run": "${{ github.run_id }}"
            }
          }
          EOF
          )

          echo "📋 Audit trail entry:"
          echo "$AUDIT_DATA"

          # Send to audit webhook if configured
          if [[ -n "$AUDIT_WEBHOOK" ]]; then
            curl -X POST "$AUDIT_WEBHOOK" \
              -H "Content-Type: application/json" \
              -d "$AUDIT_DATA"
          fi
