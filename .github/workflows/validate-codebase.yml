name: 🚀 Degentalk Codebase Validation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # Allow manual triggering

jobs:
  validate-boundaries:
    name: 🛡️ Validate Import Boundaries
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🔍 Run import boundary validation
        run: npm run check-imports

      - name: 🚨 Check for Vite config leaks
        run: |
          if grep -r "vite\.config" server/; then
            echo "❌ CRITICAL: Server code imports Vite config!"
            echo "This violates shared-boundary rules. See CONTRIBUTING.md"
            exit 1
          else
            echo "✅ No Vite config leaks detected"
          fi

      - name: 🔒 Validate TypeScript compilation
        run: npx tsc --noEmit

      - name: 📊 Check schema consistency
        run: |
          export_count=$(grep -c "export" db/schema/index.ts || echo "0")
          if [ "$export_count" -lt 10 ]; then
            echo "⚠️ Warning: Only $export_count schema exports found"
          else
            echo "✅ Schema exports healthy ($export_count exports)"
          fi

  validate-everything:
    name: 🚀 Full Validation Suite
    runs-on: ubuntu-latest
    needs: validate-boundaries

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🚀 Run comprehensive validation
        run: npm run validate-everything:fail-fast

      - name: 📋 Validation Summary
        if: always()
        run: |
          echo "## 🚀 Degentalk Validation Results" >> $GITHUB_STEP_SUMMARY
          if [ $? -eq 0 ]; then
            echo "✅ **ALL CHECKS PASSED!** Codebase is healthy." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **VALIDATION FAILED!** Check logs above for details." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 Quick Fixes:" >> $GITHUB_STEP_SUMMARY
            echo "- Run \`npm run check-imports:fix\` locally" >> $GITHUB_STEP_SUMMARY
            echo "- Review CONTRIBUTING.md boundary rules" >> $GITHUB_STEP_SUMMARY
            echo "- Ensure no Vite imports in server/" >> $GITHUB_STEP_SUMMARY
          fi

  security-audit:
    name: 🔐 Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🔐 Run security audit
        run: |
          echo "🔍 Running security audit..."
          npm audit --audit-level=moderate || true

          echo "🔍 Checking for high/critical vulnerabilities..."
          if npm audit --audit-level=high --parseable | grep -q .; then
            echo "❌ High/critical security vulnerabilities found!"
            echo "Run 'npm audit fix' to resolve issues"
            npm audit --audit-level=high
            exit 1
          else
            echo "✅ No critical security vulnerabilities found"
          fi

  lint-and-format:
    name: 📝 Code Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🎨 Check code formatting
        run: |
          echo "🎨 Checking code formatting..."
          if ! npx prettier --check .; then
            echo "❌ Code formatting issues found!"
            echo "Run 'npm run format' to fix formatting"
            exit 1
          else
            echo "✅ Code formatting is clean"
          fi

      - name: 📋 Check for alias violations
        run: npm run lint:aliases

  boundary-enforcement:
    name: 🚨 Boundary Enforcement
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for diff

      - name: 🔍 Check changed files for boundary violations
        run: |
          echo "🔍 Checking changed files for boundary violations..."

          # Get list of changed files
          changed_files=$(git diff --name-only origin/main...HEAD)

          echo "📁 Changed files:"
          echo "$changed_files"

          # Check for forbidden patterns
          violations=0

          # Check if server files import from client/
          if echo "$changed_files" | grep -E "^server/" | xargs grep -l "from.*client/" 2>/dev/null; then
            echo "❌ VIOLATION: Server files importing from client/"
            violations=$((violations + 1))
          fi

          # Check if client files import from server/
          if echo "$changed_files" | grep -E "^client/" | xargs grep -l "from.*server/" 2>/dev/null; then
            echo "❌ VIOLATION: Client files importing from server/"
            violations=$((violations + 1))
          fi

          # Check if server files import vite config
          if echo "$changed_files" | grep -E "^server/" | xargs grep -l "vite\.config" 2>/dev/null; then
            echo "❌ VIOLATION: Server files importing Vite config!"
            violations=$((violations + 1))
          fi

          # Check if shared/ files import from client/ or server/
          if echo "$changed_files" | grep -E "^shared/" | xargs grep -l "from.*\(client\|server\)/" 2>/dev/null; then
            echo "❌ VIOLATION: Shared files importing from client/ or server/"
            violations=$((violations + 1))
          fi

          if [ $violations -gt 0 ]; then
            echo ""
            echo "🚨 $violations boundary violation(s) detected!"
            echo "📖 Please review CONTRIBUTING.md for boundary rules"
            echo "🔧 Run 'npm run validate-everything:fix' locally"
            exit 1
          else
            echo "✅ No boundary violations detected in changed files"
          fi

  deployment-readiness:
    name: 🚀 Deployment Readiness
    runs-on: ubuntu-latest
    needs: [validate-everything, security-audit, lint-and-format]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🏗️ Test build process
        run: |
          echo "🏗️ Testing build process..."
          npm run build || {
            echo "❌ Build failed! Not ready for deployment"
            exit 1
          }
          echo "✅ Build successful - ready for deployment"

      - name: 📊 Generate deployment summary
        run: |
          echo "## 🚀 Deployment Readiness Report" >> $GITHUB_STEP_SUMMARY
          echo "✅ **All validations passed**" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Security audit clean**" >> $GITHUB_STEP_SUMMARY  
          echo "✅ **Code quality verified**" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Build process successful**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **READY FOR DEPLOYMENT!**" >> $GITHUB_STEP_SUMMARY
