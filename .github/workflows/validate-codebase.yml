name: 🚀 Degentalk Codebase Validation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # Allow manual triggering

jobs:
  # Job 1: Quick CI Environment Sanity Check
  ci-env-check: # Was 'validate-everything' job, but runs 'npm run check'
    name: ⚙️ CI Environment Sanity Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: 🔧 Install dependencies
        run: npm ci
      - name: 🚀 Run CI readiness checks
        run: npm run check # This is scripts/test-ci-readiness.ts

  # Job 2: Core Codebase Validations
  core-validation: # Was 'validate-boundaries', but now more focused
    name: 🛡️ Core Codebase Validation
    runs-on: ubuntu-latest
    needs: ci-env-check # Make sure env is okay first
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: 🔧 Install dependencies
        run: npm ci
      - name: 🔍 Run comprehensive validation suite
        run: npm run validate # This is scripts/validate-everything.ts
      # The explicit 'tsc --noEmit', 'grep vite.config', and schema export count
      # steps are removed from here as they are inside 'npm run validate'

  # Job 3: Formatting Check (Prettier)
  formatting-check: # Was 'lint-and-format'
    name: 🎨 Code Formatting Check
    runs-on: ubuntu-latest
    needs: ci-env-check # Depends on env being okay
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: 🔧 Install dependencies
        run: npm ci
      - name: 🎨 Check code formatting with Prettier
        run: npx prettier --check .
      # 'npm run validate' for alias violations is removed, as it's in core-validation

  # Job 4: Security Audit (No change needed here from current)
  security-audit:
    name: 🔐 Security Audit
    runs-on: ubuntu-latest
    needs: ci-env-check # Added dependency

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🔐 Run security audit
        run: |
          echo "🔍 Running security audit..."
          npm audit --audit-level=moderate || true

          echo "🔍 Checking for high/critical vulnerabilities..."
          if npm audit --audit-level=high --parseable | grep -q .; then
            echo "❌ High/critical security vulnerabilities found!"
            echo "Run 'npm audit fix' to resolve issues"
            npm audit --audit-level=high
            exit 1
          else
            echo "✅ No critical security vulnerabilities found"
          fi

  # Job 5: Boundary Enforcement for PRs (No change needed here from current)
  boundary-enforcement:
    name: 🚨 Boundary Enforcement (PRs) # Changed Name
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: ci-env-check # Added dependency

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for diff

      - name: 🔍 Check changed files for boundary violations
        run: |
          echo "🔍 Checking changed files for boundary violations..."

          # Get list of changed files
          changed_files=$(git diff --name-only origin/main...HEAD)

          echo "📁 Changed files:"
          echo "$changed_files"

          # Check for forbidden patterns
          violations=0

          # Check if server files import from client/
          if echo "$changed_files" | grep -E "^server/" | xargs grep -l "from.*client/" 2>/dev/null; then
            echo "❌ VIOLATION: Server files importing from client/"
            violations=$((violations + 1))
          fi

          # Check if client files import from server/
          if echo "$changed_files" | grep -E "^client/" | xargs grep -l "from.*server/" 2>/dev/null; then
            echo "❌ VIOLATION: Client files importing from server/"
            violations=$((violations + 1))
          fi

          # Check if server files import vite config
          if echo "$changed_files" | grep -E "^server/" | xargs grep -l "vite\.config" 2>/dev/null; then
            echo "❌ VIOLATION: Server files importing Vite config!"
            violations=$((violations + 1))
          fi

          # Check if shared/ files import from client/ or server/
          if echo "$changed_files" | grep -E "^shared/" | xargs grep -l "from.*\(client\|server\)/" 2>/dev/null; then
            echo "❌ VIOLATION: Shared files importing from client/ or server/"
            violations=$((violations + 1))
          fi

          if [ $violations -gt 0 ]; then
            echo ""
            echo "🚨 $violations boundary violation(s) detected!"
            echo "📖 Please review CONTRIBUTING.md for boundary rules"
            # It seems 'npm run validate:fix' is the command for fixing these based on validate-everything.ts
            echo "🔧 Run 'npm run validate --fix' or relevant fix script locally"
            exit 1
          else
            echo "✅ No boundary violations detected in changed files"
          fi

  deployment-readiness:
    name: 🚀 Deployment Readiness
    runs-on: ubuntu-latest
    # Depends on the primary validation jobs now
    needs: [core-validation, formatting-check, security-audit]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🏗️ Test build process
        run: |
          echo "🏗️ Testing build process..."
          npm run build || {
            echo "❌ Build failed! Not ready for deployment"
            exit 1
          }
          echo "✅ Build successful - ready for deployment"

      - name: 📊 Generate deployment summary
        run: |
          echo "## 🚀 Deployment Readiness Report" >> $GITHUB_STEP_SUMMARY
          # Adjust messages based on new job names if needed
          echo "✅ **Core validations passed**" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Formatting verified**" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Security audit clean**" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Build process successful**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **READY FOR DEPLOYMENT!**" >> $GITHUB_STEP_SUMMARY
