name: Security Checks

on:
  push:
    branches: [ main, develop, feat/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint Security Rules
      run: |
        npm run lint
        echo "ESLint security rules passed ‚úÖ"

    - name: TypeScript Type Checking
      run: |
        npm run typecheck
        echo "TypeScript type checking passed ‚úÖ"

    - name: Dependency Vulnerability Audit
      run: |
        npm audit --production --audit-level high
        echo "Dependency audit passed ‚úÖ"

    - name: Check for Hardcoded Secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified

    - name: Security Code Analysis
      run: |
        echo "üîç Running security checks..."
        
        # Check for console.log usage (should use structured logger)
        CONSOLE_COUNT=$(grep -r "console\." server/src/ --exclude-dir=node_modules | wc -l)
        echo "Console.log statements found: $CONSOLE_COUNT"
        if [ $CONSOLE_COUNT -gt 0 ]; then
          echo "‚ö†Ô∏è Warning: Found $CONSOLE_COUNT console.log statements. Use structured logger instead."
          grep -r "console\." server/src/ --exclude-dir=node_modules | head -10
        fi
        
        # Check for any type assertions
        ANY_TYPE_COUNT=$(grep -r ": any" server/src/ --exclude-dir=node_modules | wc -l)
        echo "Any type usage: $ANY_TYPE_COUNT"
        if [ $ANY_TYPE_COUNT -gt 0 ]; then
          echo "‚ö†Ô∏è Warning: Found $ANY_TYPE_COUNT 'any' type usages. Use proper types instead."
        fi
        
        # Check for direct req.user access (should use getAuthenticatedUser)
        REQ_USER_COUNT=$(grep -r "req\.user" server/src/ --exclude-dir=node_modules --exclude="*.test.ts" | wc -l)
        echo "Direct req.user access: $REQ_USER_COUNT"
        if [ $REQ_USER_COUNT -gt 0 ]; then
          echo "‚ùå Error: Found direct req.user access. Use getAuthenticatedUser() instead."
          grep -r "req\.user" server/src/ --exclude-dir=node_modules --exclude="*.test.ts"
          exit 1
        fi
        
        # Check for potential SQL injection patterns
        SQL_PATTERNS=$(grep -r -E "(SELECT|INSERT|UPDATE|DELETE).*\\\$\{" server/src/ --exclude-dir=node_modules | wc -l)
        if [ $SQL_PATTERNS -gt 0 ]; then
          echo "‚ùå Error: Potential SQL injection patterns found!"
          grep -r -E "(SELECT|INSERT|UPDATE|DELETE).*\\\$\{" server/src/ --exclude-dir=node_modules
          exit 1
        fi
        
        echo "‚úÖ Security code analysis passed"

    - name: Validate Environment Configuration
      run: |
        echo "üîß Checking environment configuration..."
        
        # Check for required environment variables in documentation
        if [ ! -f ".env.example" ]; then
          echo "‚ö†Ô∏è Warning: .env.example file not found"
        fi
        
        # Check for environment variable usage patterns
        ENV_VAR_COUNT=$(grep -r "process\.env\." server/src/ --exclude-dir=node_modules | wc -l)
        echo "Environment variable usage: $ENV_VAR_COUNT locations"
        
        echo "‚úÖ Environment configuration check passed"

    - name: Database Security Check
      run: |
        echo "üóÑÔ∏è Checking database security..."
        
        # Check for proper ID validation usage
        BRANDED_ID_IMPORTS=$(grep -r "from '@shared/types/ids'" server/src/ --exclude-dir=node_modules | wc -l)
        echo "Branded ID imports found: $BRANDED_ID_IMPORTS"
        
        # Check for UUID validation
        UUID_VALIDATION=$(grep -r "isValidId\|validateAndConvertId" server/src/ --exclude-dir=node_modules | wc -l)
        echo "UUID validation usage: $UUID_VALIDATION"
        
        echo "‚úÖ Database security check passed"

    - name: API Security Validation
      run: |
        echo "üåê Checking API security..."
        
        # Check for transformer usage
        TRANSFORMER_COUNT=$(grep -r "toPublic\|toAuthenticated\|toAdmin" server/src/ --exclude-dir=node_modules | wc -l)
        echo "Response transformers found: $TRANSFORMER_COUNT"
        
        # Check for rate limiting usage
        RATE_LIMIT_COUNT=$(grep -r "rateLimiters\|rateLimit" server/src/ --exclude-dir=node_modules | wc -l)
        echo "Rate limiting usage: $RATE_LIMIT_COUNT"
        
        echo "‚úÖ API security validation passed"

    - name: Security Summary
      run: |
        echo "üéØ Security Check Summary"
        echo "========================"
        echo "‚úÖ ESLint security rules"
        echo "‚úÖ TypeScript type safety"
        echo "‚úÖ Dependency vulnerabilities"
        echo "‚úÖ Secret scanning"
        echo "‚úÖ Code security analysis"
        echo "‚úÖ Database security"
        echo "‚úÖ API security"
        echo ""
        echo "üöÄ All security checks passed! Ready for production."