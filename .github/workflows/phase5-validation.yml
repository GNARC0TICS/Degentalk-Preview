name: 🔥 Phase 5 Quality Gates

on:
  push:
    branches: [main, develop, 'maintenance/**']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  # Job 1: Phase 5 Validation Suite
  phase5-validation:
    name: 🛡️ Phase 5 Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: 🔧 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Run Phase 5 validation suite
        run: pnpm phase5:validate --detailed

      - name: 📊 Generate quality metrics
        run: pnpm phase5:validate --metrics
        continue-on-error: true

  # Job 2: Zero-Warning Enforcement
  zero-warnings:
    name: ⚠️ Zero Warnings Policy
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: 🔧 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🚨 ESLint with zero warnings (changed files only)
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # Only lint changed files in PRs
            git fetch origin ${{ github.base_ref }}
            changed_files=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '\.(ts|tsx)$' || true)
            if [ -n "$changed_files" ]; then
              echo "Linting changed files: $changed_files"
              echo "$changed_files" | xargs pnpm lint --max-warnings 0 --cache
            else
              echo "No TypeScript files changed"
            fi
          else
            # Lint all files on push to main/develop
            pnpm lint --max-warnings 0 --cache
          fi

      - name: 🔍 TypeScript strict check
        run: pnpm typecheck

  # Job 3: Technical Debt Detection
  debt-detection:
    name: 🕵️ Technical Debt Detection
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Check for console usage
        run: |
          if grep -r "console\." server/ --include="*.ts" | grep -v ".test.ts" | grep -v "logger.ts"; then
            echo "❌ Found console usage in server code"
            exit 1
          else
            echo "✅ No console usage found"
          fi

      - name: 🔍 Check for req.user direct access
        run: |
          if grep -r "req\.user" server/ --include="*.ts" | grep -v ".test.ts"; then
            echo "❌ Found req.user direct access"
            exit 1
          else
            echo "✅ No req.user direct access found"
          fi

      - name: 🔍 Check for numeric ID types
        run: |
          violations=0
          for pattern in "userId: number" "threadId: number" "postId: number" "walletId: number"; do
            if grep -r "$pattern" server/ --include="*.ts" | grep -v ".test.ts" | grep -v "scripts/db/utils/"; then
              violations=$((violations + 1))
            fi
          done
          if [ $violations -gt 0 ]; then
            echo "❌ Found $violations numeric ID type patterns"
            exit 1
          else
            echo "✅ No numeric ID types found (scripts/db/utils/ whitelisted)"
          fi

  # Job 4: Build and Test
  build-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [zero-warnings] # Only run if warnings check passes

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: 🔧 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build all packages
        run: pnpm build

      - name: 🧪 Run unit tests
        run: pnpm test:unit
        continue-on-error: true # Don't fail CI on test failures yet

      - name: 📈 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-outputs
          path: |
            client/dist/
            server/dist/
          retention-days: 7

  # Job 5: Import Boundary Enforcement
  boundary-check:
    name: 🚧 Import Boundaries
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Check server->client imports
        run: |
          if grep -r "from.*client/" server/ --include="*.ts" | grep -v ".test.ts"; then
            echo "❌ Server files importing from client/"
            exit 1
          fi

      - name: 🔍 Check client->server imports
        run: |
          if grep -r "from.*server/" client/ --include="*.ts" | grep -v ".test.ts"; then
            echo "❌ Client files importing from server/"
            exit 1
          fi

      - name: 🔍 Check shared boundary violations
        run: |
          if grep -r "from.*\(client\|server\)/" shared/ --include="*.ts"; then
            echo "❌ Shared files importing from client/ or server/"
            exit 1
          fi

  # Job 6: Transformer Coverage Check
  transformer-coverage:
    name: 🔄 Transformer Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: 🔧 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Run transformer enforcement audit
        run: pnpm codemod:transformers --detailed
        continue-on-error: true # Generate report but don't fail CI

  # Job 7: Performance & Security
  performance-security:
    name: ⚡ Performance & Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [phase5-validation]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: 🔧 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔐 Security audit
        run: |
          echo "🔍 Running security audit..."
          pnpm audit --audit-level=moderate || true

          echo "🔍 Checking for high/critical vulnerabilities..."
          if pnpm audit --audit-level=high --parseable | grep -q .; then
            echo "❌ High/critical vulnerabilities found!"
            pnpm audit --audit-level=high
            exit 1
          else
            echo "✅ No critical vulnerabilities found"
          fi

      - name: ⚡ Bundle size check
        run: |
          pnpm build
          echo "📦 Bundle sizes:"
          du -sh client/dist/* || echo "No client build output"

  # Job 8: Documentation and Reporting
  documentation:
    name: 📚 Documentation Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for changed files

      - name: 🔍 Check for documentation updates
        run: |
          # Get changed files
          changed_files=$(git diff --name-only origin/main...HEAD)

          # Check if significant changes require documentation updates
          significant_changes=false

          if echo "$changed_files" | grep -E "(transformer|codemod|phase5)" > /dev/null; then
            significant_changes=true
          fi

          if echo "$changed_files" | grep -E "\.routes\.|\.controller\." > /dev/null; then
            significant_changes=true
          fi

          if [ "$significant_changes" = true ]; then
            echo "📝 Significant changes detected"
            if ! echo "$changed_files" | grep -E "\.(md|rst|txt)$" > /dev/null; then
              echo "⚠️  Consider updating documentation for these changes"
              echo "💡 Changed files suggest API or architecture changes"
            else
              echo "✅ Documentation files found in changes"
            fi
          else
            echo "✅ No significant changes requiring documentation"
          fi

  # Job 9: Deployment Readiness (main branch only)
  deployment-readiness:
    name: 🚀 Deployment Readiness
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [phase5-validation, zero-warnings, build-test, boundary-check]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: 🔧 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🚀 Full validation for deployment
        run: |
          echo "🏗️ Testing build process..."
          pnpm build

          echo "🔍 Final Phase 5 validation..."
          pnpm phase5:validate

          echo "📊 Generating deployment metrics..."
          pnpm phase5:validate --metrics

      - name: 📊 Generate deployment summary
        run: |
          echo "## 🚀 Phase 5 Deployment Readiness Report" >> $GITHUB_STEP_SUMMARY
          echo "✅ **All Phase 5 validations passed**" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Zero warnings policy enforced**" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Technical debt patterns eliminated**" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Import boundaries enforced**" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Build process successful**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **READY FOR DEPLOYMENT!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Phase 5 Quality Standards:" >> $GITHUB_STEP_SUMMARY
          echo "- No console.log in production code" >> $GITHUB_STEP_SUMMARY
          echo "- No req.user direct access" >> $GITHUB_STEP_SUMMARY
          echo "- All responses use transformers" >> $GITHUB_STEP_SUMMARY
          echo "- Zero ESLint warnings" >> $GITHUB_STEP_SUMMARY
          echo "- Full TypeScript compliance" >> $GITHUB_STEP_SUMMARY
