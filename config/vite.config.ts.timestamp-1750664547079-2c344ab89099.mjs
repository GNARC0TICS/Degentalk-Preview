// config/vite.config.ts
import { defineConfig } from 'file:///Users/gnarcotic/Degentalk/node_modules/vite/dist/node/index.js';
import react from 'file:///Users/gnarcotic/Degentalk/node_modules/@vitejs/plugin-react/dist/index.mjs';
import path from 'path';
import { fileURLToPath } from 'url';
import runtimeErrorOverlay from 'file:///Users/gnarcotic/Degentalk/node_modules/@replit/vite-plugin-runtime-error-modal/dist/index.mjs';
var __vite_injected_original_import_meta_url =
	'file:///Users/gnarcotic/Degentalk/config/vite.config.ts';
console.log(
	'\u{1F6A8} VITE CONFIG LOADED - If you see this during backend startup, you have a ghost import!'
);
var __filename = fileURLToPath(__vite_injected_original_import_meta_url);
var __dirname = path.dirname(__filename);
var projectRoot = path.resolve(__dirname, '..');
var vite_config_default = defineConfig(async () => {
	const plugins = [react(), runtimeErrorOverlay()];
	if (process.env.NODE_ENV !== 'production' && process.env.REPL_ID !== void 0) {
		try {
			const { cartographer } = await import(
				'file:///Users/gnarcotic/Degentalk/node_modules/@replit/vite-plugin-cartographer/dist/index.mjs'
			);
			plugins.push(cartographer());
		} catch (e) {
			console.warn('Failed to load cartographer plugin:', e);
		}
	}
	return {
		base: '/',
		plugins,
		define: {
			// Make process.env.NODE_ENV available in client code, mapping from Vite's import.meta.env.MODE
			'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV || 'development')
			// For build/dev consistency
			// Alternatively, more directly for client code if it specifically needs NODE_ENV:
			// 'process.env.NODE_ENV': JSON.stringify(mode), // where mode is 'development' or 'production'
		},
		resolve: {
			alias: [
				{ find: '@', replacement: path.resolve(projectRoot, 'client/src') },
				{ find: '@shared', replacement: path.resolve(projectRoot, 'shared') },
				{ find: '@assets', replacement: path.resolve(projectRoot, 'attached_assets') },
				{ find: '@db', replacement: path.resolve(projectRoot, 'db/index.ts') },
				{ find: '@db_types', replacement: path.resolve(projectRoot, 'db/types') },
				{ find: '@schema', replacement: path.resolve(projectRoot, 'db/schema/index.ts') },
				{ find: /^@schema\/(.*)/, replacement: path.resolve(projectRoot, 'db/schema/$1') },
				// Force Vite to use the single React copy from root node_modules
				{ find: 'react', replacement: path.resolve(projectRoot, 'node_modules/react') },
				{ find: 'react-dom', replacement: path.resolve(projectRoot, 'node_modules/react-dom') }
			],
			// Ensure only one React instance
			dedupe: ['react', 'react-dom']
		},
		optimizeDeps: {
			exclude: ['@lottiefiles/dotlottie-react'],
			include: ['react-lottie-player']
		},
		root: path.resolve(projectRoot, 'client'),
		server: {
			port: 5173,
			proxy: {
				'/api': {
					target: 'http://localhost:5001',
					changeOrigin: true,
					secure: false
				}
			}
		},
		build: {
			outDir: path.resolve(projectRoot, 'dist/public'),
			emptyOutDir: true,
			// Drop all console.* and debugger statements in production builds for smaller bundle & less runtime overhead
			esbuild: {
				drop: ['console', 'debugger']
			}
		},
		css: {
			postcss: path.resolve(projectRoot, 'config/postcss.config.js')
		}
	};
});
export { vite_config_default as default };
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiY29uZmlnL3ZpdGUuY29uZmlnLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL2duYXJjb3RpYy9EZWdlbnRhbGsvY29uZmlnXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvVXNlcnMvZ25hcmNvdGljL0RlZ2VudGFsay9jb25maWcvdml0ZS5jb25maWcudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL1VzZXJzL2duYXJjb3RpYy9EZWdlbnRhbGsvY29uZmlnL3ZpdGUuY29uZmlnLnRzXCI7Y29uc29sZS5sb2coXG5cdCdcdUQ4M0RcdURFQTggVklURSBDT05GSUcgTE9BREVEIC0gSWYgeW91IHNlZSB0aGlzIGR1cmluZyBiYWNrZW5kIHN0YXJ0dXAsIHlvdSBoYXZlIGEgZ2hvc3QgaW1wb3J0ISdcbik7XG5cbi8qKlxuICogQGZpbGUgY29uZmlnL3ZpdGUuY29uZmlnLnRzXG4gKiBAZGVzY3JpcHRpb24gVml0ZSBjb25maWd1cmF0aW9uIGZpbGUgZm9yIHRoZSBEZWdlbnRhbGsgZnJvbnRlbmQgYXBwbGljYXRpb24uXG4gKiBAcHVycG9zZSBDb25maWd1cmVzIHRoZSBkZXZlbG9wbWVudCBzZXJ2ZXIsIGJ1aWxkIHByb2Nlc3MsIGFuZCBtb2R1bGUgcmVzb2x1dGlvbiBmb3IgdGhlIGNsaWVudC1zaWRlIGFwcGxpY2F0aW9uLlxuICogQGRlcGVuZGVuY2llc1xuICogLSB2aXRlOiBDb3JlIGJ1aWxkIHRvb2wuXG4gKiAtIEB2aXRlanMvcGx1Z2luLXJlYWN0OiBWaXRlIHBsdWdpbiBmb3IgUmVhY3Qgc3VwcG9ydC5cbiAqIC0gcGF0aDogTm9kZS5qcyBwYXRoIG1vZHVsZSBmb3IgcmVzb2x2aW5nIGZpbGUgcGF0aHMuXG4gKiAtIHVybDogTm9kZS5qcyBVUkwgbW9kdWxlIGZvciBoYW5kbGluZyBmaWxlIFVSTHMuXG4gKiAtIEByZXBsaXQvdml0ZS1wbHVnaW4tcnVudGltZS1lcnJvci1tb2RhbDogUGx1Z2luIGZvciBkaXNwbGF5aW5nIHJ1bnRpbWUgZXJyb3Igb3ZlcmxheXMuXG4gKiAtIEByZXBsaXQvdml0ZS1wbHVnaW4tY2FydG9ncmFwaGVyOiAoQ29uZGl0aW9uYWwpIFBsdWdpbiBmb3IgUmVwbGl0LXNwZWNpZmljIGRldmVsb3BtZW50IHRvb2xpbmcuXG4gKiBAZW52aXJvbm1lbnQgRnJvbnRlbmQgYnVpbGQgYW5kIGRldmVsb3BtZW50IGVudmlyb25tZW50LlxuICogQGltcG9ydGFudF9ub3Rlc1xuICogLSBEZWZpbmVzIHBhdGggYWxpYXNlcyAoYEBgLCBgQHNoYXJlZGAsIGBAYXNzZXRzYCkgZm9yIGVhc2llciBtb2R1bGUgaW1wb3J0cy5cbiAqIC0gQ29uZmlndXJlcyB0aGUgZGV2ZWxvcG1lbnQgc2VydmVyIHByb3h5IHRvIGZvcndhcmQgQVBJIHJlcXVlc3RzIHRvIHRoZSBiYWNrZW5kLlxuICogLSBTcGVjaWZpZXMgdGhlIGJ1aWxkIG91dHB1dCBkaXJlY3RvcnkgYW5kIFBvc3RDU1MgY29uZmlndXJhdGlvbi5cbiAqIEBzdGF0dXMgU3RhYmxlLlxuICogQGxhc3RfcmV2aWV3ZWQgMjAyNS0wNi0wMVxuICogQG93bmVyIENsaW5lXG4gKi9cbmltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gJ3ZpdGUnO1xuaW1wb3J0IHJlYWN0IGZyb20gJ0B2aXRlanMvcGx1Z2luLXJlYWN0JztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ3VybCc7XG5pbXBvcnQgcnVudGltZUVycm9yT3ZlcmxheSBmcm9tICdAcmVwbGl0L3ZpdGUtcGx1Z2luLXJ1bnRpbWUtZXJyb3ItbW9kYWwnO1xuLy8gaW1wb3J0IHRzY29uZmlnUGF0aHMgZnJvbSAndml0ZS10c2NvbmZpZy1wYXRocyc7IC8vIFRlbXBvcmFyaWx5IHJlbW92ZSB0aGlzIHBsdWdpblxuXG5jb25zdCBfX2ZpbGVuYW1lID0gZmlsZVVSTFRvUGF0aChpbXBvcnQubWV0YS51cmwpO1xuY29uc3QgX19kaXJuYW1lID0gcGF0aC5kaXJuYW1lKF9fZmlsZW5hbWUpO1xuY29uc3QgcHJvamVjdFJvb3QgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nKTtcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKGFzeW5jICgpID0+IHtcblx0Y29uc3QgcGx1Z2lucyA9IFtyZWFjdCgpLCBydW50aW1lRXJyb3JPdmVybGF5KCldO1xuXG5cdGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHByb2Nlc3MuZW52LlJFUExfSUQgIT09IHVuZGVmaW5lZCkge1xuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCB7IGNhcnRvZ3JhcGhlciB9ID0gYXdhaXQgaW1wb3J0KCdAcmVwbGl0L3ZpdGUtcGx1Z2luLWNhcnRvZ3JhcGhlcicpO1xuXHRcdFx0cGx1Z2lucy5wdXNoKGNhcnRvZ3JhcGhlcigpKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRjb25zb2xlLndhcm4oJ0ZhaWxlZCB0byBsb2FkIGNhcnRvZ3JhcGhlciBwbHVnaW46JywgZSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRiYXNlOiAnLycsXG5cdFx0cGx1Z2lucyxcblx0XHRkZWZpbmU6IHtcblx0XHRcdC8vIE1ha2UgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgYXZhaWxhYmxlIGluIGNsaWVudCBjb2RlLCBtYXBwaW5nIGZyb20gVml0ZSdzIGltcG9ydC5tZXRhLmVudi5NT0RFXG5cdFx0XHQncHJvY2Vzcy5lbnYuTk9ERV9FTlYnOiBKU09OLnN0cmluZ2lmeShwcm9jZXNzLmVudi5OT0RFX0VOViB8fCAnZGV2ZWxvcG1lbnQnKSAvLyBGb3IgYnVpbGQvZGV2IGNvbnNpc3RlbmN5XG5cdFx0XHQvLyBBbHRlcm5hdGl2ZWx5LCBtb3JlIGRpcmVjdGx5IGZvciBjbGllbnQgY29kZSBpZiBpdCBzcGVjaWZpY2FsbHkgbmVlZHMgTk9ERV9FTlY6XG5cdFx0XHQvLyAncHJvY2Vzcy5lbnYuTk9ERV9FTlYnOiBKU09OLnN0cmluZ2lmeShtb2RlKSwgLy8gd2hlcmUgbW9kZSBpcyAnZGV2ZWxvcG1lbnQnIG9yICdwcm9kdWN0aW9uJ1xuXHRcdH0sXG5cdFx0cmVzb2x2ZToge1xuXHRcdFx0YWxpYXM6IFtcblx0XHRcdFx0eyBmaW5kOiAnQCcsIHJlcGxhY2VtZW50OiBwYXRoLnJlc29sdmUocHJvamVjdFJvb3QsICdjbGllbnQvc3JjJykgfSxcblx0XHRcdFx0eyBmaW5kOiAnQHNoYXJlZCcsIHJlcGxhY2VtZW50OiBwYXRoLnJlc29sdmUocHJvamVjdFJvb3QsICdzaGFyZWQnKSB9LFxuXHRcdFx0XHR7IGZpbmQ6ICdAYXNzZXRzJywgcmVwbGFjZW1lbnQ6IHBhdGgucmVzb2x2ZShwcm9qZWN0Um9vdCwgJ2F0dGFjaGVkX2Fzc2V0cycpIH0sXG5cdFx0XHRcdHsgZmluZDogJ0BkYicsIHJlcGxhY2VtZW50OiBwYXRoLnJlc29sdmUocHJvamVjdFJvb3QsICdkYi9pbmRleC50cycpIH0sXG5cdFx0XHRcdHsgZmluZDogJ0BkYl90eXBlcycsIHJlcGxhY2VtZW50OiBwYXRoLnJlc29sdmUocHJvamVjdFJvb3QsICdkYi90eXBlcycpIH0sXG5cdFx0XHRcdHsgZmluZDogJ0BzY2hlbWEnLCByZXBsYWNlbWVudDogcGF0aC5yZXNvbHZlKHByb2plY3RSb290LCAnZGIvc2NoZW1hL2luZGV4LnRzJykgfSxcblx0XHRcdFx0eyBmaW5kOiAvXkBzY2hlbWFcXC8oLiopLywgcmVwbGFjZW1lbnQ6IHBhdGgucmVzb2x2ZShwcm9qZWN0Um9vdCwgJ2RiL3NjaGVtYS8kMScpIH0sXG5cdFx0XHRcdC8vIEZvcmNlIFZpdGUgdG8gdXNlIHRoZSBzaW5nbGUgUmVhY3QgY29weSBmcm9tIHJvb3Qgbm9kZV9tb2R1bGVzXG5cdFx0XHRcdHsgZmluZDogJ3JlYWN0JywgcmVwbGFjZW1lbnQ6IHBhdGgucmVzb2x2ZShwcm9qZWN0Um9vdCwgJ25vZGVfbW9kdWxlcy9yZWFjdCcpIH0sXG5cdFx0XHRcdHsgZmluZDogJ3JlYWN0LWRvbScsIHJlcGxhY2VtZW50OiBwYXRoLnJlc29sdmUocHJvamVjdFJvb3QsICdub2RlX21vZHVsZXMvcmVhY3QtZG9tJykgfVxuXHRcdFx0XSxcblx0XHRcdC8vIEVuc3VyZSBvbmx5IG9uZSBSZWFjdCBpbnN0YW5jZVxuXHRcdFx0ZGVkdXBlOiBbJ3JlYWN0JywgJ3JlYWN0LWRvbSddXG5cdFx0fSxcblx0XHRvcHRpbWl6ZURlcHM6IHtcblx0XHRcdGV4Y2x1ZGU6IFsnQGxvdHRpZWZpbGVzL2RvdGxvdHRpZS1yZWFjdCddLFxuXHRcdFx0aW5jbHVkZTogWydyZWFjdC1sb3R0aWUtcGxheWVyJ11cblx0XHR9LFxuXHRcdHJvb3Q6IHBhdGgucmVzb2x2ZShwcm9qZWN0Um9vdCwgJ2NsaWVudCcpLFxuXHRcdHNlcnZlcjoge1xuXHRcdFx0cG9ydDogNTE3Myxcblx0XHRcdHByb3h5OiB7XG5cdFx0XHRcdCcvYXBpJzoge1xuXHRcdFx0XHRcdHRhcmdldDogJ2h0dHA6Ly9sb2NhbGhvc3Q6NTAwMScsXG5cdFx0XHRcdFx0Y2hhbmdlT3JpZ2luOiB0cnVlLFxuXHRcdFx0XHRcdHNlY3VyZTogZmFsc2Vcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0YnVpbGQ6IHtcblx0XHRcdG91dERpcjogcGF0aC5yZXNvbHZlKHByb2plY3RSb290LCAnZGlzdC9wdWJsaWMnKSxcblx0XHRcdGVtcHR5T3V0RGlyOiB0cnVlLFxuXHRcdFx0Ly8gRHJvcCBhbGwgY29uc29sZS4qIGFuZCBkZWJ1Z2dlciBzdGF0ZW1lbnRzIGluIHByb2R1Y3Rpb24gYnVpbGRzIGZvciBzbWFsbGVyIGJ1bmRsZSAmIGxlc3MgcnVudGltZSBvdmVyaGVhZFxuXHRcdFx0ZXNidWlsZDoge1xuXHRcdFx0XHRkcm9wOiBbJ2NvbnNvbGUnLCAnZGVidWdnZXInXVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Y3NzOiB7XG5cdFx0XHRwb3N0Y3NzOiBwYXRoLnJlc29sdmUocHJvamVjdFJvb3QsICdjb25maWcvcG9zdGNzcy5jb25maWcuanMnKVxuXHRcdH1cblx0fTtcbn0pO1xuIl0sCiAgIm1hcHBpbmdzIjogIjtBQXdCQSxTQUFTLG9CQUFvQjtBQUM3QixPQUFPLFdBQVc7QUFDbEIsT0FBTyxVQUFVO0FBQ2pCLFNBQVMscUJBQXFCO0FBQzlCLE9BQU8seUJBQXlCO0FBNUIwSSxJQUFNLDJDQUEyQztBQUEwRCxRQUFRO0FBQUEsRUFDNVI7QUFDRDtBQTZCQSxJQUFNLGFBQWEsY0FBYyx3Q0FBZTtBQUNoRCxJQUFNLFlBQVksS0FBSyxRQUFRLFVBQVU7QUFDekMsSUFBTSxjQUFjLEtBQUssUUFBUSxXQUFXLElBQUk7QUFFaEQsSUFBTyxzQkFBUSxhQUFhLFlBQVk7QUFDdkMsUUFBTSxVQUFVLENBQUMsTUFBTSxHQUFHLG9CQUFvQixDQUFDO0FBRS9DLE1BQUksUUFBUSxJQUFJLGFBQWEsZ0JBQWdCLFFBQVEsSUFBSSxZQUFZLFFBQVc7QUFDL0UsUUFBSTtBQUNILFlBQU0sRUFBRSxhQUFhLElBQUksTUFBTSxPQUFPLGdHQUFrQztBQUN4RSxjQUFRLEtBQUssYUFBYSxDQUFDO0FBQUEsSUFDNUIsU0FBUyxHQUFHO0FBQ1gsY0FBUSxLQUFLLHVDQUF1QyxDQUFDO0FBQUEsSUFDdEQ7QUFBQSxFQUNEO0FBRUEsU0FBTztBQUFBLElBQ04sTUFBTTtBQUFBLElBQ047QUFBQSxJQUNBLFFBQVE7QUFBQTtBQUFBLE1BRVAsd0JBQXdCLEtBQUssVUFBVSxRQUFRLElBQUksWUFBWSxhQUFhO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFHN0U7QUFBQSxJQUNBLFNBQVM7QUFBQSxNQUNSLE9BQU87QUFBQSxRQUNOLEVBQUUsTUFBTSxLQUFLLGFBQWEsS0FBSyxRQUFRLGFBQWEsWUFBWSxFQUFFO0FBQUEsUUFDbEUsRUFBRSxNQUFNLFdBQVcsYUFBYSxLQUFLLFFBQVEsYUFBYSxRQUFRLEVBQUU7QUFBQSxRQUNwRSxFQUFFLE1BQU0sV0FBVyxhQUFhLEtBQUssUUFBUSxhQUFhLGlCQUFpQixFQUFFO0FBQUEsUUFDN0UsRUFBRSxNQUFNLE9BQU8sYUFBYSxLQUFLLFFBQVEsYUFBYSxhQUFhLEVBQUU7QUFBQSxRQUNyRSxFQUFFLE1BQU0sYUFBYSxhQUFhLEtBQUssUUFBUSxhQUFhLFVBQVUsRUFBRTtBQUFBLFFBQ3hFLEVBQUUsTUFBTSxXQUFXLGFBQWEsS0FBSyxRQUFRLGFBQWEsb0JBQW9CLEVBQUU7QUFBQSxRQUNoRixFQUFFLE1BQU0sa0JBQWtCLGFBQWEsS0FBSyxRQUFRLGFBQWEsY0FBYyxFQUFFO0FBQUE7QUFBQSxRQUVqRixFQUFFLE1BQU0sU0FBUyxhQUFhLEtBQUssUUFBUSxhQUFhLG9CQUFvQixFQUFFO0FBQUEsUUFDOUUsRUFBRSxNQUFNLGFBQWEsYUFBYSxLQUFLLFFBQVEsYUFBYSx3QkFBd0IsRUFBRTtBQUFBLE1BQ3ZGO0FBQUE7QUFBQSxNQUVBLFFBQVEsQ0FBQyxTQUFTLFdBQVc7QUFBQSxJQUM5QjtBQUFBLElBQ0EsY0FBYztBQUFBLE1BQ2IsU0FBUyxDQUFDLDhCQUE4QjtBQUFBLE1BQ3hDLFNBQVMsQ0FBQyxxQkFBcUI7QUFBQSxJQUNoQztBQUFBLElBQ0EsTUFBTSxLQUFLLFFBQVEsYUFBYSxRQUFRO0FBQUEsSUFDeEMsUUFBUTtBQUFBLE1BQ1AsTUFBTTtBQUFBLE1BQ04sT0FBTztBQUFBLFFBQ04sUUFBUTtBQUFBLFVBQ1AsUUFBUTtBQUFBLFVBQ1IsY0FBYztBQUFBLFVBQ2QsUUFBUTtBQUFBLFFBQ1Q7QUFBQSxNQUNEO0FBQUEsSUFDRDtBQUFBLElBQ0EsT0FBTztBQUFBLE1BQ04sUUFBUSxLQUFLLFFBQVEsYUFBYSxhQUFhO0FBQUEsTUFDL0MsYUFBYTtBQUFBO0FBQUEsTUFFYixTQUFTO0FBQUEsUUFDUixNQUFNLENBQUMsV0FBVyxVQUFVO0FBQUEsTUFDN0I7QUFBQSxJQUNEO0FBQUEsSUFDQSxLQUFLO0FBQUEsTUFDSixTQUFTLEtBQUssUUFBUSxhQUFhLDBCQUEwQjtBQUFBLElBQzlEO0FBQUEsRUFDRDtBQUNELENBQUM7IiwKICAibmFtZXMiOiBbXQp9Cg==
