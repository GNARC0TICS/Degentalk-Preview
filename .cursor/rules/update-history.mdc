---
description: 
globs: 
alwaysApply: true
---
# Rule Update History

This document logs all additions, deletions, and evolutions of rules within the `.cursor/rules/` directory. It provides context for why rules change over time.

---

<!-- Example Entry -->
<!--
## YYYY-MM-DD HH:MM Rule Updated: `naming-rules.mdc`

**Change Type:** Modification

**Context/Reason:**
The original rule for flagging `utils.ts` was too broad and created excessive noise for domain-specific utility files (e.g., `client/src/features/forum/lib/forum-utils.ts`). The rule has been refined to only flag `utils.ts` (and similar generic names) when they appear outside of a clearly defined domain's `lib`, `types`, or `constants` subdirectory.

**Previous Rule Snippet (if applicable):**
```markdown
- **Flag Vague Names:** Automatically flag files named `utils.ts`, `helpers.ts`...
```

**New Rule Snippet (if applicable):**
```markdown
- **Flag Vague Names:** Automatically flag files named `index.ts` (if not a barrel export), `utils.ts`, `helpers.ts` ... especially when they exist outside of a clearly defined domain's `lib`, `types`, or `constants` subdirectory.
```

**Affected Files (if specific code changes resulted directly from this rule update):**
- N/A for this rule update itself, but future scans will use the new logic.

**Triggered By:** `rule-evolution.mdc` (Repeated false positives for domain-specific utils).
-->

## 2025-05-14 17:30 Rule Added: `api-client-pattern.mdc`

**Change Type:** Addition

**Context/Reason:**
During codebase audit, identified inconsistent API client usage between `api` from `@/lib/api.ts` and `apiRequest` from `@/lib/queryClient.ts`. Created a new rule to standardize API client approach and document the preferred pattern.

**New Rule Snippet:**
```markdown
# API Client Pattern

## Overview
This rule defines the standardized approach for API client usage in the Degentalk codebase.

## Preferred API Client
The preferred API client implementation is `apiRequest` from `@/lib/queryClient.ts`.
```

**Affected Files:**
- No direct code changes, but will guide future API client usage and refactoring.

**Triggered By:** Codebase audit and API client consolidation tasks in `refactor-tracker.md`.

## 2025-05-14 22:00 Rule Added: `startup-logging.mdc`

**Change Type:** Addition

**Context/Reason:**
Observed that when running `npm run dev`, it is not always clear from the logs which services (frontend, backend, or both) are starting, and critical runtime errors can be missed in noisy output. This rule is to ensure clear, explicit startup logging and error surfacing for all developers.

**New Rule Snippet:**
```markdown
# Startup Logging & Runtime Error Surfacing

## Objective
Ensure that when running `npm run dev`, the logs clearly indicate which services are starting (frontend, backend, or both), and that critical runtime errors are surfaced and easy to spot.

## Requirements
- On startup, output a clear message for each service (e.g., `Starting Backend API on port 5001`, `Starting Frontend (Vite) on port 5173`).
- If using a process manager (e.g., concurrently), prefix logs with `[backend]` or `[frontend]`.
- Surface any critical errors (e.g., 500s, DB errors) in a visually distinct way (e.g., with `❌` or `ERROR:` prefix).
- Document this pattern in the README and ensure all contributors follow it.

## Example
```
[backend] ✅ Backend API running on http://localhost:5001
[frontend] ✅ Frontend running on http://localhost:5173
[backend] ❌ Database connection failed: ...
```
```

**Affected Files:**
- `package.json` (scripts)
- Any process manager config (e.g., `concurrently`)
- README.md

**Triggered By:**
Terminal log review and developer experience audit.

## 2025-05-23 05:57 Rule Added: `schema-consistency.mdc`

**Change Type:** Addition

**Context/Reason:**
During forum API development, encountered critical `TypeError: Cannot convert undefined or null to object` errors caused by schema mismatches between SQLite and PostgreSQL table definitions. The forum service was attempting to query fields (`minGroupIdRequired`, `pluginData`) that didn't exist in the SQLite schema but were expected based on the service code. This rule prevents such errors by enforcing schema consistency and proper TypeScript typing.

**New Rule Snippet:**
```markdown
# Schema Consistency & Type Safety Rule

## Objective
Prevent `undefined`/`null` field reference errors in database queries and ensure consistent schema definitions between development (SQLite) and production (PostgreSQL) environments.

## Core Principles
1. **No Undefined Fields**: All schema fields referenced in services must exist in both SQLite and PostgreSQL versions
2. **Consistent Table Definitions**: Schema tables should have identical field structures regardless of database provider
3. **Proper TypeScript Typing**: All database fields should have explicit non-null types unless intentionally nullable
4. **Development Database Simplicity**: SQLite schema should mirror PostgreSQL for seamless development
```

**Affected Files:**
- `shared/schema.ts` - Must maintain consistent field definitions
- `server/src/domains/**/*.service.ts` - Must only reference existing schema fields
- `scripts/db/create-missing-tables.ts` - Must include all fields that services expect
- All database query code - Must handle nullable fields explicitly

**Triggered By:**
Forum API errors showing `TypeError: Cannot convert undefined or null to object` when trying to query undefined schema fields in the forum service's `getCategoriesWithStats()` method.

**Immediate Actions Required:**
1. Add missing `min_group_id_required` and `plugin_data` columns to SQLite schema
2. Update forum service to handle nullable fields properly  
3. Ensure all schema table definitions are consistent between SQLite and PostgreSQL

**Next Phase Ready:**
Schema consistency auditing, API standardization, and comprehensive testing.

---

## 2025-01-27 15:45 Code Optimization: `redundancy-elimination-phase-1`

**Change Type:** Code Optimization & Cleanup

**Context/Reason:**
Completed comprehensive code optimization focusing on eliminating redundancies and centralizing logic as part of the Degentalk audit and optimization plan. This optimization phase addressed multiple technical debt issues and improved code maintainability.

**Optimizations Completed:**
1. **AnnouncementCard Duplication Removed**: Eliminated identical component definitions from `home.tsx` and `forum.tsx`
2. **API Method Deduplication**: Removed duplicate `getCategoriesWithStats()` method from `forumApi.ts`
3. **Forum Structure Logic Centralized**: Replaced manual forum structure queries with existing `useForumStructure()` hook
4. **Import Cleanup**: Removed unused imports to reduce bundle size
5. **Type Safety Enhanced**: Added proper TypeScript typing for all parameters

**Affected Files:**
- `client/src/pages/home.tsx` - Removed AnnouncementCard, centralized forum structure fetching, cleaned imports
- `client/src/pages/forum.tsx` - Removed duplicate AnnouncementCard component
- `client/src/features/forum/services/forumApi.ts` - Removed duplicate `getCategoriesWithStats()` method
- `OPTIMIZATION_SUMMARY.md` - Created comprehensive documentation of optimization work

**Architecture Improvements:**
- ✅ Primary zones correctly displayed as prominent cards via `CanonicalZoneGrid`
- ✅ Secondary zones properly accessible via `SidebarNavigation`
- ✅ Single source of truth for forum structure data through `useForumStructure()` hook
- ✅ Consistent data fetching patterns across components
- ✅ Enhanced type safety and reduced runtime errors

**Performance Benefits:**
- Reduced bundle size through unused import removal
- Better caching through centralized queries
- Eliminated duplicate network requests

**Triggered By:**
Degentalk audit and next steps plan identifying multiple redundancies and architectural inconsistencies.

**Next Phase Ready:**
Schema consistency auditing, API standardization, and comprehensive testing.

---

## 2025-01-27 16:30 Critical Fix: `schema-consistency-forum-api-endpoints`

**Change Type:** Critical Bug Fix

**Context/Reason:**
Fixed critical forum API endpoint failures where frontend was receiving HTML "<!DOCTYPE..." instead of JSON, causing "Failed to load forum structure" and "Error loading forums" errors. Root cause was schema field mismatches between frontend expectations and backend implementation.

**Issues Resolved:**
1. **Missing API Endpoint**: `/api/forum/structure` endpoint was not defined in main forum routes
2. **Schema Field Mismatch**: Forum service was querying `minGroupIdRequired` and `pluginData` fields that didn't exist in the `forumCategories` table schema
3. **Frontend Error**: "Unexpected token '<', "<!DOCTYPE "... is not valid JSON" when API returned HTML 404 pages instead of JSON

**Files Modified:**
- `shared/schema.ts` - Added missing `minGroupIdRequired` and `pluginData` fields to `forumCategories` table
- `server/src/domains/forum/forum.routes.ts` - Added missing `/structure` endpoint
- `server/src/domains/forum/forum.service.ts` - Temporarily simplified `getCategoriesWithStats()` for debugging

**Technical Details:**
- The forum service was trying to access fields that existed in SQLite database but were missing from the TypeScript schema definition
- Missing `/structure` endpoint caused 404 responses which returned HTML instead of JSON
- Frontend `useForumStructure()` hook and `forumApi.getCategories()` were failing due to these schema/endpoint mismatches

**Test Results:**
- ✅ `/api/forum/structure` - Now returns proper JSON with forum hierarchy
- ✅ `/api/forum/categories` - Now returns proper JSON with category stats
- ✅ Frontend pages should now load without "Failed to load forum structure" errors

**Schema Consistency Rule Applied:**
This fix directly addresses the `schema-consistency.mdc` rule requiring all schema fields referenced in services to exist in both SQLite and PostgreSQL schemas with proper TypeScript typing.

**Triggered By:**
User report of "Failed to load forum structure" and "Error loading forums" on home and forum pages.

**Next Actions:**
1. Test frontend pages to confirm errors are resolved
2. Continue comprehensive schema audit for other tables
3. Restore full functionality to `getCategoriesWithStats()` with proper thread/post counts

---

## 2025-01-27 23:32 Critical Fix: `npm-script-infinite-loop-and-esm-issues`

**Change Type:** Critical Bug Fix

**Context/Reason:**
Fixed multiple critical development environment issues preventing `npm run dev` from working:
1. **Infinite Loop**: `"dev:client": "cd client && npm run dev"` was calling non-existent package.json
2. **Vite ESM Error**: CommonJS guard `require.main === module` caused "module is not defined in ES module scope"
3. **Duplicate Scripts**: Multiple "check" scripts caused JSON warnings

**Issues Resolved:**
1. **NPM Script Recursion**: Changed `dev:client` to call `vite` directly instead of delegating to non-existent client/package.json
2. **Vite Config ESM Safety**: Replaced CommonJS `require.main === module` check with ESM-safe `process?.env?.VITE_CONFIG_CONTEXT === 'backend'` guard
3. **Script Duplication**: Removed duplicate `"check": "tsc"` script, kept `"check": "tsx scripts/test-ci-readiness.ts"`

**Files Modified:**
- `package.json` - Fixed `dev:client` script and removed duplicate `check` script
- `config/vite.config.ts` - Replaced CommonJS guard with ESM-safe version
- `.cursor/rules/npm-script-safety.mdc` - Created comprehensive rule to prevent future npm script recursion
- `README.md` - Added emergency recovery documentation for npm script infinite loops

**Technical Details:**
- Root cause was `dev:client` trying to run `npm run dev` in client directory that has no package.json
- Vite config used CommonJS constructs in ESM environment causing module reference errors
- Multiple "check" scripts in same package.json caused JSON parsing warnings

**Test Results:**
- ✅ `npm run dev` now starts successfully without infinite recursion
- ✅ Frontend (Vite) runs on port 5173 without ESM errors
- ✅ Backend (TSX) runs without import/export errors
- ✅ No JSON duplicate key warnings
- ✅ Both services display proper startup logging with [backend]/[frontend] prefixes

**Prevention Measures:**
- Created `npm-script-safety.mdc` rule to detect and prevent script recursion
- Added emergency recovery commands to README.md
- Implemented ESM-safe guards in config files

**Triggered By:**
User report of npm script infinite loop causing system resource exhaustion and multiple development environment startup failures.

**Impact:**
Restored functional development environment, enabling normal development workflow to resume.

---
