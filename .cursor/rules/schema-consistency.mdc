---
description:
globs:
alwaysApply: false
---
# Schema Consistency & Type Safety Rule

## Objective
Prevent `undefined`/`null` field reference errors in database queries and ensure consistent schema definitions between development (SQLite) and production (PostgreSQL) environments.

## Core Principles
1. **No Undefined Fields**: All schema fields referenced in services must exist in both SQLite and PostgreSQL versions
2. **Consistent Table Definitions**: Schema tables should have identical field structures regardless of database provider
3. **Proper TypeScript Typing**: All database fields should have explicit non-null types unless intentionally nullable
4. **Development Database Simplicity**: SQLite schema should mirror PostgreSQL for seamless development

## Enforced Patterns

### 1. Schema Table Consistency
**REQUIRED**: All tables must be defined with identical fields for both SQLite and PostgreSQL:

```typescript
// ✅ CORRECT: Consistent table definition
export const forumCategories = sqliteTable('forum_categories', {
  id: integer('category_id').primaryKey(),
  name: text('name').notNull(),
  slug: text('slug').notNull(),
  description: text('description'),
  parentId: integer('parent_id'),
  minGroupIdRequired: integer('min_group_id_required'), // ✅ Explicitly defined
  pluginData: text('plugin_data').default('{}'), // ✅ Explicitly defined with default
  // ... all other fields must be present
});

// ❌ INCORRECT: Missing fields that services expect
export const forumCategories = sqliteTable('forum_categories', {
  id: integer('category_id').primaryKey(),
  name: text('name').notNull(),
  // ❌ Missing minGroupIdRequired, pluginData, etc.
});
```

### 2. Service Query Safety
**REQUIRED**: Services must only reference fields that exist in the schema:

```typescript
// ✅ CORRECT: All referenced fields exist in schema
const categoriesData = await db.select({
  id: forumCategories.id,
  name: forumCategories.name,
  minGroupIdRequired: forumCategories.minGroupIdRequired, // ✅ Exists in schema
  pluginData: forumCategories.pluginData, // ✅ Exists in schema
}).from(forumCategories);

// ❌ INCORRECT: Referencing undefined fields
const categoriesData = await db.select({
  id: forumCategories.id,
  name: forumCategories.name,
  someUndefinedField: forumCategories.someUndefinedField, // ❌ Does not exist
}).from(forumCategories);
```

### 3. Null Safety in Field Definitions
**REQUIRED**: Explicit null handling for all database fields:

```typescript
// ✅ CORRECT: Explicit null/non-null declarations
export const users = sqliteTable('users', {
  id: integer('user_id').primaryKey().notNull(),
  username: text('username').notNull(), // ✅ Required field
  email: text('email').notNull(), // ✅ Required field
  bio: text('bio'), // ✅ Implicitly nullable, but intentional
  avatarUrl: text('avatar_url').default(null), // ✅ Explicitly nullable with default
});

// ❌ INCORRECT: Ambiguous null handling
export const users = sqliteTable('users', {
  id: integer('user_id').primaryKey(),
  username: text('username'), // ❌ Should be .notNull() if required
  bio: text('bio').notNull(), // ❌ Should allow null if optional
});
```

### 4. Schema Migration Consistency
**REQUIRED**: When adding fields to schema, ensure they exist in both environments:

```typescript
// ✅ CORRECT: Add to create-missing-tables.ts script
await db.run(sql`
  ALTER TABLE forum_categories 
  ADD COLUMN min_group_id_required INTEGER DEFAULT NULL;
`);

await db.run(sql`
  ALTER TABLE forum_categories 
  ADD COLUMN plugin_data TEXT DEFAULT '{}';
`);
```

## Common Violations & Fixes

### Violation 1: Mixed Table Definitions
**Error**: `TypeError: Cannot convert undefined or null to object`

**Cause**: Schema has `sqliteTable` for some tables and `pgTable` for others

**Fix**: 
```typescript
// ❌ BEFORE: Mixed definitions
export const forumCategories = sqliteTable(/* ... */);
export const threads = pgTable(/* ... */); // ❌ Inconsistent

// ✅ AFTER: Consistent definitions
export const forumCategories = sqliteTable(/* ... */);
export const threads = sqliteTable(/* ... */); // ✅ Consistent for development
```

### Violation 2: Missing Schema Fields
**Error**: `forumCategories.minGroupIdRequired is undefined`

**Cause**: Service references fields not defined in schema

**Fix**:
```typescript
// ✅ Add missing fields to schema
export const forumCategories = sqliteTable('forum_categories', {
  // ... existing fields
  minGroupIdRequired: integer('min_group_id_required'),
  pluginData: text('plugin_data').default('{}'),
});
```

### Violation 3: Implicit Null Handling
**Error**: Runtime null pointer exceptions

**Cause**: Fields that can be null but aren't handled properly

**Fix**:
```typescript
// ✅ Explicit null handling in services
const categories = categoriesData.map(c => ({
  ...c,
  pluginData: c.pluginData || {}, // ✅ Handle potential null
  minGroupIdRequired: c.minGroupIdRequired ?? null, // ✅ Explicit null coalescing
}));
```

## Development Workflow

### 1. Schema Changes
When modifying `shared/schema.ts`:
1. **MUST** update both SQLite and PostgreSQL definitions
2. **MUST** add corresponding migration to `scripts/db/create-missing-tables.ts`
3. **MUST** test that all services can query new fields without errors
4. **MUST** run `npm run db:create-tables` to verify changes

### 2. Service Development
When writing database queries:
1. **MUST** verify all referenced fields exist in schema using TypeScript intellisense
2. **MUST** handle nullable fields explicitly with null coalescing or default values
3. **MUST** test queries against development SQLite database first

### 3. Error Prevention
Before deploying:
1. **MUST** run full test suite against SQLite
2. **MUST** verify no `undefined` field references in console
3. **MUST** check that all TypeScript types are properly inferred

## Automated Checks

### Pre-commit Hooks (Recommended)
```bash
# Check for undefined field references
npm run lint
npm run type-check

# Verify database queries work
npm run test:db
```

### IDE Integration
- Enable TypeScript strict mode
- Use ESLint rules for null safety
- Configure editor to show type errors immediately

## Migration Strategy

### Current State Fix
For the immediate forum API error:
1. Add missing fields to SQLite schema in `create-missing-tables.ts`
2. Update forum service to handle nullable fields properly
3. Test API endpoints return data without errors

### Long-term Consistency
1. Standardize all schema definitions to use consistent table builders
2. Create schema validation tests
3. Implement automated schema comparison between SQLite and PostgreSQL

## Examples

### ✅ Good Schema Pattern
```typescript
export const forumCategories = sqliteTable('forum_categories', {
  id: integer('category_id').primaryKey().notNull(),
  name: text('name').notNull(),
  slug: text('slug').notNull(),
  description: text('description'), // Nullable by design
  parentId: integer('parent_id'), // Nullable by design  
  minGroupIdRequired: integer('min_group_id_required'), // Explicitly defined
  pluginData: text('plugin_data').notNull().default('{}'), // Required with default
  isVip: integer('is_vip').notNull().default(0),
  isLocked: integer('is_locked').notNull().default(0),
  minXp: integer('min_xp').notNull().default(0),
  color: text('color'), // Nullable by design
  icon: text('icon'), // Nullable by design
  isHidden: integer('is_hidden').notNull().default(0),
  createdAt: text('created_at').notNull().default(sql`CURRENT_TIMESTAMP`),
  updatedAt: text('updated_at').notNull().default(sql`CURRENT_TIMESTAMP`)
});
```

### ✅ Good Service Pattern
```typescript
export const forumService = {
  async getCategoriesWithStats(): Promise<ForumCategoryWithStats[]> {
    const categoriesData = await db.select({
      id: forumCategories.id,
      name: forumCategories.name,
      description: forumCategories.description,
      slug: forumCategories.slug,
      position: forumCategories.position,
      isVip: forumCategories.isVip,
      isLocked: forumCategories.isLocked,
      minGroupIdRequired: forumCategories.minGroupIdRequired, // ✅ Exists in schema
      parentId: forumCategories.parentId,
      pluginData: forumCategories.pluginData, // ✅ Exists in schema
      minXp: forumCategories.minXp,
      color: forumCategories.color,
      icon: forumCategories.icon,
      isHidden: forumCategories.isHidden,
      // ... rest of fields
    })
    .from(forumCategories)
    // ... rest of query

    return categoriesData.map(c => ({
      ...c,
      pluginData: JSON.parse(c.pluginData || '{}'), // ✅ Safe null handling
      minGroupIdRequired: c.minGroupIdRequired ?? null, // ✅ Explicit null handling
      threadCount: Number(c.threadCount || 0),
      postCount: Number(c.postCount || 0)
    }));
  }
};
```

## Rule Violations = Immediate Fix Required

Any code that violates these patterns must be fixed immediately:
- Services referencing undefined schema fields
- Schema definitions missing fields that services expect  
- Implicit null handling that could cause runtime errors
- Inconsistent table definitions between environments

This rule is **ALWAYS APPLIED** and violations should block development until resolved.
