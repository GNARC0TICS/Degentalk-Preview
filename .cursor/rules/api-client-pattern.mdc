---
description:
globs:
alwaysApply: false
---
# API Client Pattern Rule

## Overview
This rule defines the standardized approach for API client usage in the Degentalk codebase.

## Preferred API Client
The preferred API client implementation is `apiRequest` from `@/lib/queryClient.ts`. All API calls should standardize on this implementation for consistency and improved error handling.

## Why `apiRequest` over `api`?
1. `apiRequest` provides built-in XP gain detection and triggering for toast notifications
2. Offers consistent error handling with structured error objects
3. Supports type safety through generic types
4. Includes better query parameter handling

## Migration Guidelines
When migrating from `api` to `apiRequest`:

1. Update imports:
   ```typescript
   // Old
   import { api } from '@/lib/api';
   
   // New
   import { apiRequest } from '@/lib/queryClient';
   ```

2. Update API call syntax:
   ```typescript
   // Old
   const data = await api.wallet.getBalance();
   
   // New
   const data = await apiRequest<WalletBalance>({
     url: '/api/wallet/balance',
     method: 'GET'
   });
   ```

3. For POST requests:
   ```typescript
   // Old
   const result = await api.wallet.transferDGT(userId, amount, reason);
   
   // New
   const result = await apiRequest<TransferResult>({
     url: '/api/wallet/transfer',
     method: 'POST',
     data: { toUserId: userId, amount, reason }
   });
   ```

4. Update React Query hooks:
   ```typescript
   // Old
   const { data } = useQuery(['walletBalance'], () => api.wallet.getBalance());
   
   // New
   const { data } = useQuery(['walletBalance'], () => 
     apiRequest<WalletBalance>({ url: '/api/wallet/balance' })
   );
   ```

## Backward Compatibility
During migration:
1. Maintain the existing `api` client for backward compatibility
2. When updating a component to use `apiRequest`, ensure all related components are also migrated
3. Tag each migration with a comment: `// REFAC: Migrated to apiRequest`
4. Document each migration in the refactor-tracker.md file

## Success Indicators
A successful migration to standardized API client will be indicated by:
1. Consistent error handling across all API calls
2. XP gain detection working for all relevant endpoints
3. Improved type safety for API responses

## References
- `client/src/lib/queryClient.ts` - Source of the `apiRequest` function
- `client/src/lib/api.ts` - Legacy API client to be migrated from

## Usage Pattern
```typescript
import { apiRequest } from '@/lib/queryClient';

// GET request
const data = await apiRequest<ResponseType>({
  url: '/api/endpoint',
  method: 'GET',
  params: { key: 'value' }
});

// POST request
const result = await apiRequest<ResultType>({
  url: '/api/endpoint', 
  method: 'POST',
  data: { key: 'value' }
});
```

## Deprecating Legacy Patterns
The following API client implementations are deprecated and should be gradually migrated to use `apiRequest`:

1. `api` from `@/lib/api.ts` - Older implementation with narrower functionality
2. `legacyApiRequest` from `@/lib/queryClient.ts` - Legacy wrapper around fetch
3. Direct usage of `fetch` or `axios` without going through the standardized client

## Migration Steps
When encountering legacy API client usage:

1. Replace with `apiRequest` from `@/lib/queryClient.ts`
2. Ensure proper typing with the generic parameter `apiRequest<ResponseType>()`
3. Update the interface to match `apiRequest`'s parameter format
4. Verify error handling is maintained
5. Test the updated implementation

## Benefits of Standardization
- Consistent error handling across the application
- Automatic XP gain detection and display
- Proper integration with React Query for caching
- Simplified debugging and maintenance
- Type safety through TypeScript generics

## Examples

### Before:
```typescript
// Using legacy api client
import { api } from '@/lib/api';
const data = await api.wallet.getBalance();

// Using fetch directly
const response = await fetch('/api/some/endpoint');
const data = await response.json();
```

### After:
```typescript
// Using standardized apiRequest
import { apiRequest } from '@/lib/queryClient';
const data = await apiRequest<WalletBalance>({
  url: '/api/wallet/balance'
});

// For POST with data
const result = await apiRequest<{ success: boolean }>({
  url: '/api/some/endpoint',
  method: 'POST',
  data: { key: 'value' }
});
```

## API Organization

For domain-specific API methods:

1. Create a service file in the domain's `services` directory:
   ```
   client/src/features/wallet/services/walletApi.ts
   ```

2. Export named functions that use `apiRequest`:
   ```typescript
   import { apiRequest } from '@/lib/queryClient';
   
   export async function getWalletBalance() {
     return apiRequest({ url: '/api/wallet/balance' });
   }
   
   export async function transferFunds(data) {
     return apiRequest({
       url: '/api/wallet/transfer',
       method: 'POST',
       data
     });
   }
   ```

3. Import these functions directly where needed:
   ```typescript
   import { getWalletBalance } from '@/features/wallet/services/walletApi';
   ```

## Feature-Specific Types

Place API-related types in a `types.ts` file within the feature directory:

```typescript
// client/src/features/wallet/types.ts
export interface WalletBalance {
  dgt: number;
  usdt: number;
}
```

## Legacy API Client Migration

The `api` object from `@/lib/api.ts` is deprecated and should be migrated to the pattern above.

When migrating a component that uses the legacy API client:

1. Identify the specific API methods used
2. Either use `apiRequest` directly or create/use feature-specific API functions
3. Update imports accordingly
