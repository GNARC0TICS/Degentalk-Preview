---
description:
globs:
alwaysApply: false
---
# Schema Synchronization Rules

## Objective
Maintain consistency between the database schema, Drizzle ORM models, API definitions, and frontend data structures.

## Triggers
- Any direct modification to `shared/schema.ts` (e.g., adding/removing tables or columns, changing types).
- Changes to Drizzle ORM configuration or model generation process (`drizzle.config.ts`).
- Creation or modification of database migration files in `migrations/` or `server/migrations/`.
- Manual indication by the user that a schema-related change has occurred elsewhere (e.g., direct database alteration).

## Actions

1.  **Migration Generation/Verification:**
    -   **Priority 1:** If `shared/schema.ts` is changed, prompt or automatically trigger the Drizzle Kit command to generate a new migration script (e.g., `pnpm drizzle-kit generate:pg --schema=shared/schema.ts --out=migrations`).
    -   Verify that the generated migration accurately reflects the schema changes.
    -   If migration files are changed directly, assume they are the source of truth and suggest verifying `shared/schema.ts` against them.

2.  **Downstream Impact Analysis:**
    -   Scan the codebase for files that import types or tables from `shared/schema.ts` or Drizzle-generated types.
    -   **Server-Side:**
        -   Check API route handlers (`server/src/domains/**/*.routes.ts`) for usage of changed schema entities in request/response validation (e.g., Zod schemas derived from Drizzle schemas) or database queries.
        -   Check service layers (`server/src/domains/**/*.services.ts`) for direct database interactions using the changed schema.
    -   **Client-Side:**
        -   Check API service layers (`client/src/features/**/services/*.ts`) for request/response type definitions related to the changed schema entities.
        -   Check React Query hooks (`client/src/features/**/hooks/*.ts`) for query keys, function signatures, and data transformation logic that might be affected.
        -   Check components (`client/src/components/**/*.tsx`, `client/src/pages/**/*.tsx`, `client/src/features/**/components/**/*.tsx`) that consume data derived from the changed schema.

3.  **Suggestion & Task Generation:**
    -   For each potentially affected file, generate specific TODO comments or suggestions highlighting the parts of the code that might need updates.
        -   Example: `// TODO: @schemaSync users.email is now non-nullable. Update validation and usage.`
    -   If significant downstream changes are anticipated, create an entry in `refactor-tracker.md` detailing the scope of the schema change and listing affected modules.

4.  **Type Synchronization:**
    -   Encourage regeneration or updates of Zod schemas derived from Drizzle schemas if `createInsertSchema` or similar utilities are used.
    -   Flag inconsistencies between manually defined API types (e.g., in `client/.../services/`) and the Drizzle/Zod types from `shared/schema.ts`.

## Rule Linking
- This rule is primarily triggered by `cheat-codes.mdc`'s **Two-Way Schema Syncing (@syncSchema)**.
- Findings may lead to tasks in `refactor-tracker.md`.
- Changes here might necessitate updates to rules in `refactor-rules.mdc` if they impact how data is structured or accessed.
