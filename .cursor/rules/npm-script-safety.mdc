---
description:
globs:
alwaysApply: false
---
# NPM Script Recursion Prevention

## Objective
Prevent infinite recursion loops in npm scripts that can cause runaway processes and system crashes.

## Core Rules

### 1. **No Self-Referencing Scripts**
- Scripts MUST NOT call themselves directly or indirectly
- `"dev": "npm run dev"` is **FORBIDDEN**
- `"dev": "cd ../ && npm run dev"` is **FORBIDDEN**

### 2. **Monorepo Script Safety**
When using `concurrently` or similar tools in monorepos:
- Child package.json files MUST NOT reference parent scripts
- `"dev:client": "cd client && npm run dev"` requires `client/package.json` to exist with a non-recursive `dev` script
- Prefer direct command execution over npm script delegation when possible

### 3. **Safe Script Patterns**

#### ✅ **GOOD: Direct Command Execution**
```json
{
  "scripts": {
    "dev": "concurrently \"npm run dev:server\" \"npm run dev:client\"",
    "dev:client": "vite --port 5173 --config config/vite.config.ts",
    "dev:server": "cd server && tsx index.ts"
  }
}
```

#### ✅ **GOOD: Reference to Different Script**
```json
{
  "scripts": {
    "dev": "npm run dev:frontend",
    "dev:frontend": "vite"
  }
}
```

#### ❌ **BAD: Self-Reference**
```json
{
  "scripts": {
    "dev": "npm run dev"  // Infinite loop!
  }
}
```

#### ❌ **BAD: Missing Child Package.json**
```json
{
  "scripts": {
    "dev:client": "cd client && npm run dev"  // Fails if client/package.json doesn't exist
  }
}
```

## Detection Triggers
- Flag any script that references itself by name
- Flag scripts that `cd` to directories without package.json files
- Warn when scripts call parent directory scripts (`cd ../`)

## Auto-Fixes
1. **Direct Command Substitution**: Replace `cd subfolder && npm run dev` with the actual command if subfolder lacks package.json
2. **Script Renaming**: Suggest renaming recursive scripts to break cycles
3. **Command Extraction**: Extract common commands to avoid delegation complexity

## Emergency Recovery
If infinite recursion is detected:
1. **Kill Process**: `pkill -f "npm run dev"` or `killall node`
2. **Check Process Tree**: `ps aux | grep npm` to identify runaway processes
3. **Port Cleanup**: Kill ports being used (`lsof -ti:5173 | xargs kill -9`)

## Rule Linking
- Links to `startup-logging.mdc` for clear process identification
- Reports to `rule-evolution.mdc` if patterns emerge requiring rule updates
- Integrates with development environment setup documentation

## Implementation Notes
- This rule prevents one of the most common and dangerous developer experience issues
- Applies to all package.json files in the workspace
- Should be checked before any new script addition or modification
