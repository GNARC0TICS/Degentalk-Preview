---
description: 
globs:
alwaysApply: true
---
# Rule Evolution & Self-Correction

## Objective
Enable the rule system to adapt and evolve based on observed coding patterns, repeated violations, and architectural shifts. This ensures rules remain relevant and don't become outdated dogma.

## Triggers
- **Repeated Violations:** A specific rule from `*.mdc` files is flagged multiple times (configurable threshold) within a defined period or across multiple files for the same pattern.
- **Emergent Patterns:** The system detects new, consistent coding patterns that are not covered by, or conflict with, existing rules.
- **Manual Trigger:** User explicitly requests a review of a rule or suggests an update.
- **Architectural Changes:** Significant refactoring (e.g., introduction of a new state management library, major changes to `directory-tree.md`) might imply that some rules need re-evaluation.
- **Feedback Loop:** From `cheat-codes.mdc` (`@evolveRule` annotation).

## Actions

1.  **Pattern Analysis & Contradiction Detection:**
    -   Analyze the instances of repeated violations or the characteristics of emergent patterns.
    -   Determine if the pattern is an anti-pattern, a genuine improvement, or a new convention that needs to be formalized.
    -   Identify which existing rule(s) are being contradicted or which area lacks a rule.

2.  **Propose Rule Update/Creation:**
    -   Based on the analysis, formulate a proposal for:
        -   **Modifying an existing rule:** Clarify ambiguity, adjust severity, broaden or narrow scope.
        -   **Creating a new rule:** To cover the emergent pattern.
        -   **Deprecating a rule:** If it's found to be obsolete or detrimental.
    -   The proposal should include:
        -   The original rule (if modifying/deprecating).
        -   The proposed new/updated rule text.
        -   Rationale for the change (e.g., "Reduces boilerplate in X scenario", "Aligns with new Y library usage").
        -   Examples of code that would pass/fail the new/updated rule.

3.  **Log to Update History:**
    -   Append the proposal and its context to `.cursor/rules/update-history.mdc`.
    -   Include timestamp, affected rule file(s), and a summary of the trigger.

4.  **User Confirmation (Crucial):**
    -   Present the proposed rule change to the user for confirmation or rejection.
    -   **No rule should be auto-updated without explicit user approval.**
    -   If approved, the agent can then apply the change to the relevant `.mdc` file.

5.  **Retraining/Re-indexing (Conceptual):**
    -   Once a rule is updated, the system should ideally re-evaluate past violations or suggestions based on the new rule, though this might be a more advanced feature.

## Rule Linking
- This rule is the meta-rule governing all other `.mdc` files.
- It receives input from violation trackers and pattern detectors (potentially linked to `cheat-codes.mdc`).
- All proposed and actual changes are logged in `.cursor/rules/update-history.mdc`.
- It ensures the `Rule Drift & Alignment Protocol` (from custom_instructions) is followed.

## Guiding Principle
Treat all rules as living documentation. The goal is not rigid enforcement but continuous improvement and alignment with the project's evolving needs.
