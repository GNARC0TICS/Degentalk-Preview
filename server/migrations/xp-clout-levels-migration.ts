import { drizzle } from 'drizzle-orm/node-postgres';
import { Pool } from 'pg';
import { sql } from 'drizzle-orm';
import { logger } from '../src/core/logger'; // Assuming logger path is correct
import { config } from 'dotenv';

// Load environment variables from .env file
config();

// Helper to get DB connection
const getDbConnection = () => {
  const connectionString = process.env.DATABASE_URL;
  if (!connectionString) {
    throw new Error("DATABASE_URL environment variable is not set.");
  }
  const pool = new Pool({ connectionString });
  return { db: drizzle(pool), pool };
};

export async function up() {
  logger.info('🚀 Applying migration: XP, Clout, Levels & Titles Enhancements');
  const { db, pool } = getDbConnection();

  try {
    await db.transaction(async (tx) => {
      // --- customEmojis Enhancements ---
      logger.info('Updating custom_emojis table...');
      await tx.execute(sql`ALTER TABLE custom_emojis ADD COLUMN IF NOT EXISTS xp_value INTEGER NOT NULL DEFAULT 0;`);
      await tx.execute(sql`ALTER TABLE custom_emojis ADD COLUMN IF NOT EXISTS clout_value INTEGER NOT NULL DEFAULT 0;`);

      // --- xpCloutSettings Table ---
      logger.info('Creating xp_clout_settings table...');
      await tx.execute(sql`
        CREATE TABLE IF NOT EXISTS xp_clout_settings (
          action_key VARCHAR(100) PRIMARY KEY,
          xp_value INTEGER NOT NULL DEFAULT 0,
          clout_value INTEGER NOT NULL DEFAULT 0,
          description TEXT
        );
      `);
      logger.info('Seeding default XP/Clout settings...');
      await tx.execute(sql`
        INSERT INTO xp_clout_settings (action_key, xp_value, clout_value, description) VALUES 
          ('POST_CREATE', 10, 1, 'XP/Clout gained for creating a post'),
          ('THREAD_CREATE', 25, 2, 'XP/Clout gained for creating a thread'),
          ('REACTION_RECEIVE_LIKE', 2, 1, 'XP/Clout gained when someone likes your post'),
          ('TIP_RECEIVE', 5, 1, 'XP/Clout gained per DGT received as tip (multiplier)'),
          ('TIP_SEND', 1, 0, 'XP gained per DGT sent as tip (multiplier)')
        ON CONFLICT (action_key) DO NOTHING;
      `);
      
      // --- titles Table ---
      logger.info('Creating titles table...');
      await tx.execute(sql`
        CREATE TABLE IF NOT EXISTS titles (
          title_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          name VARCHAR(100) NOT NULL,
          description TEXT,
          icon_url VARCHAR(255),
          rarity VARCHAR(50) DEFAULT 'common',
          created_at TIMESTAMP NOT NULL DEFAULT NOW()
        );
      `);
      
      // --- badges Table ---
      logger.info('Creating badges table...');
      await tx.execute(sql`
        CREATE TABLE IF NOT EXISTS badges (
          badge_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          name VARCHAR(100) NOT NULL,
          description TEXT,
          icon_url VARCHAR(255) NOT NULL,
          created_at TIMESTAMP NOT NULL DEFAULT NOW()
        );
      `);
      
      // --- levels Table Enhancements ---
      logger.info('Updating levels table...');
      await tx.execute(sql`ALTER TABLE levels ADD COLUMN IF NOT EXISTS name VARCHAR(100);`);
      await tx.execute(sql`ALTER TABLE levels ADD COLUMN IF NOT EXISTS reward_dgt INTEGER DEFAULT 0;`);
      await tx.execute(sql`ALTER TABLE levels ADD COLUMN IF NOT EXISTS reward_title_id INTEGER REFERENCES titles(title_id) ON DELETE SET NULL;`);
      await tx.execute(sql`ALTER TABLE levels ADD COLUMN IF NOT EXISTS reward_badge_id INTEGER REFERENCES badges(badge_id) ON DELETE SET NULL;`);

      // --- users Table Enhancements ---
      logger.info('Updating users table...');
      await tx.execute(sql`ALTER TABLE users ADD COLUMN IF NOT EXISTS clout INTEGER NOT NULL DEFAULT 0;`);
      await tx.execute(sql`ALTER TABLE users ADD COLUMN IF NOT EXISTS active_title_id INTEGER REFERENCES titles(title_id) ON DELETE SET NULL;`);
      await tx.execute(sql`ALTER TABLE users ADD COLUMN IF NOT EXISTS active_badge_id INTEGER REFERENCES badges(badge_id) ON DELETE SET NULL;`);

      logger.info('XP/Clout/Levels enhancements applied successfully.');
    });

    logger.info('✅ Migration applied successfully: XP, Clout, Levels & Titles Enhancements');
  } catch (error: unknown) {
    logger.error('❌ Error applying migration (XP, Clout, Levels & Titles Enhancements):', error);
    logger.error('Migration failed (XP, Clout, Levels & Titles Enhancements):', { error });
    throw error;
  } finally {
    await pool.end();
  }
}

export async function down() {
  logger.info('↩️ Reverting migration: XP, Clout, Levels & Titles Enhancements');
  const { db, pool } = getDbConnection();

  try {
    await db.transaction(async (tx) => {
      logger.info('Reverting users table enhancements...');
      await tx.execute(sql`ALTER TABLE users DROP COLUMN IF EXISTS active_badge_id;`);
      await tx.execute(sql`ALTER TABLE users DROP COLUMN IF EXISTS active_title_id;`);
      await tx.execute(sql`ALTER TABLE users DROP COLUMN IF EXISTS clout;`);

      logger.info('Reverting levels table enhancements...');
      await tx.execute(sql`ALTER TABLE levels DROP COLUMN IF EXISTS reward_badge_id;`);
      await tx.execute(sql`ALTER TABLE levels DROP COLUMN IF EXISTS reward_title_id;`);
      await tx.execute(sql`ALTER TABLE levels DROP COLUMN IF EXISTS reward_dgt;`);
      await tx.execute(sql`ALTER TABLE levels DROP COLUMN IF EXISTS name;`);

      logger.info('Dropping badges table...');
      await tx.execute(sql`DROP TABLE IF EXISTS badges;`);
      
      logger.info('Dropping titles table...');
      await tx.execute(sql`DROP TABLE IF EXISTS titles;`);

      logger.info('Dropping xp_clout_settings table...');
      await tx.execute(sql`DROP TABLE IF EXISTS xp_clout_settings;`);

      logger.info('Reverting custom_emojis table enhancements...');
      await tx.execute(sql`ALTER TABLE custom_emojis DROP COLUMN IF EXISTS clout_value;`);
      await tx.execute(sql`ALTER TABLE custom_emojis DROP COLUMN IF EXISTS xp_value;`);
      
      logger.info('✅ XP/Clout/Levels enhancements reverted successfully.');
    });
    logger.info('✅ Migration reverted successfully: XP, Clout, Levels & Titles Enhancements');
  } catch (error: unknown) {
    logger.error('❌ Error reverting migration (XP, Clout, Levels & Titles Enhancements):', error);
    logger.error('Revert migration failed (XP, Clout, Levels & Titles Enhancements):', { error });
    throw error;
  } finally {
    await pool.end();
  }
}

// Direct execution logic (optional, can be removed if using a migration runner)
// import { fileURLToPath } from 'url'; // Needs to be at the top if used
// const isMainModule = process.argv[1] === fileURLToPath(import.meta.url);
// if (isMainModule) {
//   const operation = process.argv[2];
//   if (operation === 'up') {
//     up().then(() => process.exit(0)).catch(() => process.exit(1));
//   } else if (operation === 'down') {
//     down().then(() => process.exit(0)).catch(() => process.exit(1));
//   } else {
//     logger.info("Please specify 'up' or 'down' as an argument to run this migration directly.");
//     process.exit(1);
//   }
// }
