/**
 * Achievement Routes
 *
 * HTTP routes for achievement system endpoints.
 * Includes both user-facing and admin routes.
 */

import { Router } from 'express';
import { AchievementController } from './achievement.controller';
import {
	isAuthenticated,
	isAdmin,
	isAdminOrModerator
} from '@server/auth/middleware/auth.middleware';

const router = Router();
const controller = new AchievementController();

// === PUBLIC ROUTES ===

/**
 * Get all available achievements (public view)
 * GET /api/achievements
 */
router.get('/', controller.getAchievements.bind(controller));

/**
 * Get achievement statistics
 * GET /api/achievements/stats
 */
router.get('/stats', controller.getAchievementStats.bind(controller));

/**
 * Get specific achievement details
 * GET /api/achievements/:id
 */
router.get('/:id', controller.getAchievementById.bind(controller));

/**
 * Get achievement templates
 * GET /api/achievements/templates
 */
router.get('/templates', controller.getAchievementTemplates.bind(controller));

// === USER ROUTES (require authentication) ===

/**
 * Get user's achievements with progress
 * GET /api/achievements/user/:userId
 */
router.get('/user/:userId', isAuthenticated, controller.getUserAchievements.bind(controller));

// === ADMIN ROUTES (require admin role) ===

/**
 * Create new achievement
 * POST /api/achievements
 */
router.post('/', isAuthenticated, isAdmin, controller.createAchievement.bind(controller));

/**
 * Update achievement
 * PUT /api/achievements/:id
 */
router.put('/:id', isAuthenticated, isAdmin, controller.updateAchievement.bind(controller));

/**
 * Delete achievement
 * DELETE /api/achievements/:id
 */
router.delete('/:id', isAuthenticated, isAdmin, controller.deleteAchievement.bind(controller));

/**
 * Bulk update achievements
 * PUT /api/achievements/bulk
 */
router.put('/bulk', isAuthenticated, isAdmin, controller.bulkUpdateAchievements.bind(controller));

/**
 * Get achievement completions
 * GET /api/achievements/:id/completions
 */
router.get(
	'/:id/completions',
	isAuthenticated,
	isAdminOrModerator,
	controller.getAchievementCompletions.bind(controller)
);

/**
 * Manually award achievement
 * POST /api/achievements/:id/award
 */
router.post(
	'/:id/award',
	isAuthenticated,
	isAdmin,
	controller.manuallyAwardAchievement.bind(controller)
);

/**
 * Create achievement from template
 * POST /api/achievements/templates/:templateId/create
 */
router.post(
	'/templates/:templateId/create',
	isAuthenticated,
	isAdmin,
	controller.createFromTemplate.bind(controller)
);

// === DEVELOPMENT/DEBUG ROUTES ===

/**
 * Emit achievement event (for testing/debugging)
 * POST /api/achievements/events/emit
 * Note: In production, this should be restricted to development environments
 */
if (process.env.NODE_ENV === 'development') {
	router.post(
		'/events/emit',
		isAuthenticated,
		isAdmin,
		controller.emitAchievementEvent.bind(controller)
	);
}

export { router as achievementRoutes };
