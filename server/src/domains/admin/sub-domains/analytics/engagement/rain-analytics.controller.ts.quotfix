/**
 * Rain Analytics Controller
 *
 * Handles requests for rain analytics data in the admin dashboard
 */

import type { Request, Response } from 'express';
import { rainAnalyticsService } from './rain-analytics.service';
import { logger } from '@core/logger';
import { sendSuccessResponse, sendErrorResponse } from '@core/utils/transformer.helpers';

class RainAnalyticsController {
	/**
	 * Get rain analytics data
	 * GET /api/admin/analytics/engagement/rain
	 */
	async getRainAnalytics(req: Request, res: Response) {
		try {
			// Extract query parameters with defaults
			const days = req.query.days ? parseInt(req.query.days as string) : 30;
			const topLimit = req.query.topLimit ? parseInt(req.query.topLimit as string) : 10;

			// Validate parameters
			if (isNaN(days) || days < 1 || days > 365) {
				return sendErrorResponse(res, 'Invalid days parameter. Must be between 1 and 365.', 400);
			}

			if (isNaN(topLimit) || topLimit < 1 || topLimit > 100) {
				return sendErrorResponse(res, 'Invalid topLimit parameter. Must be between 1 and 100.', 400);
			}

			// Get analytics data from service
			const analytics = await rainAnalyticsService.getRainAnalytics(days, topLimit);

			// Return the data
			return sendSuccessResponse(res, analytics);
		} catch (error) {
			logger.error('Error fetching rain analytics:', error);
			return sendErrorResponse(res, 'An error occurred while fetching rain analytics', 500);
		}
	}
}

export const rainAnalyticsController = new RainAnalyticsController();
