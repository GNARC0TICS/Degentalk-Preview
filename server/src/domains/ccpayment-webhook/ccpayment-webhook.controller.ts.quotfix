/**
 * CCPayment Webhook Controller
 *
 * This controller handles webhook requests from CCPayment.
 * It verifies the webhook signature and passes verified events to the service.
 */

import type { Request, Response } from 'express';
import { logger } from '@core/logger';
import { ccpaymentService } from '../wallet/providers/ccpayment/ccpayment.service';
import { ccpaymentWebhookService } from './ccpayment-webhook.service';
import { WalletError, ErrorCodes as WalletErrorCodes } from '@core/errors';
import crypto from 'crypto';
import { sendSuccessResponse, sendErrorResponse } from '@core/utils/transformer.helpers';

/**
 * CCPayment webhook controller
 */
export class CCPaymentWebhookController {
	/**
	 * Handle webhook POST request from CCPayment
	 * Note: Input is validated by validateRequest middleware before reaching this controller
	 * @param req Express request
	 * @param res Express response
	 */
	async handleWebhook(req: Request, res: Response): Promise<void> {
		try {
			// req.headers and req.body are now validated by webhookValidation.ccpaymentWebhook schema
			logger.info('Received CCPayment webhook', {
				headers: {
					signature: 'present',
					timestamp: req.header('X-Timestamp'),
					appId: req.header('X-App-Id')
				}
			});

			// Extract signature headers (already validated)
			const signature = req.header('X-Signature')!;
			const timestamp = req.header('X-Timestamp')!;
			const appId = req.header('X-App-Id')!;

			// Verify webhook signature
			const isValid = ccpaymentService.verifyWebhookSignature(req.body, signature, timestamp);

			if (!isValid) {
				logger.warn('Invalid webhook signature');
				sendErrorResponse(res, 'Invalid webhook signature', 401);
				return;
			}

			// Process the webhook event (already validated)
			const webhookEvent = req.body;

			// Log the webhook event
			logger.info('Processing verified webhook event', {
				eventType: webhookEvent.eventType,
				orderId: webhookEvent.orderId,
				merchantOrderId: webhookEvent.merchantOrderId,
				status: webhookEvent.status
			});

			// Process the event (asynchronously, but don't wait for completion)
			// This allows us to respond quickly to CCPayment while processing in the background
			const processPromise = ccpaymentWebhookService.processWebhookEvent(webhookEvent);

			// Immediately respond to the webhook
			sendSuccessResponse(res, {
				success: true,
				message: 'Webhook received and validated'
			});

			// Wait for processing to complete (for logging purposes)
			const result = await processPromise;
			logger.info('Webhook processing completed', result);
		} catch (error) {
			logger.error('Error handling webhook', error);

			// Still respond with 200 to CCPayment to prevent retries
			// CCPayment expects 200 OK even if processing fails
			sendSuccessResponse(res, {
				success: false,
				message: 'Webhook received but processing failed'
			});
		}
	}
}

// Export a singleton instance
export const ccpaymentWebhookController = new CCPaymentWebhookController();
