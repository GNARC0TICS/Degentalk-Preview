/**
 * Forum Configuration Service
 *
 * QUALITY IMPROVEMENT: Extracted from forum.service.ts god object
 * Handles forum configuration parsing, validation, and zone type determination
 */

import { logger } from '@core/logger';
import {
	forumMap,
	type Forum as ConfigForum,
	type Zone as ConfigZone
} from '@shared/../client/src/config/forumMap.config';
import type { ForumCategoryWithStats } from '@db/types/forum.types';
import type { StructureId } from '@shared/types/ids';

export interface ForumConfigEntry {
	forum: ConfigForum;
	zone: ConfigZone;
}

export class ConfigService {
	/**
	 * Parse zone type from pluginData with proper validation
	 */
	parseZoneType(pluginData: unknown): 'primary' | 'general' {
		if (
			pluginData &&
			typeof pluginData === 'object' &&
			pluginData !== null &&
			'configZoneType' in pluginData
		) {
			const t = (pluginData as { configZoneType?: string }).configZoneType;
			if (t === 'primary') {
				return 'primary';
			} else if (t === 'general') {
				return 'general';
			}
			logger.warn('ConfigService', 'Malformed configZoneType in pluginData', {
				pluginDataValue: t,
				defaultingTo: 'general'
			});
			return 'general'; // Default for malformed but existing type
		}

		// Log missing configZoneType or entirely missing pluginData
		if (
			pluginData &&
			typeof pluginData === 'object' &&
			pluginData !== null &&
			!('configZoneType' in pluginData)
		) {
			logger.warn('ConfigService', 'Missing configZoneType in pluginData', {
				pluginDataKeys: Object.keys(pluginData),
				defaultingTo: 'general'
			});
		} else if (!pluginData || (typeof pluginData === 'object' && pluginData === null)) {
			// Check for null explicitly
			logger.warn('ConfigService', 'Missing or null pluginData for zone', {
				defaultingTo: 'general'
			});
		}
		return 'general'; // Default to 'general' if missing or malformed
	}

	/**
	 * Get forum configuration by slug from forumMap
	 */
	getForumBySlug(slug: string): ForumConfigEntry | null {
		const entry = forumMap.getForumBySlug?.(slug);
		if (!entry) {
			return null;
		}
		return entry as ForumConfigEntry;
	}

	/**
	 * Validate forum slug and ensure it's a leaf forum (no sub-forums)
	 */
	ensureValidLeafForum(slug: string): ConfigForum {
		const entry = forumMap.getForumBySlug?.(slug);
		if (!entry) {
			throw new Error(`Invalid forum slug: ${slug}`);
		}
		const { forum } = entry;
		if (forum.forums && forum.forums.length > 0) {
			throw new Error(`Cannot fetch threads from a parent forum: ${slug}`);
		}
		return forum;
	}

	/**
	 * Map config forum to ForumCategoryWithStats structure
	 */
	mapConfigForumToCategory(
		forum: ConfigForum,
		zone: ConfigZone,
		parentId: StructureId | null = null
	): ForumCategoryWithStats {
		const baseColor = forum.themeOverride?.color || zone.theme.color;
		const baseIcon = zone.theme.icon;
		const baseColorTheme = forum.themeOverride?.colorTheme || zone.theme.colorTheme;

		return {
			id: 0, // 0 indicates config-only entity (no DB row)
			name: forum.name,
			slug: forum.slug,
			description: forum.description ?? null,
			parentForumSlug: parentId ? forum.slug : null,
			parentId,
			type: 'forum',
			position: forum.position ?? 0,
			isVip: false,
			isLocked: false,
			minXp: forum.rules.minXpRequired ?? 0,
			color: forum.themeOverride?.color || baseColor,
			icon: baseIcon,
			colorTheme: forum.themeOverride?.colorTheme || baseColorTheme,
			isHidden: false,
			minGroupIdRequired: null,
			tippingEnabled: forum.rules.tippingEnabled,
			xpMultiplier: forum.rules.xpMultiplier ?? 1,
			pluginData: forum.rules,
			createdAt: new Date(),
			updatedAt: new Date(),
			threadCount: 0,
			postCount: 0,
			childForums: Array.isArray(forum.forums)
				? forum.forums.map((sf) => this.mapConfigForumToCategory(sf, zone, 0))
				: []
		};
	}

	/**
	 * Process plugin data to extract zone features
	 */
	processZoneFeatures(pluginData: unknown): {
		features: string[];
		customComponents: string[];
		staffOnly: boolean;
		isPrimary: boolean;
	} {
		const pd = pluginData && typeof pluginData === 'object' ? pluginData : {};
		const features = Array.isArray(pd.features) ? pd.features : [];
		const customComponents = Array.isArray(pd.customComponents) ? pd.customComponents : [];
		const staffOnly = typeof pd.staffOnly === 'boolean' ? pd.staffOnly : false;
		const isPrimary = this.parseZoneType(pluginData) === 'primary';

		return {
			features,
			customComponents,
			staffOnly,
			isPrimary
		};
	}
}

// Export singleton instance
export const configService = new ConfigService();
