services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: degentalk-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-degentalk}
      POSTGRES_USER: ${POSTGRES_USER:-degentalk}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/migrations:/docker-entrypoint-initdb.d
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    networks:
      - degentalk-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-degentalk}']
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: degentalk-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - '${REDIS_PORT:-6379}:6379'
    networks:
      - degentalk-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # DegenTalk Application (Development)
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: degentalk-dev
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://${POSTGRES_USER:-degentalk}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-degentalk}
      - REDIS_URL=redis://redis:6379
      - PORT=5001
      - VITE_API_URL=http://localhost:5001
    volumes:
      - .:/app
      - /app/node_modules
      - /app/client/node_modules
      - /app/server/node_modules
    ports:
      - '5173:5173' # Vite dev server
      - '5001:5001' # Express server
    networks:
      - degentalk-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - development

  # DegenTalk Application (Production)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: server
    container_name: degentalk-app
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-degentalk}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-degentalk}
      - REDIS_URL=redis://redis:6379
      - PORT=5001
      - CCPAYMENT_APP_ID=${CCPAYMENT_APP_ID}
      - CCPAYMENT_APP_SECRET=${CCPAYMENT_APP_SECRET}
    volumes:
      - app_logs:/app/logs
    ports:
      - '${APP_PORT:-5001}:5001'
    networks:
      - degentalk-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:5001/api/status']
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - production

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: degentalk-nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./client/dist:/usr/share/nginx/html:ro
    ports:
      - '${NGINX_PORT:-80}:80'
      - '${NGINX_SSL_PORT:-443}:443'
    networks:
      - degentalk-network
    depends_on:
      - app
    restart: unless-stopped
    profiles:
      - production

  # Claude Code Development Environment
  claude-code:
    build:
      context: .
      dockerfile: Dockerfile
      target: claude-code
    container_name: degentalk-claude
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://${POSTGRES_USER:-degentalk}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-degentalk}
      - REDIS_URL=redis://redis:6379
      - CLAUDE_WORKSPACE=true
    volumes:
      - .:/workspace
      - claude_data:/home/claude
    ports:
      - '5173:5173'
      - '5001:5001'
    networks:
      - degentalk-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    stdin_open: true
    tty: true
    profiles:
      - claude

  # Zen MCP Server (from existing config)
  zen-mcp:
    build:
      context: ./zen-mcp-server
      dockerfile: Dockerfile
      target: runtime
    container_name: zen-mcp-server
    environment:
      - DEFAULT_MODEL=${DEFAULT_MODEL:-auto}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONUNBUFFERED=1
    volumes:
      - ./zen-mcp-server/logs:/app/logs
      - zen_mcp_config:/app/conf
    networks:
      - degentalk-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'python', '/usr/local/bin/healthcheck.py']
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - mcp
      - full

volumes:
  postgres_data:
  redis_data:
  app_logs:
  claude_data:
  zen_mcp_config:

networks:
  degentalk-network:
    driver: bridge
