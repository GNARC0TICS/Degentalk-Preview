#!/bin/bash

# DegenTalk Targeted Cleanup Script
# Focus only on workspace artifacts, not node_modules

set -e

echo "üßπ Starting Targeted DegenTalk Cleanup..."
echo "========================================"

PROJECT_ROOT="/home/developer/Degentalk-BETA"
cd "$PROJECT_ROOT"

# Count files in workspaces only (exclude node_modules)
count_workspace_files() {
    local pattern="$1"
    find shared/ db/ server/ client/ scripts/ -name "$pattern" 2>/dev/null | wc -l
}

echo ""
echo "üéØ PHASE 1: Workspace Compiled Artifacts"
echo "========================================"

# Remove .d.ts files from workspaces
echo "üìÅ Removing TypeScript declaration files from workspaces..."
d_ts_count=$(count_workspace_files "*.d.ts")
echo "   Found: $d_ts_count .d.ts files in workspaces"
if [ "$d_ts_count" -gt 0 ]; then
    find shared/ db/ server/ client/ scripts/ -name "*.d.ts" -delete 2>/dev/null || true
    echo "   ‚úÖ Removed $d_ts_count .d.ts files"
else
    echo "   ‚úÖ No .d.ts files found in workspaces"
fi

# Remove .d.ts.map files from workspaces
echo "üìÅ Removing TypeScript declaration map files from workspaces..."
d_ts_map_count=$(count_workspace_files "*.d.ts.map")
echo "   Found: $d_ts_map_count .d.ts.map files in workspaces"
if [ "$d_ts_map_count" -gt 0 ]; then
    find shared/ db/ server/ client/ scripts/ -name "*.d.ts.map" -delete 2>/dev/null || true
    echo "   ‚úÖ Removed $d_ts_map_count .d.ts.map files"
else
    echo "   ‚úÖ No .d.ts.map files found in workspaces"
fi

echo ""
echo "üîç PHASE 2: JS Files with TS Counterparts"
echo "========================================"

# Remove JS files that have TS counterparts in workspaces
js_removed=0
while IFS= read -r -d '' jsfile; do
    # Skip if it's in node_modules
    if [[ "$jsfile" == *"/node_modules/"* ]]; then
        continue
    fi
    
    tsfile="${jsfile%.js}.ts"
    if [ -f "$tsfile" ]; then
        echo "   Removing: $jsfile (has $tsfile)"
        rm "$jsfile"
        ((js_removed++))
    fi
done < <(find shared/ db/ server/ client/ scripts/ -name "*.js" -type f -print0 2>/dev/null)

echo "   ‚úÖ Removed $js_removed JS files with TS counterparts"

echo ""
echo "üóÇÔ∏è  PHASE 3: Archive Cleanup"
echo "============================"

# Remove archive directories
echo "üìÅ Removing archive directories..."
archive_dirs=$(find . -type d -name "archive" ! -path "./node_modules/*" 2>/dev/null)
if [ -n "$archive_dirs" ]; then
    echo "$archive_dirs" | while read -r dir; do
        echo "   Removing: $dir"
        rm -rf "$dir"
    done
    echo "   ‚úÖ Removed archive directories"
else
    echo "   ‚úÖ No archive directories found"
fi

# Remove dist directories in workspaces
echo "üìÅ Removing dist directories from workspaces..."
dist_dirs=$(find shared/ db/ -type d -name "dist" 2>/dev/null)
if [ -n "$dist_dirs" ]; then
    echo "$dist_dirs" | while read -r dir; do
        echo "   Removing: $dir"
        rm -rf "$dir"
    done
    echo "   ‚úÖ Removed dist directories"
else
    echo "   ‚úÖ No dist directories found in workspaces"
fi

echo ""
echo "üóÑÔ∏è  PHASE 4: Cache Cleanup"
echo "=========================="

# Remove cache directories
cache_patterns=(".tscache" "logs" "temp" "tmp")
for pattern in "${cache_patterns[@]}"; do
    echo "üìÅ Removing $pattern directories..."
    cache_dirs=$(find . -type d -name "$pattern" ! -path "./node_modules/*" 2>/dev/null)
    if [ -n "$cache_dirs" ]; then
        echo "$cache_dirs" | while read -r dir; do
            echo "   Removing: $dir"
            rm -rf "$dir"
        done
        echo "   ‚úÖ Removed $pattern directories"
    else
        echo "   ‚úÖ No $pattern directories found"
    fi
done

# Remove common temporary files
echo "üìÅ Removing temporary files..."
temp_files=(".DS_Store" "Thumbs.db" "*.swp" "*.swo")
temp_removed=0
for pattern in "${temp_files[@]}"; do
    files=$(find . -name "$pattern" ! -path "./node_modules/*" 2>/dev/null)
    if [ -n "$files" ]; then
        echo "$files" | while read -r file; do
            echo "   Removing: $file"
            rm -f "$file"
            ((temp_removed++))
        done
    fi
done
echo "   ‚úÖ Removed temporary files"

echo ""
echo "üìù PHASE 5: Update .gitignore"
echo "============================="

# Update .gitignore
if ! grep -q "# Cleanup script additions" .gitignore 2>/dev/null; then
    echo "üìù Updating .gitignore..."
    cat >> .gitignore << 'EOF'

# Cleanup script additions
**/*.d.ts
**/*.d.ts.map
shared/dist/
db/dist/
**/archive/
**/.tscache/
**/logs/
**/temp/
**/tmp/
.DS_Store
Thumbs.db
*.swp
*.swo
EOF
    echo "   ‚úÖ Updated .gitignore"
else
    echo "   ‚úÖ .gitignore already updated"
fi

echo ""
echo "üéâ CLEANUP COMPLETE!"
echo "==================="
echo "‚úÖ Compiled artifacts removed from workspaces"
echo "‚úÖ Duplicate JS files removed" 
echo "‚úÖ Archive directories cleaned"
echo "‚úÖ Cache directories removed"
echo "‚úÖ Temporary files cleaned"
echo "‚úÖ .gitignore updated"
echo ""
echo "üöÄ Next: Run './scripts/strengthen-architecture.sh' to add architectural scaffolding"