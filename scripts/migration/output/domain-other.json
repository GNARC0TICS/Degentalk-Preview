{
  "name": "other",
  "files": [
    {
      "path": "playwright.config.ts",
      "domain": "other",
      "layer": "other",
      "size": 4794,
      "lines": 192,
      "complexity": 3,
      "dependencies": [
        "@playwright/test"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.3
    },
    {
      "path": "drizzle.config.ts",
      "domain": "other",
      "layer": "other",
      "size": 637,
      "lines": 18,
      "complexity": 0,
      "dependencies": [
        "drizzle-kit"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": [
          "Config"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.1
    },
    {
      "path": "shared/types.ts",
      "domain": "other",
      "layer": "other",
      "size": 62,
      "lines": 2,
      "complexity": 0,
      "dependencies": [],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.1
    },
    {
      "path": "shared/paths.config.ts",
      "domain": "other",
      "layer": "other",
      "size": 1660,
      "lines": 51,
      "complexity": 0,
      "dependencies": [
        "path",
        "url"
      ],
      "exports": [
        "paths",
        "pathMapping"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.1
    },
    {
      "path": "shared/path-config.ts",
      "domain": "other",
      "layer": "other",
      "size": 3777,
      "lines": 142,
      "complexity": 2,
      "dependencies": [
        "@degentalk/db/types"
      ],
      "exports": [
        "PathDefinition",
        "availablePaths",
        "categoryPathMappings",
        "xpRewards",
        "getPathForCategory",
        "getPathDefinition",
        "getDominantPath"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "CategoryId"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.9
    },
    {
      "path": "shared/index.ts",
      "domain": "other",
      "layer": "other",
      "size": 352,
      "lines": 11,
      "complexity": 0,
      "dependencies": [],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "shared/constants.ts",
      "domain": "other",
      "layer": "other",
      "size": 571,
      "lines": 14,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "CONTENT_STATUS_CONFIG",
        "ContentStatusKey"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "server/vite.ts",
      "domain": "other",
      "layer": "other",
      "size": 3821,
      "lines": 117,
      "complexity": 3,
      "dependencies": [
        "express",
        "fs",
        "path",
        "url",
        "vite",
        "http",
        "nanoid",
        "crypto"
      ],
      "exports": [
        "log",
        "serveStatic"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.6
    },
    {
      "path": "server/storage.ts",
      "domain": "other",
      "layer": "other",
      "size": 65679,
      "lines": 2346,
      "complexity": 10,
      "dependencies": [
        "@db",
        "drizzle-orm",
        "express-session",
        "connect-pg-simple",
        "crypto",
        "util",
        "drizzle-orm/pg-core",
        "multer-s3",
        "@aws-sdk/client-s3"
      ],
      "exports": [
        "IStorage",
        "DatabaseStorage",
        "storage"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 84,
          "context": "getUser(id: number | string): Promise<User | undefined>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 88,
          "context": "updateUser(id: number, userData: Partial<User>): Promise<User>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 94,
          "context": "getUserGroup(id: number): Promise<typeof userGroups.$inferSelect | undefined>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.5
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 97,
          "context": "id: number,",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 100,
          "context": "deleteUserGroup(id: number): Promise<void>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 104,
          "context": "getForumRule(id: number): Promise<ForumRule | undefined>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 107,
          "context": "id: number,",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 110,
          "context": "deleteForumRule(id: number): Promise<void>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 116,
          "context": "getStructure(id: number): Promise<ForumStructureWithStats | undefined>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 127,
          "context": "getThread(id: number): Promise<ThreadWithUser | undefined>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 130,
          "context": "incrementThreadViewCount(id: number): Promise<void>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 133,
          "context": "getDraft(id: number): Promise<ThreadDraft | undefined>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 136,
          "context": "updateDraft(id: number, data: Partial<ThreadDraft>): Promise<ThreadDraft>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 137,
          "context": "deleteDraft(id: number): Promise<void>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 138,
          "context": "publishDraft(id: number): Promise<Thread>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 146,
          "context": "getPost(id: number): Promise<PostWithUser | undefined>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 148,
          "context": "updatePost(id: number, postData: Partial<Post> & { editorId: number }): Promise<Post>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 149,
          "context": "deletePost(id: number): Promise<void>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 157,
          "context": "markNotificationAsRead(id: number): Promise<void>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 161,
          "context": "getEmoji(id: number): Promise<CustomEmoji | undefined>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 163,
          "context": "updateEmoji(id: number, emoji: Partial<CustomEmoji>): Promise<CustomEmoji>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 164,
          "context": "deleteEmoji(id: number): Promise<void>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 170,
          "context": "getProduct(id: number): Promise<Product | undefined>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 172,
          "context": "updateProduct(id: number, data: Partial<Product>): Promise<Product>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 173,
          "context": "deleteProduct(id: number): Promise<void>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 180,
          "context": "getConversation(id: number): Promise<Conversation | undefined>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 259,
          "context": "async getUser(id: number | string): Promise<User | undefined> {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 491,
          "context": "async updateUser(id: number, userData: Partial<User>): Promise<User> {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 556,
          "context": "async getStructure(id: number): Promise<ForumStructureWithStats | undefined> {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 667,
          "context": "async getThread(id: number): Promise<ThreadWithUser | undefined> {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 745,
          "context": "async incrementThreadViewCount(id: number): Promise<void> {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 755,
          "context": "async getDraft(id: number): Promise<ThreadDraft | undefined> {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 790,
          "context": "async updateDraft(id: number, data: Partial<ThreadDraft>): Promise<ThreadDraft> {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 804,
          "context": "async deleteDraft(id: number): Promise<void> {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 808,
          "context": "async publishDraft(id: number): Promise<Thread> {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 923,
          "context": "async getPost(id: number): Promise<PostWithUser | undefined> {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 968,
          "context": "async updatePost(id: number, postData: Partial<Post> & { editorId: number }): Promise<Post> {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 1010,
          "context": "async deletePost(id: number): Promise<void> {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 1177,
          "context": "async markNotificationAsRead(id: number): Promise<void> {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 1198,
          "context": "async getEmoji(id: number): Promise<CustomEmoji | undefined> {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 1219,
          "context": "async updateEmoji(id: number, emoji: Partial<CustomEmoji>): Promise<CustomEmoji> {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 1232,
          "context": "async deleteEmoji(id: number): Promise<void> {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 1324,
          "context": "async getUserGroup(id: number): Promise<typeof userGroups.$inferSelect | undefined> {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.5
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 1348,
          "context": "async getForumRule(id: number): Promise<ForumRule | undefined> {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 1371,
          "context": "id: number,",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 1393,
          "context": "async deleteForumRule(id: number): Promise<void> {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 1536,
          "context": "id: number,",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 1551,
          "context": "async deleteUserGroup(id: number): Promise<void> {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 1607,
          "context": "async getProduct(id: number): Promise<Product | undefined> {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 1644,
          "context": "async updateProduct(id: number, data: Partial<Product>): Promise<Product> {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 1657,
          "context": "async deleteProduct(id: number): Promise<void> {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 1854,
          "context": "async getConversation(id: number): Promise<Conversation | undefined> {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 111,
          "context": "getUserRuleAgreements(userId: number): Promise<UserRulesAgreement[]>;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 112,
          "context": "agreeToRule(userId: number, ruleId: number, versionHash: string): Promise<void>;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 129,
          "context": "createThread(thread: InsertThread & { userId: number }): Promise<Thread>;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 134,
          "context": "getDraftsByUser(userId: number, structureId?: number): Promise<ThreadDraft[]>;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 142,
          "context": "getThreadFeaturePermissionsForUser(userId: number): Promise<Record<string, boolean>>;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 147,
          "context": "createPost(post: InsertPost & { userId: number; isFirstPost?: boolean }): Promise<Post>;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 152,
          "context": "addReaction(userId: number, postId: number, reaction: string): Promise<void>;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 153,
          "context": "removeReaction(userId: number, postId: number, reaction: string): Promise<void>;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 156,
          "context": "getNotifications(userId: number, limit?: number, offset?: number): Promise<Notification[]>;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 165,
          "context": "getAvailableEmojisForUser(userId: number): Promise<EmojiWithAvailability[]>;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 166,
          "context": "unlockEmojiForUser(userId: number, emojiId: number): Promise<void>;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 174,
          "context": "purchaseProduct(userId: number, productId: number, quantity?: number): Promise<Order>;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 178,
          "context": "userId: number",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 199,
          "context": "markMessagesAsRead(conversationId: number, userId: number): Promise<void>;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 202,
          "context": "addUserXp(userId: number, amount: number, path?: string): Promise<void>;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 203,
          "context": "getUserPathXp(userId: number, path?: string): Promise<Record<string, number>>;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 204,
          "context": "recalculateUserPathMultipliers(userId: number): Promise<Record<string, number>>;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 207,
          "context": "getUserInventory(userId: number): Promise<UserInventoryItem[]>;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 208,
          "context": "checkUserOwnsProduct(userId: number, productId: number): Promise<boolean>;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 211,
          "context": "userId: number,",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 216,
          "context": "userId: number;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 387,
          "context": "async storeVerificationToken(userId: number, token: string): Promise<void> {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 695,
          "context": "async createThread(thread: InsertThread & { userId: number }): Promise<Thread> {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 761,
          "context": "async getDraftsByUser(userId: number, structureId?: number): Promise<ThreadDraft[]> {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 880,
          "context": "async getThreadFeaturePermissionsForUser(userId: number): Promise<Record<string, boolean>> {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 936,
          "context": "async createPost(post: InsertPost & { userId: number; isFirstPost?: boolean }): Promise<Post> {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 1070,
          "context": "async addReaction(userId: number, postId: number, reaction: string): Promise<void> {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 1108,
          "context": "async removeReaction(userId: number, postId: number, reaction: string): Promise<void> {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 1167,
          "context": "async getNotifications(userId: number, limit = 20, offset = 0): Promise<Notification[]> {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 1242,
          "context": "async getAvailableEmojisForUser(userId: number): Promise<EmojiWithAvailability[]> {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 1286,
          "context": "async unlockEmojiForUser(userId: number, emojiId: number): Promise<void> {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 1397,
          "context": "async getUserRuleAgreements(userId: number): Promise<UserRulesAgreement[]> {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 1405,
          "context": "async agreeToRule(userId: number, ruleId: number, versionHash: string): Promise<void> {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 1667,
          "context": "async purchaseProduct(userId: number, productId: number, quantity: number = 1): Promise<Order> {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 1795,
          "context": "userId: number",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 1997,
          "context": "async markMessagesAsRead(conversationId: number, userId: number): Promise<void> {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 2036,
          "context": "async addUserXp(userId: number, amount: number, path?: string): Promise<void> {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 2123,
          "context": "async getUserPathXp(userId: number, path?: string): Promise<Record<string, number>> {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 2144,
          "context": "async recalculateUserPathMultipliers(userId: number): Promise<Record<string, number>> {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 2203,
          "context": "async getUserInventory(userId: number): Promise<UserInventoryItem[]> {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 2225,
          "context": "async checkUserOwnsProduct(userId: number, productId: number): Promise<boolean> {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 2293,
          "context": "userId: number,",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 2307,
          "context": "userId: number",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 2317,
          "context": "userId: number;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "threadId: number",
          "line": 145,
          "context": "getPosts(threadId: number, limit?: number, offset?: number): Promise<PostWithUser[]>;",
          "suggestedFix": "ThreadId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "threadId: number",
          "line": 909,
          "context": "async getPosts(threadId: number, limit = 20, offset = 0): Promise<PostWithUser[]> {",
          "suggestedFix": "ThreadId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "postId: number",
          "line": 152,
          "context": "addReaction(userId: number, postId: number, reaction: string): Promise<void>;",
          "suggestedFix": "PostId",
          "confidence": 0.5
        },
        {
          "type": "definition",
          "pattern": "postId: number",
          "line": 153,
          "context": "removeReaction(userId: number, postId: number, reaction: string): Promise<void>;",
          "suggestedFix": "PostId",
          "confidence": 0.5
        },
        {
          "type": "definition",
          "pattern": "postId: number",
          "line": 1070,
          "context": "async addReaction(userId: number, postId: number, reaction: string): Promise<void> {",
          "suggestedFix": "PostId",
          "confidence": 0.5
        },
        {
          "type": "definition",
          "pattern": "postId: number",
          "line": 1108,
          "context": "async removeReaction(userId: number, postId: number, reaction: string): Promise<void> {",
          "suggestedFix": "PostId",
          "confidence": 0.5
        }
      ],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": true,
        "hasBrandedIds": true,
        "hasNumericIds": true,
        "hasTypeGuards": true,
        "hasZodValidation": true,
        "typeImports": [
          "ForumStructureWithStats",
          "ThreadWithUser",
          "PostWithUser"
        ]
      },
      "riskLevel": "high",
      "migrationEffort": 10
    },
    {
      "path": "server/routes.ts",
      "domain": "other",
      "layer": "other",
      "size": 19595,
      "lines": 540,
      "complexity": 6,
      "dependencies": [
        "src/domains/",
        "express",
        "http",
        "ws",
        "@schema",
        "zod",
        "@shared/path-config",
        "crypto",
        "drizzle-orm",
        "passport",
        "express-session",
        "express-rate-limit",
        "crypto",
        "@schema/system/analyticsEvents"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": true,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 2.2
    },
    {
      "path": "server/index.ts",
      "domain": "other",
      "layer": "other",
      "size": 6714,
      "lines": 187,
      "complexity": 3,
      "dependencies": [
        "express"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 2.1
    },
    {
      "path": "scripts/validate-imports.ts",
      "domain": "other",
      "layer": "other",
      "size": 8205,
      "lines": 274,
      "complexity": 6,
      "dependencies": [
        "path",
        "fs",
        "glob",
        "chalk"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": true,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 1.7000000000000002
    },
    {
      "path": "scripts/validate-everything.ts",
      "domain": "other",
      "layer": "other",
      "size": 6954,
      "lines": 253,
      "complexity": 4,
      "dependencies": [
        "node:child_process",
        "node:util",
        "chalk",
        "path"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 2.3
    },
    {
      "path": "scripts/test-ci-readiness.ts",
      "domain": "other",
      "layer": "other",
      "size": 4385,
      "lines": 150,
      "complexity": 2,
      "dependencies": [
        "@db/types",
        "fs",
        "fs",
        "chalk"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": [
          "AdminId"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.4
    },
    {
      "path": "scripts/reset-db-clean.ts",
      "domain": "other",
      "layer": "other",
      "size": 1235,
      "lines": 44,
      "complexity": 1,
      "dependencies": [
        "drizzle-orm"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.2
    },
    {
      "path": "scripts/fix-table-references.ts",
      "domain": "other",
      "layer": "other",
      "size": 1746,
      "lines": 50,
      "complexity": 2,
      "dependencies": [
        "@db/types",
        "fs",
        "glob",
        "path"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": [
          "AdminId"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.4
    },
    {
      "path": "scripts/fix-missing-uuid-imports.ts",
      "domain": "other",
      "layer": "other",
      "size": 2255,
      "lines": 64,
      "complexity": 2,
      "dependencies": [
        "fs",
        "glob",
        "path",
        ",\\n\\t",
        "drizzle-orm/pg-core"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.4
    },
    {
      "path": "scripts/fix-integer-imports.ts",
      "domain": "other",
      "layer": "other",
      "size": 2107,
      "lines": 65,
      "complexity": 2,
      "dependencies": [
        "fs",
        "glob",
        "path",
        ",\\n\\t"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.4
    },
    {
      "path": "scripts/fix-all-schema-issues.ts",
      "domain": "other",
      "layer": "other",
      "size": 2895,
      "lines": 82,
      "complexity": 2,
      "dependencies": [
        "@db/types",
        "fs",
        "glob",
        "path",
        ",\\n\\t",
        "drizzle-orm/pg-core"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": [
          "AdminId"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.4
    },
    {
      "path": "db/index.ts",
      "domain": "other",
      "layer": "other",
      "size": 1155,
      "lines": 36,
      "complexity": 1,
      "dependencies": [
        "drizzle-orm/neon-http",
        "@neondatabase/serverless",
        "drizzle-orm/node-postgres",
        "pg",
        "dotenv",
        "ws",
        "pg"
      ],
      "exports": [
        "pool",
        "db"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": [
          "Pool as PgPool"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 1.2
    },
    {
      "path": "client/vitest.config.ts",
      "domain": "other",
      "layer": "other",
      "size": 509,
      "lines": 21,
      "complexity": 0,
      "dependencies": [
        "vitest/config",
        "@vitejs/plugin-react",
        "path"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/vite.config.ts",
      "domain": "other",
      "layer": "other",
      "size": 3848,
      "lines": 97,
      "complexity": 2,
      "dependencies": [
        "vite",
        "@vitejs/plugin-react",
        "path",
        "url",
        "@replit/vite-plugin-runtime-error-modal",
        "vite-tsconfig-paths"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.4
    },
    {
      "path": "client/tailwind.config.ts",
      "domain": "other",
      "layer": "other",
      "size": 6675,
      "lines": 231,
      "complexity": 1,
      "dependencies": [
        "tailwindcss",
        "tailwindcss-animate",
        "@tailwindcss/typography",
        "@tailwindcss/container-queries"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "Config"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "config/vite.config.ts",
      "domain": "other",
      "layer": "other",
      "size": 3965,
      "lines": 101,
      "complexity": 2,
      "dependencies": [
        "vite",
        "@vitejs/plugin-react",
        "path",
        "url",
        "@replit/vite-plugin-runtime-error-modal",
        "vite-tsconfig-paths"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.4
    },
    {
      "path": "config/tailwind.config.ts",
      "domain": "other",
      "layer": "other",
      "size": 6689,
      "lines": 231,
      "complexity": 1,
      "dependencies": [
        "tailwindcss",
        "tailwindcss-animate",
        "@tailwindcss/typography",
        "@tailwindcss/container-queries"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "Config"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "shared/validators/index.ts",
      "domain": "other",
      "layer": "other",
      "size": 28,
      "lines": 2,
      "complexity": 0,
      "dependencies": [],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "shared/types/index.ts",
      "domain": "other",
      "layer": "types",
      "size": 5657,
      "lines": 328,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "Nullable",
        "Optional",
        "PartialExcept",
        "DeepPartial",
        "Timestamped",
        "SoftDeletable",
        "Auditable",
        "WithPagination",
        "SearchResult",
        "isUser",
        "isUserProfile",
        "isForum",
        "isThread",
        "isPost",
        "isWallet",
        "isTransaction",
        "isShopItem",
        "isFrame",
        "isBadge",
        "isTitle"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": true,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 0.1
    },
    {
      "path": "shared/types/config.types.ts",
      "domain": "other",
      "layer": "types",
      "size": 4441,
      "lines": 227,
      "complexity": 0,
      "dependencies": [
        "@db/types/id.types"
      ],
      "exports": [
        "BaseConfig",
        "FeatureGate",
        "ModuleConfig",
        "ApiConfig",
        "DatabaseConfig",
        "CacheConfig",
        "SecurityConfig",
        "NotificationConfig",
        "UIConfig",
        "EconomyConfig",
        "GamificationConfig",
        "ForumConfig",
        "SocialConfig",
        "ConfigValidation",
        "ConfigStore",
        "EnvironmentConfig",
        "ConfigChange",
        "ConfigAuditLog",
        "ConfigService"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": true,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": [
          "UserId"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 0.1
    },
    {
      "path": "shared/types/api.types.ts",
      "domain": "other",
      "layer": "types",
      "size": 2530,
      "lines": 114,
      "complexity": 1,
      "dependencies": [
        "@db/types/id.types"
      ],
      "exports": [
        "ApiSuccess",
        "ApiError",
        "ApiResponse",
        "PaginationMeta",
        "FilterMeta",
        "PaginatedRequest",
        "FilteredRequest",
        "PaginatedFilteredRequest",
        "ControllerResponse",
        "TypedRequest",
        "TypedResponse",
        "ExtractApiData"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": true,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "UserId"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 1.7
    },
    {
      "path": "shared/utils/id.ts",
      "domain": "other",
      "layer": "utils",
      "size": 2249,
      "lines": 90,
      "complexity": 3,
      "dependencies": [
        "@db/types"
      ],
      "exports": [
        "toId",
        "isValidId",
        "validateUuid",
        "parseId",
        "generateId",
        "idsEqual",
        "filterValidIds"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": true,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": [
          "Id"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.3000000000000001
    },
    {
      "path": "shared/signature/SignatureTierConfig.ts",
      "domain": "other",
      "layer": "other",
      "size": 2330,
      "lines": 102,
      "complexity": 1,
      "dependencies": [],
      "exports": [
        "SignatureTierLevel",
        "SignatureTierConfig",
        "getSignatureTierForLevel"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "shared/lib/index.ts",
      "domain": "other",
      "layer": "utils",
      "size": 647,
      "lines": 25,
      "complexity": 0,
      "dependencies": [],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "shared/fixtures/index.ts",
      "domain": "other",
      "layer": "other",
      "size": 4028,
      "lines": 150,
      "complexity": 1,
      "dependencies": [
        "@fixtures",
        "@fixtures"
      ],
      "exports": [
        "FIXTURES_VERSION",
        "SUPPORTED_ENTITIES",
        "SupportedEntity",
        "FixturesConfig",
        "initializeFixtures",
        "FixtureUser",
        "FixtureThread",
        "FixturePost",
        "FixtureForum",
        "BaseFactory",
        "FactoryBuilder",
        "FactoryRegistry",
        "Factory",
        "UserFactory",
        "AdminUserFactory",
        "CryptoWhaleFactory",
        "NewbieUserFactory",
        "ThreadFactory",
        "PostFactory",
        "ForumCategoryFactory"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "shared/enums/index.ts",
      "domain": "other",
      "layer": "other",
      "size": 27,
      "lines": 2,
      "complexity": 0,
      "dependencies": [],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "shared/config/zoneThemes.config.ts",
      "domain": "other",
      "layer": "other",
      "size": 3202,
      "lines": 99,
      "complexity": 1,
      "dependencies": [],
      "exports": [
        "GlowIntensity",
        "RarityOverlay",
        "ZoneTheme",
        "ZONE_THEMES",
        "ZoneThemeKey",
        "getZoneTheme"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "shared/config/social.config.ts",
      "domain": "other",
      "layer": "other",
      "size": 6986,
      "lines": 315,
      "complexity": 2,
      "dependencies": [],
      "exports": [
        "SocialFeatureConfig",
        "MentionsConfig",
        "WhaleWatchConfig",
        "FriendsConfig",
        "SocialConfig",
        "defaultSocialConfig",
        "SocialConfigHelper",
        "isMentionsConfig",
        "isWhaleWatchConfig",
        "isFriendsConfig"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.0999999999999999
    },
    {
      "path": "shared/config/index.ts",
      "domain": "other",
      "layer": "other",
      "size": 111,
      "lines": 4,
      "complexity": 0,
      "dependencies": [],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "server/utils/task-scheduler.ts",
      "domain": "other",
      "layer": "utils",
      "size": 983,
      "lines": 38,
      "complexity": 2,
      "dependencies": [],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.9
    },
    {
      "path": "server/utils/slugify.ts",
      "domain": "other",
      "layer": "utils",
      "size": 177,
      "lines": 9,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "slugify"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "server/utils/platform-energy.ts",
      "domain": "other",
      "layer": "utils",
      "size": 5356,
      "lines": 215,
      "complexity": 9,
      "dependencies": [
        "drizzle-orm",
        "@db",
        "@schema",
        "drizzle-orm"
      ],
      "exports": [],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 193,
          "context": "export async function featureThread(threadId: number, userId: number, expiresAt?: Date) {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "threadId: number",
          "line": 193,
          "context": "export async function featureThread(threadId: number, userId: number, expiresAt?: Date) {",
          "suggestedFix": "ThreadId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "threadId: number",
          "line": 206,
          "context": "export async function unfeatureThread(threadId: number) {",
          "suggestedFix": "ThreadId",
          "confidence": 0.8
        }
      ],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 2.1
    },
    {
      "path": "server/utils/path-utils.ts",
      "domain": "other",
      "layer": "utils",
      "size": 5187,
      "lines": 202,
      "complexity": 5,
      "dependencies": [
        "@shared/path-config"
      ],
      "exports": [
        "UserPaths",
        "awardPathXp",
        "getUserPaths",
        "addPathToUser",
        "removePathFromUser",
        "setPathXp",
        "getPathMultipliers",
        "getPathMultiplier"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 2.5
    },
    {
      "path": "server/src/app.ts",
      "domain": "other",
      "layer": "other",
      "size": 249,
      "lines": 8,
      "complexity": 0,
      "dependencies": [],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "server/services/path-service.ts",
      "domain": "other",
      "layer": "services",
      "size": 7920,
      "lines": 327,
      "complexity": 7,
      "dependencies": [
        "@db",
        "drizzle-orm"
      ],
      "exports": [
        "PathService"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 68,
          "context": "static async getUserPaths(userId: number): Promise<Array<UserPath & { path: XpPath }>> {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 103,
          "context": "static async getUserPrimaryPath(userId: number): Promise<(UserPath & { path: XpPath }) | null> {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 143,
          "context": "static async setUserPrimaryPath(userId: number, pathId: string): Promise<boolean> {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 196,
          "context": "userId: number,",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 308,
          "context": "static async getUserPathRank(userId: number, pathId: string): Promise<number | null> {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        }
      ],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "high",
      "migrationEffort": 2.4000000000000004
    },
    {
      "path": "server/migrations/20250626_extend_ui_themes.ts",
      "domain": "other",
      "layer": "other",
      "size": 987,
      "lines": 29,
      "complexity": 1,
      "dependencies": [
        "drizzle-orm",
        "drizzle-orm/node-postgres/migrator"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "server/migrations/20250618_add_rollout_percentage_to_feature_flags.ts",
      "domain": "other",
      "layer": "other",
      "size": 599,
      "lines": 15,
      "complexity": 1,
      "dependencies": [
        "drizzle-orm",
        "drizzle-orm/node-postgres/migrator"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.19999999999999996
    },
    {
      "path": "server/config/loadEnv.ts",
      "domain": "other",
      "layer": "other",
      "size": 2662,
      "lines": 71,
      "complexity": 1,
      "dependencies": [
        "dotenv",
        "path",
        "url"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.7
    },
    {
      "path": "scripts/tools/icon-scan.ts",
      "domain": "other",
      "layer": "other",
      "size": 5923,
      "lines": 131,
      "complexity": 2,
      "dependencies": [
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": [
          "HeatEventId"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.10000000000000003
    },
    {
      "path": "scripts/testing/test-repository-implementation.ts",
      "domain": "other",
      "layer": "other",
      "size": 4232,
      "lines": 111,
      "complexity": 2,
      "dependencies": [
        "@server/src/core/repository",
        "@server/src/core/logger"
      ],
      "exports": [
        "testRepositoryImplementation "
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.9
    },
    {
      "path": "scripts/quality/quality-metrics.ts",
      "domain": "other",
      "layer": "other",
      "size": 14837,
      "lines": 375,
      "complexity": 5,
      "dependencies": [
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types"
      ],
      "exports": [
        "QualityAnalyzer",
        "type QualityReport",
        "type QualityMetrics"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": true,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "HeatEventId"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 2.5
    },
    {
      "path": "scripts/ops/validate-safe-migrations.ts",
      "domain": "other",
      "layer": "other",
      "size": 10489,
      "lines": 335,
      "complexity": 6,
      "dependencies": [
        "fs/promises",
        "path",
        "chalk"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 1.7000000000000002
    },
    {
      "path": "scripts/ops/neon-sync-agent.ts",
      "domain": "other",
      "layer": "other",
      "size": 14447,
      "lines": 382,
      "complexity": 6,
      "dependencies": [
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types"
      ],
      "exports": [
        "NeonSyncAgent "
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": [
          "HeatEventId"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 2.2
    },
    {
      "path": "scripts/migration/identify-numeric-ids.ts",
      "domain": "other",
      "layer": "other",
      "size": 9802,
      "lines": 357,
      "complexity": 4,
      "dependencies": [
        "glob",
        "fs",
        "path"
      ],
      "exports": [
        "detectNumericIds",
        "NUMERIC_ID_PATTERNS",
        "MIGRATION_BATCHES"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "scripts/migration/generated-id-aliases.ts",
      "domain": "other",
      "layer": "other",
      "size": 3138,
      "lines": 77,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "ActiveBadgeId",
        "ActiveFrameId",
        "ActiveTitleId",
        "AdminUserId",
        "AirdropId",
        "AnimationFrameId",
        "BackupId",
        "CategoryId",
        "CoinId",
        "ContentAuthorId",
        "CosmeticId",
        "DbId",
        "EditorId",
        "EmojiPackId",
        "EntityId",
        "EntryId",
        "ExcludeUserId",
        "ExpectedParentId",
        "FindByAuthorId",
        "FindByCategoryId"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "Id"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "scripts/migration/generate-uuid-audit.ts",
      "domain": "other",
      "layer": "other",
      "size": 6190,
      "lines": 139,
      "complexity": 1,
      "dependencies": [
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": [
          "HeatEventId"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.19999999999999996
    },
    {
      "path": "scripts/migration/generate-id-aliases.ts",
      "domain": "other",
      "layer": "other",
      "size": 2320,
      "lines": 79,
      "complexity": 1,
      "dependencies": [
        "@db/types",
        "node:fs",
        "node:path",
        "node:url"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "AdminId"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "scripts/migration/cleanup-old-category-schema.ts",
      "domain": "other",
      "layer": "other",
      "size": 7254,
      "lines": 240,
      "complexity": 3,
      "dependencies": [
        "@db/types",
        "drizzle-orm",
        "chalk"
      ],
      "exports": [
        "runCleanup",
        "validateCleanup"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": [
          "AdminId"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.6000000000000001
    },
    {
      "path": "scripts/migration/analyze-codebase.ts",
      "domain": "other",
      "layer": "other",
      "size": 26782,
      "lines": 834,
      "complexity": 10,
      "dependencies": [
        "glob",
        "fs",
        "path"
      ],
      "exports": [
        "analyzeCodebase",
        "CodebaseAnalysis",
        "DomainAnalysis"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 346,
          "context": "if (pattern === 'id: number' && !context.includes('interface')) confidence -= 0.2;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.7
        }
      ],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": true,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 2.1
    },
    {
      "path": "scripts/seed/seed-all-comprehensive.ts",
      "domain": "other",
      "layer": "other",
      "size": 26934,
      "lines": 672,
      "complexity": 8,
      "dependencies": [
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types"
      ],
      "exports": [
        "UserRow",
        "ForumRow",
        "ThreadPrefixRow",
        "TagRow",
        "PostRow"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 483,
          "context": "const [new_post]: [{ id: number; depth: number; likeCount: number; createdAt: Date }] = await tx.insert(posts).values({",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        }
      ],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": true,
        "hasBrandedIds": true,
        "hasNumericIds": true,
        "hasTypeGuards": true,
        "hasZodValidation": true,
        "typeImports": [
          "HeatEventId"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 1.9000000000000001
    },
    {
      "path": "scripts/seed/dictionary.ts",
      "domain": "other",
      "layer": "other",
      "size": 1489,
      "lines": 42,
      "complexity": 1,
      "dependencies": [
        "@db",
        "@schema",
        "@server/src/utils/slugify"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.19999999999999996
    },
    {
      "path": "scripts/db/verify-neon-connection.ts",
      "domain": "other",
      "layer": "other",
      "size": 2372,
      "lines": 83,
      "complexity": 2,
      "dependencies": [
        "@neondatabase/serverless",
        "ws"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.4
    },
    {
      "path": "scripts/db/seed-ui-config-quotes.ts",
      "domain": "other",
      "layer": "other",
      "size": 21038,
      "lines": 566,
      "complexity": 3,
      "dependencies": [
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types"
      ],
      "exports": [
        "seedUiConfigQuotes "
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": [
          "HeatEventId"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.6000000000000001
    },
    {
      "path": "scripts/db/seed-treasury.ts",
      "domain": "other",
      "layer": "other",
      "size": 2635,
      "lines": 68,
      "complexity": 2,
      "dependencies": [
        "@db",
        "drizzle-orm"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.4
    },
    {
      "path": "scripts/db/seed-promotion-pricing.ts",
      "domain": "other",
      "layer": "other",
      "size": 11219,
      "lines": 422,
      "complexity": 3,
      "dependencies": [
        "@db/types",
        "drizzle-orm"
      ],
      "exports": [
        "seedPromotionPricing "
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": [
          "AdminId"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.6000000000000001
    },
    {
      "path": "scripts/db/seed-chat.ts",
      "domain": "other",
      "layer": "other",
      "size": 2230,
      "lines": 68,
      "complexity": 1,
      "dependencies": [
        "@db",
        "drizzle-orm"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "scripts/db/reset-and-seed.ts",
      "domain": "other",
      "layer": "other",
      "size": 8273,
      "lines": 164,
      "complexity": 2,
      "dependencies": [
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": [
          "HeatEventId"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.4
    },
    {
      "path": "scripts/db/generate-performance-migration.ts",
      "domain": "other",
      "layer": "other",
      "size": 7912,
      "lines": 186,
      "complexity": 1,
      "dependencies": [
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "HeatEventId"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "scripts/db/diff-schema-snapshot.ts",
      "domain": "other",
      "layer": "other",
      "size": 7388,
      "lines": 144,
      "complexity": 2,
      "dependencies": [
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": true,
        "typeImports": [
          "HeatEventId"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.1
    },
    {
      "path": "scripts/db/create-missing-tables.ts",
      "domain": "other",
      "layer": "other",
      "size": 10146,
      "lines": 263,
      "complexity": 5,
      "dependencies": [
        "@db",
        "drizzle-orm"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 1
    },
    {
      "path": "scripts/db/check-reward-tables.ts",
      "domain": "other",
      "layer": "other",
      "size": 2551,
      "lines": 75,
      "complexity": 2,
      "dependencies": [
        "pg",
        "dotenv"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.4
    },
    {
      "path": "scripts/db/check-indices.ts",
      "domain": "other",
      "layer": "other",
      "size": 1670,
      "lines": 68,
      "complexity": 2,
      "dependencies": [
        "@db",
        "drizzle-orm"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.4
    },
    {
      "path": "scripts/db/backfill-configZoneType.ts",
      "domain": "other",
      "layer": "other",
      "size": 11415,
      "lines": 160,
      "complexity": 3,
      "dependencies": [
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types",
        "@db/types"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": true,
        "typeImports": [
          "HeatEventId"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.8
    },
    {
      "path": "scripts/db/apply-migration.ts",
      "domain": "other",
      "layer": "other",
      "size": 2339,
      "lines": 71,
      "complexity": 2,
      "dependencies": [
        "@db/types",
        "pg",
        "dotenv",
        "fs",
        "path"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "AdminId"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.9
    },
    {
      "path": "scripts/db/add-critical-indices.ts",
      "domain": "other",
      "layer": "other",
      "size": 2059,
      "lines": 65,
      "complexity": 2,
      "dependencies": [
        "@db",
        "drizzle-orm"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.9
    },
    {
      "path": "scripts/db/add-color-theme-field.ts",
      "domain": "other",
      "layer": "other",
      "size": 1649,
      "lines": 52,
      "complexity": 2,
      "dependencies": [
        "@db",
        "drizzle-orm"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.9
    },
    {
      "path": "scripts/dev/generate-scope-guide.ts",
      "domain": "other",
      "layer": "other",
      "size": 5996,
      "lines": 180,
      "complexity": 2,
      "dependencies": [
        "@db/types",
        "fs/promises",
        "path",
        "glob",
        "url"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": [
          "AdminId"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.4
    },
    {
      "path": "migrations/archive/canonical-zones-schema-update.ts",
      "domain": "other",
      "layer": "other",
      "size": 3216,
      "lines": 101,
      "complexity": 2,
      "dependencies": [
        "drizzle-orm"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.4
    },
    {
      "path": "lib/emoji/unlockEmojiPack.ts",
      "domain": "other",
      "layer": "other",
      "size": 1069,
      "lines": 43,
      "complexity": 1,
      "dependencies": [
        "@server/src/lib/db",
        "@schema",
        "drizzle-orm"
      ],
      "exports": [],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 6,
          "context": "userId: number;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        }
      ],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 0.30000000000000004
    },
    {
      "path": "db/types/utils.ts",
      "domain": "other",
      "layer": "types",
      "size": 5183,
      "lines": 197,
      "complexity": 6,
      "dependencies": [
        "utility-types"
      ],
      "exports": [
        "isValidUuid",
        "toId",
        "toIdSafe",
        "generateId",
        "validateIds",
        "createIdMapper",
        "isSameId",
        "unwrapId",
        "IdBatch",
        "IdValidators",
        "createMockId",
        "parseIdParam",
        "InvalidIdError",
        "MissingIdError",
        "ID_CONSTANTS"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": true,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": [
          "Brand"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 0.9000000000000001
    },
    {
      "path": "db/types/system.types.ts",
      "domain": "other",
      "layer": "types",
      "size": 521,
      "lines": 26,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "EventLogWithUser",
        "EventLogFilters",
        "EventLogPagination",
        "__ensureModule"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": [
          "EventLog"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 0.1
    },
    {
      "path": "db/types/index.ts",
      "domain": "other",
      "layer": "types",
      "size": 53,
      "lines": 3,
      "complexity": 0,
      "dependencies": [],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 0.5
    },
    {
      "path": "db/types/id.types.ts",
      "domain": "other",
      "layer": "types",
      "size": 3760,
      "lines": 106,
      "complexity": 0,
      "dependencies": [
        "utility-types"
      ],
      "exports": [
        "UserId",
        "ThreadId",
        "PostId",
        "StructureId",
        "WalletId",
        "TransactionId",
        "MissionId",
        "AchievementId",
        "ProductId",
        "BadgeId",
        "TitleId",
        "FrameId",
        "PathId",
        "__ensureModule",
        "Id",
        "AdminId",
        "ReporterId",
        "ReportId",
        "ConversationId",
        "RoomId"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "Brand"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 0.5
    },
    {
      "path": "db/types/emoji.types.ts",
      "domain": "other",
      "layer": "types",
      "size": 176,
      "lines": 7,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "EmojiWithAvailability"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 0.1
    },
    {
      "path": "db/types/brand.types.ts",
      "domain": "other",
      "layer": "types",
      "size": 744,
      "lines": 29,
      "complexity": 0,
      "dependencies": [
        "@/config/brand.config"
      ],
      "exports": [
        "RuntimeBrandConfig",
        "BrandConfigUpdate"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "BrandConfig"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 0.5
    },
    {
      "path": "db/types/announcement.types.ts",
      "domain": "other",
      "layer": "types",
      "size": 256,
      "lines": 15,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "Announcement"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 2,
          "context": "id: number;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        }
      ],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": true,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 2.6
    },
    {
      "path": "db/schema/index.ts",
      "domain": "other",
      "layer": "other",
      "size": 7545,
      "lines": 204,
      "complexity": 1,
      "dependencies": [],
      "exports": [
        "notifications ",
        "notifications as systemNotifications "
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.19999999999999996
    },
    {
      "path": "client/src/main.tsx",
      "domain": "other",
      "layer": "other",
      "size": 1508,
      "lines": 40,
      "complexity": 0,
      "dependencies": [
        "react",
        "react-dom/client",
        "wouter",
        "@/core/constants"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/App.tsx",
      "domain": "other",
      "layer": "other",
      "size": 16722,
      "lines": 551,
      "complexity": 1,
      "dependencies": [
        "react",
        "wouter",
        "@/components/ui/toaster",
        "@/components/header",
        "@/components/auth/protected-route",
        "@/components/dev/dev-role-switcher",
        "@/components/dev/dev-playground-shortcut",
        "@/components/forum/LegacyForumRedirect"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "tests/e2e/helpers/behavior-analyzer.ts",
      "domain": "other",
      "layer": "other",
      "size": 14014,
      "lines": 476,
      "complexity": 5,
      "dependencies": [
        "@playwright/test"
      ],
      "exports": [
        "BehaviorMetrics",
        "ActionEvent",
        "ClickEvent",
        "ConversionEvent",
        "EngagementMetrics",
        "BehaviorAnalyzer"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 1.7
    },
    {
      "path": "tests/e2e/fixtures/test-setup.ts",
      "domain": "other",
      "layer": "other",
      "size": 16345,
      "lines": 568,
      "complexity": 10,
      "dependencies": [
        "@playwright/test"
      ],
      "exports": [
        "TestEnvironment",
        "TestSetupOptions",
        "AuthenticationHelper",
        "DataValidationHelper"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 3.5
    },
    {
      "path": "tests/e2e/cross-domain/data-consistency.spec.ts",
      "domain": "other",
      "layer": "other",
      "size": 18569,
      "lines": 487,
      "complexity": 7,
      "dependencies": [
        "@playwright/test"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 2.1000000000000005
    },
    {
      "path": "shared/types/core/index.ts",
      "domain": "other",
      "layer": "types",
      "size": 2686,
      "lines": 160,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "isUser",
        "isUserProfile",
        "isUserAchievement",
        "isInventoryItem",
        "isUserInventory",
        "isForum",
        "isThread",
        "isPost",
        "isThreadSubscription",
        "isThreadView",
        "isPostReaction",
        "isWallet",
        "isTransaction",
        "isPendingTransaction",
        "isTip",
        "isWithdrawal",
        "toDGTAmount",
        "fromDGTAmount",
        "DGT_DECIMALS",
        "DGT_PRECISION"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 0.5
    },
    {
      "path": "shared/types/config/index.ts",
      "domain": "other",
      "layer": "types",
      "size": 2196,
      "lines": 114,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "XpConfigSchema",
        "XpActionSchema",
        "XpMultiplierSchema",
        "LevelFormulaSchema",
        "LevelMilestoneSchema",
        "validateXpConfig",
        "validatePartialXpConfig",
        "defaultXpConfig",
        "EconomyConfigSchema",
        "CurrencyConfigSchema",
        "FeeConfigSchema",
        "WalletLimitsSchema",
        "DistributionConfigSchema",
        "StakingConfigSchema",
        "ShopPricingSchema",
        "validateEconomyConfig",
        "validatePartialEconomyConfig",
        "FeaturesConfigSchema",
        "FeatureFlagSchema",
        "RolloutStrategySchema"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 0.1
    },
    {
      "path": "shared/types/config/features.schema.ts",
      "domain": "other",
      "layer": "types",
      "size": 9366,
      "lines": 301,
      "complexity": 1,
      "dependencies": [
        "zod"
      ],
      "exports": [
        "RolloutStrategySchema",
        "FeatureFlagSchema",
        "PermissionSchema",
        "RoleSchema",
        "AccessRuleSchema",
        "ForumAccessSchema",
        "FeaturesConfigSchema",
        "FeaturesConfig",
        "FeatureFlag",
        "RolloutStrategy",
        "Permission",
        "Role",
        "AccessRule",
        "ForumAccess",
        "validateFeaturesConfig",
        "validatePartialFeaturesConfig",
        "evaluateFeatureFlag"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": true,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 0.19999999999999996
    },
    {
      "path": "shared/types/config/core-entities.schema.ts",
      "domain": "other",
      "layer": "types",
      "size": 11760,
      "lines": 383,
      "complexity": 2,
      "dependencies": [
        "zod"
      ],
      "exports": [
        "UserSettingsSchema",
        "UserStatsSchema",
        "UserSchema",
        "ForumSettingsSchema",
        "ForumStatsSchema",
        "ForumSchema",
        "ThreadMetadataSchema",
        "ThreadSchema",
        "PostMetadataSchema",
        "PostSchema",
        "WalletFeaturesSchema",
        "WalletLimitsSchema",
        "WalletSchema",
        "TransactionMetadataSchema",
        "TransactionSchema",
        "ItemPriceSchema",
        "ItemRequirementsSchema",
        "ItemMetadataSchema",
        "ItemStockSchema",
        "ShopItemSchema"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": true,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 0.4
    },
    {
      "path": "shared/lib/emoji/unlockEmojiPack.ts",
      "domain": "other",
      "layer": "utils",
      "size": 1129,
      "lines": 44,
      "complexity": 1,
      "dependencies": [
        "@server/src/lib/db",
        "@schema",
        "drizzle-orm",
        "@/db/types"
      ],
      "exports": [],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 7,
          "context": "userId: number;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        }
      ],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": [
          "EmojiPackId",
          "PackId"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 0.30000000000000004
    },
    {
      "path": "shared/fixtures/utilities/test-helpers.ts",
      "domain": "other",
      "layer": "other",
      "size": 12968,
      "lines": 430,
      "complexity": 4,
      "dependencies": [
        "@/db/types"
      ],
      "exports": [
        "TestDataManager",
        "testDataManager",
        "createTestUser",
        "createTestAdmin",
        "createTestWhale",
        "createTestThread",
        "createTestPost",
        "setupQuickScenario",
        "expectValidUser",
        "expectValidThread",
        "expectValidPost"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "threadId: number",
          "line": 260,
          "context": "generateRealisticPosts(threadId: number, userIds: number[], count: number = 10): any[] {",
          "suggestedFix": "ThreadId",
          "confidence": 0.8
        }
      ],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "AdminId"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 2.4
    },
    {
      "path": "shared/fixtures/utilities/scenario-generator.ts",
      "domain": "other",
      "layer": "other",
      "size": 21629,
      "lines": 705,
      "complexity": 4,
      "dependencies": [
        "@/db/types"
      ],
      "exports": [
        "ScenarioConfig",
        "ScenarioResult",
        "ScenarioGenerator",
        "scenarioGenerator",
        "availableScenarios",
        "AvailableScenario"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 553,
          "context": "private generateOnboardingProgression(userId: number): any[] {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "threadId: number",
          "line": 624,
          "context": "private generateMarketReactionData(users: any[], threadId: number): any {",
          "suggestedFix": "ThreadId",
          "confidence": 0.8
        }
      ],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": [
          "AdminId",
          "WhaleId"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 1.7
    },
    {
      "path": "shared/fixtures/core/factory.ts",
      "domain": "other",
      "layer": "other",
      "size": 5241,
      "lines": 215,
      "complexity": 4,
      "dependencies": [
        "@faker-js/faker",
        "@schema"
      ],
      "exports": [
        "FactoryOptions",
        "BuildOptions",
        "FactoryBuilder",
        "RelationshipManager",
        "ScenarioDefinition",
        "ScenarioResult",
        "FactoryRegistry",
        "Factory"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": [
          "User",
          "Thread",
          "Post",
          "ForumCategory",
          "WalletTransaction"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 1.7999999999999998
    },
    {
      "path": "server/src/utils/environment.ts",
      "domain": "other",
      "layer": "utils",
      "size": 1315,
      "lines": 45,
      "complexity": 1,
      "dependencies": [],
      "exports": [
        "isDevMode",
        "isProdMode",
        "shouldBypassAuth",
        "getEnvironment"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.1
    },
    {
      "path": "server/src/utils/db-utils.ts",
      "domain": "other",
      "layer": "utils",
      "size": 2067,
      "lines": 86,
      "complexity": 4,
      "dependencies": [
        "@db",
        "drizzle-orm"
      ],
      "exports": [
        "createDbError"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 2.3
    },
    {
      "path": "server/src/routes/dev.routes.ts",
      "domain": "other",
      "layer": "routes",
      "size": 4335,
      "lines": 177,
      "complexity": 2,
      "dependencies": [
        "express",
        "@server/src/core/cache.service",
        "@server/src/core/logger",
        "@server/src/utils/environment",
        "@server/src/middleware/dev-security.middleware"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 0.10000000000000003
    },
    {
      "path": "server/src/lib/db.ts",
      "domain": "other",
      "layer": "utils",
      "size": 227,
      "lines": 12,
      "complexity": 0,
      "dependencies": [
        "pg",
        "drizzle-orm/node-postgres"
      ],
      "exports": [
        "db"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "server/src/core/storage.service.ts",
      "domain": "other",
      "layer": "other",
      "size": 14252,
      "lines": 353,
      "complexity": 10,
      "dependencies": [
        "@supabase/supabase-js"
      ],
      "exports": [
        "AVATARS_BUCKET",
        "BANNERS_BUCKET",
        "STICKERS_BUCKET",
        "PresignedUploadOptions",
        "PresignedUrlInfo",
        "GetPresignedUploadUrlParams",
        "IStorageService",
        "storageService",
        "storageService"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 2.5
    },
    {
      "path": "server/src/core/rate-limiter.ts",
      "domain": "other",
      "layer": "other",
      "size": 2795,
      "lines": 105,
      "complexity": 2,
      "dependencies": [
        "express",
        "@schema",
        "drizzle-orm"
      ],
      "exports": [
        "rateLimiter",
        "createRateLimiter"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": [
          "Request",
          "Response",
          "NextFunction"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.4
    },
    {
      "path": "server/src/core/logger.ts",
      "domain": "other",
      "layer": "other",
      "size": 5609,
      "lines": 265,
      "complexity": 4,
      "dependencies": [
        "fs",
        "path",
        "fs"
      ],
      "exports": [
        "initLogger",
        "log",
        "debug",
        "info",
        "warn",
        "error",
        "critical",
        "logger"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 2.3
    },
    {
      "path": "server/src/core/errors.ts",
      "domain": "other",
      "layer": "other",
      "size": 10400,
      "lines": 375,
      "complexity": 7,
      "dependencies": [
        "express"
      ],
      "exports": [
        "ErrorContext",
        "ErrorResponse",
        "AppError",
        "BadRequestError",
        "UnauthorizedError",
        "ForbiddenError",
        "NotFoundError",
        "ConflictError",
        "ValidationError",
        "RateLimitError",
        "InsufficientPermissionsError",
        "BusinessRuleViolationError",
        "DatabaseError",
        "WalletError",
        "InsufficientFundsError",
        "createErrorContext",
        "asyncHandler",
        "globalErrorHandler",
        "ErrorFactory"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": true,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "Request",
          "Response",
          "NextFunction"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 2.9000000000000004
    },
    {
      "path": "server/src/core/db.ts",
      "domain": "other",
      "layer": "other",
      "size": 1824,
      "lines": 60,
      "complexity": 2,
      "dependencies": [
        "@neondatabase/serverless",
        "drizzle-orm/neon-serverless",
        "ws",
        "@schema"
      ],
      "exports": [
        "db",
        "pool",
        "withRetry"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.4
    },
    {
      "path": "server/src/core/database.ts",
      "domain": "other",
      "layer": "other",
      "size": 291,
      "lines": 6,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "db "
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "server/src/core/config.service.ts",
      "domain": "other",
      "layer": "other",
      "size": 879,
      "lines": 29,
      "complexity": 1,
      "dependencies": [],
      "exports": [
        "getConfigValue",
        "mergeConfig"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": true,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.7
    },
    {
      "path": "server/src/core/base-controller.ts",
      "domain": "other",
      "layer": "other",
      "size": 2603,
      "lines": 110,
      "complexity": 1,
      "dependencies": [
        "express"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": [
          "Response"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.8999999999999999
    },
    {
      "path": "server/src/core/background-processor.ts",
      "domain": "other",
      "layer": "other",
      "size": 4542,
      "lines": 167,
      "complexity": 2,
      "dependencies": [
        "@db",
        "drizzle-orm",
        "@schema",
        "@schema"
      ],
      "exports": [
        "BackgroundProcessor",
        "backgroundProcessor"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": [
          "AchievementEventType"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.4
    },
    {
      "path": "scripts/db/utils/seedUtils.ts",
      "domain": "other",
      "layer": "utils",
      "size": 1763,
      "lines": 43,
      "complexity": 2,
      "dependencies": [
        "@db/types",
        "drizzle-orm/pg-core"
      ],
      "exports": [
        "logSeed",
        "slugify"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "AdminId"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 1.9
    },
    {
      "path": "scripts/db/utils/schema.ts",
      "domain": "other",
      "layer": "utils",
      "size": 25,
      "lines": 1,
      "complexity": 0,
      "dependencies": [],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.1
    },
    {
      "path": "db/schema/system/referralSources.ts",
      "domain": "other",
      "layer": "other",
      "size": 923,
      "lines": 37,
      "complexity": 0,
      "dependencies": [
        "drizzle-orm"
      ],
      "exports": [
        "referralSources",
        "ReferralSource"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "db/schema/system/rateLimits.ts",
      "domain": "other",
      "layer": "other",
      "size": 950,
      "lines": 20,
      "complexity": 1,
      "dependencies": [
        "drizzle-orm/pg-core",
        "drizzle-orm"
      ],
      "exports": [
        "rateLimits",
        "RateLimit"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.19999999999999996
    },
    {
      "path": "db/schema/system/event_logs.ts",
      "domain": "other",
      "layer": "other",
      "size": 1453,
      "lines": 46,
      "complexity": 0,
      "dependencies": [
        "drizzle-orm/pg-core",
        "drizzle-orm"
      ],
      "exports": [
        "eventTypeEnum",
        "eventLogs",
        "EventLog",
        "InsertEventLog"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "db/schema/system/cooldownState.ts",
      "domain": "other",
      "layer": "other",
      "size": 684,
      "lines": 21,
      "complexity": 0,
      "dependencies": [
        "drizzle-orm/pg-core",
        "drizzle-orm"
      ],
      "exports": [
        "cooldownState",
        "CooldownState"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "db/schema/system/analyticsEvents.ts",
      "domain": "other",
      "layer": "other",
      "size": 1267,
      "lines": 38,
      "complexity": 0,
      "dependencies": [
        "drizzle-orm"
      ],
      "exports": [
        "analyticsEvents",
        "AnalyticsEvent"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.1
    },
    {
      "path": "db/schema/system/activityFeed.ts",
      "domain": "other",
      "layer": "other",
      "size": 969,
      "lines": 29,
      "complexity": 0,
      "dependencies": [
        "drizzle-orm"
      ],
      "exports": [
        "activityFeed",
        "ActivityFeedItem"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.1
    },
    {
      "path": "db/schema/migrations/performance-indices.ts",
      "domain": "other",
      "layer": "other",
      "size": 5516,
      "lines": 171,
      "complexity": 2,
      "dependencies": [
        "drizzle-orm",
        "drizzle-orm/pg-core"
      ],
      "exports": [
        "performanceIndicesMigration",
        "performanceIndicesMetadata"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.4
    },
    {
      "path": "db/schema/messaging/conversations.ts",
      "domain": "other",
      "layer": "other",
      "size": 1450,
      "lines": 37,
      "complexity": 0,
      "dependencies": [
        "drizzle-orm/pg-core",
        "drizzle-orm",
        "drizzle-zod"
      ],
      "exports": [
        "conversations",
        "Conversation",
        "insertConversationSchema",
        "InsertConversation"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.1
    },
    {
      "path": "db/schema/messaging/conversationParticipants.ts",
      "domain": "other",
      "layer": "other",
      "size": 1410,
      "lines": 47,
      "complexity": 0,
      "dependencies": [
        "drizzle-orm"
      ],
      "exports": [
        "conversationParticipants",
        "ConversationParticipant"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.1
    },
    {
      "path": "db/schema/messaging/chatRooms.ts",
      "domain": "other",
      "layer": "other",
      "size": 1763,
      "lines": 58,
      "complexity": 0,
      "dependencies": [
        "drizzle-orm",
        "drizzle-zod",
        "zod"
      ],
      "exports": [
        "chatRooms",
        "insertChatRoomSchema",
        "ChatRoom",
        "InsertChatRoom"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.1
    },
    {
      "path": "db/schema/gamification/platformStats.ts",
      "domain": "other",
      "layer": "other",
      "size": 709,
      "lines": 15,
      "complexity": 1,
      "dependencies": [
        "drizzle-orm/pg-core",
        "drizzle-orm"
      ],
      "exports": [
        "platformStatistics",
        "PlatformStatistic"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.19999999999999996
    },
    {
      "path": "db/schema/dictionary/upvotes.ts",
      "domain": "other",
      "layer": "other",
      "size": 865,
      "lines": 27,
      "complexity": 0,
      "dependencies": [
        "drizzle-orm/pg-core",
        "drizzle-orm"
      ],
      "exports": [
        "dictionaryUpvotes",
        "DictionaryUpvote",
        "NewDictionaryUpvote"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "db/schema/dictionary/entries.ts",
      "domain": "other",
      "layer": "other",
      "size": 1882,
      "lines": 55,
      "complexity": 0,
      "dependencies": [
        "drizzle-orm/pg-core",
        "drizzle-orm",
        "drizzle-zod",
        "zod"
      ],
      "exports": [
        "dictionaryEntries",
        "insertDictionaryEntrySchema",
        "DictionaryEntry",
        "NewDictionaryEntry"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.1
    },
    {
      "path": "db/schema/core/enums.ts",
      "domain": "other",
      "layer": "other",
      "size": 2099,
      "lines": 94,
      "complexity": 0,
      "dependencies": [
        "drizzle-orm/pg-core"
      ],
      "exports": [
        "shoutboxPositionEnum",
        "ticketStatusEnum",
        "transactionStatusEnum",
        "notificationTypeEnum",
        "reactionTypeEnum",
        "transactionTypeEnum",
        "withdrawalStatusEnum",
        "vaultStatusEnum",
        "contentEditStatusEnum",
        "contentVisibilityStatusEnum",
        "mentionSourceTypeEnum",
        "subscriptionTypeEnum",
        "subscriptionStatusEnum",
        "cosmeticTypeEnum",
        "userRoleEnum "
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/utils/spacing-constants.ts",
      "domain": "other",
      "layer": "utils",
      "size": 1456,
      "lines": 60,
      "complexity": 1,
      "dependencies": [],
      "exports": [
        "FORUM_SPACING",
        "FORUM_LAYOUTS",
        "getForumSpacing",
        "getForumLayout"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/utils/card-constants.ts",
      "domain": "other",
      "layer": "utils",
      "size": 2996,
      "lines": 100,
      "complexity": 1,
      "dependencies": [],
      "exports": [
        "CARD_STYLES",
        "CARD_VARIANTS",
        "getCardStyle",
        "createCardStyle"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/utils/avatar.ts",
      "domain": "other",
      "layer": "utils",
      "size": 750,
      "lines": 30,
      "complexity": 1,
      "dependencies": [
        "blueimp-md5"
      ],
      "exports": [
        "getAvatarUrl"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/utils/adaptiveSpacing.ts",
      "domain": "other",
      "layer": "utils",
      "size": 5896,
      "lines": 191,
      "complexity": 1,
      "dependencies": [
        "clsx"
      ],
      "exports": [
        "SpacingSize",
        "ContentDensity",
        "getAdaptiveSpacing",
        "getAdaptivePadding",
        "getAdaptiveTypography",
        "getTouchTargetSize",
        "combineResponsiveClasses",
        "AdaptiveSpacingResult",
        "getAdaptiveConfig"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/types/preferences.types.ts",
      "domain": "other",
      "layer": "types",
      "size": 85,
      "lines": 2,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "PreferenceSection"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/types/gamification.types.ts",
      "domain": "other",
      "layer": "types",
      "size": 5942,
      "lines": 252,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "Achievement",
        "AchievementRequirement",
        "AchievementReward",
        "UserAchievement",
        "AchievementProgress",
        "XPAction",
        "XPCondition",
        "XPLog",
        "UserLevel",
        "LevelUnlocks",
        "Mission",
        "MissionObjective",
        "MissionProgress",
        "ObjectiveProgress",
        "MissionReward",
        "LeaderboardEntry",
        "Leaderboard",
        "GamificationOverview",
        "UserGamificationStats",
        "AchievementListResponse"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 88,
          "context": "id: number;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        }
      ],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": true,
        "hasBrandedIds": false,
        "hasNumericIds": true,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "StandardApiResponse"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 2.6
    },
    {
      "path": "client/src/types/core.types.ts",
      "domain": "other",
      "layer": "types",
      "size": 2483,
      "lines": 137,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "ApiErrorResponse",
        "ApiErrorData",
        "TimingMetadata",
        "StandardApiResponse",
        "TestUser",
        "MockComponentProps",
        "UnknownApiData",
        "UnknownEventData",
        "UploadedFile",
        "FormValidationError",
        "SelectOption",
        "PaginationParams",
        "PaginatedResponse",
        "SearchParams",
        "DateRange",
        "EntityReference"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": true,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/types/canonical.types.ts",
      "domain": "other",
      "layer": "types",
      "size": 9704,
      "lines": 458,
      "complexity": 1,
      "dependencies": [
        "@db/types"
      ],
      "exports": [
        "CanonicalZone",
        "CanonicalForum",
        "CanonicalSubforum",
        "CanonicalThread",
        "CanonicalPost",
        "CanonicalUser",
        "CanonicalTag",
        "StandardApiResponse",
        "PaginatedResponse",
        "CanonicalThreadSearchParams",
        "CanonicalThreadCreateParams",
        "CanonicalPostCreateParams",
        "ForumStructureContext",
        "NavigationBreadcrumb",
        "ForumThemeContext",
        "MergedZone",
        "MergedForum",
        "ThreadWithUser",
        "ThreadWithUserAndCategory",
        "PostWithUser"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 23,
          "context": "id: number;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 60,
          "context": "id: number;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 110,
          "context": "id: number;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 149,
          "context": "id: number;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 178,
          "context": "id: number;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 206,
          "context": "id: number;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 275,
          "context": "id: number;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 400,
          "context": "getStructureById: (id: number) => CanonicalForum | CanonicalSubforum | undefined;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "threadId: number",
          "line": 208,
          "context": "threadId: number;",
          "suggestedFix": "ThreadId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "threadId: number",
          "line": 378,
          "context": "threadId: number;",
          "suggestedFix": "ThreadId",
          "confidence": 0.8
        }
      ],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": true,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "ForumId",
          "ParentZoneId",
          "ZoneId"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 2.7
    },
    {
      "path": "db/schema/advertising/targeting.ts",
      "domain": "other",
      "layer": "other",
      "size": 1465,
      "lines": 40,
      "complexity": 0,
      "dependencies": [
        "drizzle-orm/pg-core",
        "drizzle-orm"
      ],
      "exports": [
        "campaignRules",
        "CampaignRule",
        "InsertCampaignRule"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "db/schema/advertising/placements.ts",
      "domain": "other",
      "layer": "other",
      "size": 2527,
      "lines": 88,
      "complexity": 0,
      "dependencies": [
        "drizzle-orm"
      ],
      "exports": [
        "placementPositionEnum",
        "adFormatEnum",
        "adPlacements",
        "AdPlacement",
        "InsertAdPlacement"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "db/schema/advertising/performance.ts",
      "domain": "other",
      "layer": "other",
      "size": 4596,
      "lines": 146,
      "complexity": 0,
      "dependencies": [
        "drizzle-orm"
      ],
      "exports": [
        "interactionTypeEnum",
        "adImpressions",
        "campaignMetrics",
        "AdImpression",
        "InsertAdImpression",
        "CampaignMetrics"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "db/schema/advertising/campaigns.ts",
      "domain": "other",
      "layer": "other",
      "size": 2541,
      "lines": 95,
      "complexity": 0,
      "dependencies": [
        "drizzle-orm"
      ],
      "exports": [
        "campaignStatusEnum",
        "paymentMethodEnum",
        "campaignTypeEnum",
        "campaigns",
        "Campaign",
        "InsertCampaign"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/stores/usePlaygroundControls.ts",
      "domain": "other",
      "layer": "other",
      "size": 894,
      "lines": 25,
      "complexity": 0,
      "dependencies": [
        "zustand"
      ],
      "exports": [
        "usePlaygroundControls"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.5
    },
    {
      "path": "client/src/stores/useLayoutStore.ts",
      "domain": "other",
      "layer": "other",
      "size": 5939,
      "lines": 186,
      "complexity": 1,
      "dependencies": [
        "zustand",
        "zustand/middleware",
        "immer"
      ],
      "exports": [
        "SlotId",
        "LayoutComponentInstance",
        "LayoutStateV1",
        "LayoutStoreState",
        "useLayoutStore"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/services/error.service.ts",
      "domain": "other",
      "layer": "services",
      "size": 8287,
      "lines": 352,
      "complexity": 5,
      "dependencies": [
        "sonner"
      ],
      "exports": [
        "ErrorSeverity",
        "ErrorCategory",
        "AppError",
        "ErrorHandler",
        "errorService",
        "useErrorHandler"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": true,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 2.5
    },
    {
      "path": "client/src/schemas/uiQuotes.schema.ts",
      "domain": "other",
      "layer": "other",
      "size": 447,
      "lines": 15,
      "complexity": 0,
      "dependencies": [
        "zod"
      ],
      "exports": [
        "quoteSchema",
        "uiQuotesSchema",
        "UIQuote",
        "UIQuotes"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.1
    },
    {
      "path": "client/src/schemas/featureFlags.schema.ts",
      "domain": "other",
      "layer": "other",
      "size": 388,
      "lines": 13,
      "complexity": 0,
      "dependencies": [
        "zod"
      ],
      "exports": [
        "featureFlagSchema",
        "featureFlagsSchema",
        "FeatureFlag",
        "FeatureFlags"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.1
    },
    {
      "path": "client/src/schemas/brand.schema.ts",
      "domain": "other",
      "layer": "other",
      "size": 216,
      "lines": 6,
      "complexity": 0,
      "dependencies": [
        "zod"
      ],
      "exports": [
        "brandSchema",
        "BrandConfig"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1
    },
    {
      "path": "client/src/schemas/assertValid.ts",
      "domain": "other",
      "layer": "other",
      "size": 330,
      "lines": 12,
      "complexity": 1,
      "dependencies": [
        "zod"
      ],
      "exports": [
        "assertValid"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": true,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.19999999999999996
    },
    {
      "path": "client/src/providers/root-provider.tsx",
      "domain": "other",
      "layer": "other",
      "size": 2394,
      "lines": 64,
      "complexity": 1,
      "dependencies": [
        "react",
        "@tanstack/react-query",
        "@/hooks/use-auth",
        "@/hooks/use-purchase-modal",
        "@/contexts/shoutbox-context",
        "@/contexts/ForumStructureContext",
        "@/contexts/ForumThemeProvider",
        "@/components/ui/tooltip",
        "@/contexts/ProfileCardContext",
        "@/contexts/MotionContext",
        "@/lib/queryClient",
        "@/contexts/ForumOrderingContext"
      ],
      "exports": [
        "RootProvider"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/providers/app-provider.tsx",
      "domain": "other",
      "layer": "other",
      "size": 668,
      "lines": 21,
      "complexity": 1,
      "dependencies": [
        "react",
        "@tanstack/react-query",
        "next-themes",
        "@/contexts/XpToastContext",
        "@/contexts/LevelUpContext"
      ],
      "exports": [
        "AppProviders"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/pages/whispers.tsx",
      "domain": "other",
      "layer": "pages",
      "size": 3858,
      "lines": 120,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/components/messages/WhispersInbox",
        "@/components/messages/WhisperButton",
        "@/hooks/use-messages",
        "@/components/ui/card",
        "@/components/ui/badge",
        "@/components/messages/icons/MessageSquareWave"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.7
    },
    {
      "path": "client/src/pages/ui-playground.tsx",
      "domain": "other",
      "layer": "pages",
      "size": 3266,
      "lines": 101,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/pages/dev",
        "@/pages/not-found",
        "@/layout/primitives",
        "@/pages/ui-playground/sections/ButtonsSection",
        "@/pages/ui-playground/sections/CardsSection",
        "@/pages/ui-playground/sections/ColorsSection",
        "@/pages/ui-playground/sections/AvatarBadgesSection",
        "@/pages/ui-playground/sections/AnimationsSection",
        "@/pages/ui-playground/sections/FontsSection"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.7
    },
    {
      "path": "client/src/pages/progress.tsx",
      "domain": "other",
      "layer": "pages",
      "size": 8736,
      "lines": 275,
      "complexity": 1,
      "dependencies": [
        "react",
        "react-helmet",
        "@/lib/utils",
        "@/components/ui/button",
        "@/components/ui/tabs",
        "@/components/ui/alert",
        "@/hooks/use-gamification",
        "lucide-react",
        "framer-motion",
        "@/hooks/use-auth",
        "@/features/gamification/services/gamification-api.service"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.7
    },
    {
      "path": "client/src/pages/not-found.tsx",
      "domain": "other",
      "layer": "pages",
      "size": 1569,
      "lines": 46,
      "complexity": 1,
      "dependencies": [
        "wouter",
        "lucide-react",
        "@/components/ui/button",
        "@/components/header"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/pages/home.tsx",
      "domain": "other",
      "layer": "pages",
      "size": 4020,
      "lines": 117,
      "complexity": 1,
      "dependencies": [
        "@/contexts/ForumStructureContext",
        "@/contexts/ForumStructureContext",
        "@/components/layout/hero-section",
        "@/components/layout/announcement-ticker",
        "@/components/footer",
        "@/components/layout/ResponsiveLayoutWrapper",
        "@/components/zone/PrimaryZoneCarousel",
        "@/layout/primitives/Wide",
        "@/components/ui/content-area",
        "@/contexts/content-feed-context",
        "@/utils/spacing-constants",
        "@/features/users/hooks",
        "@/hooks/useZoneStats",
        "@/utils/forumStats",
        "@/components/skeletons/HomePageSkeleton",
        "@/components/forum/ZoneCard",
        "@/components/forum/ForumErrorBoundary"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": [
          "MergedZone"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.19999999999999996
    },
    {
      "path": "client/src/pages/fixtures-dashboard.tsx",
      "domain": "other",
      "layer": "pages",
      "size": 11005,
      "lines": 370,
      "complexity": 1,
      "dependencies": [
        "react",
        "react",
        "@/components/ui/card",
        "@/components/ui/button",
        "@/components/ui/input",
        "@/components/ui/badge",
        "@/components/ui/tabs",
        "@/components/fixtures/fixture-builder",
        "@/components/fixtures/fixture-preview",
        "sonner"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.7
    },
    {
      "path": "client/src/pages/degen-index.tsx",
      "domain": "other",
      "layer": "pages",
      "size": 14818,
      "lines": 548,
      "complexity": 2,
      "dependencies": [
        "react",
        "react",
        "@tanstack/react-query",
        "@/components/ui/loader",
        "@/components/ui/error-display",
        "@/components/ui/input",
        "@/components/ui/button",
        "@/components/ui/card",
        "lucide-react",
        "@/components/users/UserDirectoryTable",
        "@/components/users/UserFilters",
        "framer-motion"
      ],
      "exports": [
        "DegenUser"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 15,
          "context": "id: number;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        }
      ],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": true,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 4
    },
    {
      "path": "client/src/pages/RouteProtectionDemo.tsx",
      "domain": "other",
      "layer": "pages",
      "size": 6853,
      "lines": 230,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/hooks/use-auth",
        "@/components/ui/card",
        "@/components/ui/button",
        "@/components/ui/badge",
        "@/lib/roles",
        "@/lib/roles"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "Role"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 1.7
    },
    {
      "path": "client/src/lib/utils.ts",
      "domain": "other",
      "layer": "utils",
      "size": 3439,
      "lines": 125,
      "complexity": 4,
      "dependencies": [
        "clsx",
        "tailwind-merge"
      ],
      "exports": [
        "cn",
        "formatNumber",
        "formatCurrency",
        "formatRelativeTime",
        "getInitials",
        "isLightColor",
        "formatDate"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/lib/safeWebSocket.ts",
      "domain": "other",
      "layer": "utils",
      "size": 4166,
      "lines": 156,
      "complexity": 4,
      "dependencies": [
        "@/constants/env",
        "@/constants/websocket-disabled"
      ],
      "exports": [
        "WebSocketMessage",
        "SafeWebSocketOptions",
        "createSafeWebSocket",
        "safeSendMessage",
        "safeCloseWebSocket"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 2.3
    },
    {
      "path": "client/src/lib/routeConfig.ts",
      "domain": "other",
      "layer": "utils",
      "size": 4172,
      "lines": 229,
      "complexity": 2,
      "dependencies": [],
      "exports": [
        "RouteConfig",
        "routeConfig",
        "findRouteConfig",
        "getRouteProtection"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "Role"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.9
    },
    {
      "path": "client/src/lib/queryClient.ts",
      "domain": "other",
      "layer": "utils",
      "size": 4095,
      "lines": 153,
      "complexity": 4,
      "dependencies": [
        "@tanstack/react-query"
      ],
      "exports": [
        "apiRequest",
        "getQueryFn",
        "setupXpGainListener",
        "setupLevelUpListener",
        "apiPost",
        "apiPut",
        "apiPatch",
        "apiDelete",
        "queryClient "
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "QueryFunction"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 2.3
    },
    {
      "path": "client/src/lib/formatters.ts",
      "domain": "other",
      "layer": "utils",
      "size": 3266,
      "lines": 117,
      "complexity": 3,
      "dependencies": [],
      "exports": [
        "formatCurrency",
        "formatNumber",
        "truncateText",
        "formatAddress",
        "formatDate",
        "formatForumDate",
        "formatThreadTimestamp",
        "formatTimeAgo",
        "formatTimestamp",
        "formatTime"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.3000000000000001
    },
    {
      "path": "client/src/lib/format-date.ts",
      "domain": "other",
      "layer": "utils",
      "size": 3067,
      "lines": 117,
      "complexity": 3,
      "dependencies": [
        "date-fns"
      ],
      "exports": [
        "formatDate",
        "formatForumDate",
        "formatThreadTimestamp",
        "formatTimeAgo",
        "formatTimestamp",
        "formatTime"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.3000000000000001
    },
    {
      "path": "client/src/lib/api.ts",
      "domain": "other",
      "layer": "utils",
      "size": 210,
      "lines": 9,
      "complexity": 1,
      "dependencies": [],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/lib/api-response.ts",
      "domain": "other",
      "layer": "utils",
      "size": 5778,
      "lines": 240,
      "complexity": 6,
      "dependencies": [
        "@/types/canonical.types"
      ],
      "exports": [
        "isStandardApiResponse",
        "extractApiData",
        "createStandardResponse",
        "createErrorResponse",
        "createPaginatedResponse",
        "createQueryFn",
        "transformLegacyResponse",
        "withTiming"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": [
          "StandardApiResponse",
          "PaginatedResponse"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 1.9000000000000001
    },
    {
      "path": "client/src/lib/api-request.ts",
      "domain": "other",
      "layer": "utils",
      "size": 3988,
      "lines": 162,
      "complexity": 5,
      "dependencies": [],
      "exports": [
        "ApiError",
        "ApiRequestConfig"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 2.5
    },
    {
      "path": "client/src/styles/cssVariables.ts",
      "domain": "other",
      "layer": "other",
      "size": 1671,
      "lines": 56,
      "complexity": 1,
      "dependencies": [],
      "exports": [
        "setZoneAccentVariables",
        "getZoneAccent",
        "hexToRgb"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/hooks/widgetData.ts",
      "domain": "other",
      "layer": "hooks",
      "size": 295,
      "lines": 6,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "createWidgetQueryKey"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": true,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/hooks/useZoneStats.ts",
      "domain": "other",
      "layer": "hooks",
      "size": 1290,
      "lines": 57,
      "complexity": 1,
      "dependencies": [
        "@tanstack/react-query",
        "@/lib/queryClient"
      ],
      "exports": [
        "ZoneStats",
        "useZoneStatsMap"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/hooks/useShowHotRibbon.ts",
      "domain": "other",
      "layer": "hooks",
      "size": 285,
      "lines": 10,
      "complexity": 0,
      "dependencies": [
        "@/config/featureFlags"
      ],
      "exports": [
        "useShowHotRibbon"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/hooks/useSearchParams.ts",
      "domain": "other",
      "layer": "hooks",
      "size": 678,
      "lines": 22,
      "complexity": 1,
      "dependencies": [
        "wouter",
        "react"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/hooks/useMediaQuery.ts",
      "domain": "other",
      "layer": "hooks",
      "size": 1941,
      "lines": 82,
      "complexity": 1,
      "dependencies": [
        "react"
      ],
      "exports": [
        "useMediaQuery",
        "useMobileDetector",
        "useBreakpoint"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/hooks/useJsonConfig.ts",
      "domain": "other",
      "layer": "hooks",
      "size": 1944,
      "lines": 71,
      "complexity": 2,
      "dependencies": [
        "react",
        "zod",
        "@/lib/api-request",
        "@/hooks/use-toast"
      ],
      "exports": [
        "UseJsonConfigReturn",
        "useJsonConfig"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": true,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.4
    },
    {
      "path": "client/src/hooks/useIdentityDisplay.ts",
      "domain": "other",
      "layer": "hooks",
      "size": 1387,
      "lines": 49,
      "complexity": 1,
      "dependencies": [
        "@/hooks/useUserCosmetics",
        "@/hooks/useUserXP"
      ],
      "exports": [
        "IdentityDisplay",
        "useIdentityDisplay"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 7,
          "context": "roles?: Array<{ id: number; name: string; hexColor?: string | null }>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "conversion",
          "pattern": "parseInt(user.id)",
          "line": 34,
          "context": "const { data: xpData } = useUserXP(typeof user?.id === 'string' ? parseInt(user.id) : user?.id);",
          "suggestedFix": "remove parseInt, use branded type",
          "confidence": 0.7
        }
      ],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": true,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 2.9
    },
    {
      "path": "client/src/hooks/useFollowing.ts",
      "domain": "other",
      "layer": "hooks",
      "size": 1068,
      "lines": 44,
      "complexity": 1,
      "dependencies": [
        "@tanstack/react-query",
        "@/lib/queryClient"
      ],
      "exports": [
        "FollowUser",
        "useFollowing"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/hooks/useFeatureGates.ts",
      "domain": "other",
      "layer": "hooks",
      "size": 3683,
      "lines": 155,
      "complexity": 2,
      "dependencies": [
        "@tanstack/react-query",
        "@/lib/queryClient",
        "@/hooks/use-auth"
      ],
      "exports": [
        "FeatureGate",
        "UserFeatureAccess",
        "useFeatureGates",
        "useFeatureAccess"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.10000000000000003
    },
    {
      "path": "client/src/hooks/useDailyTasks.ts",
      "domain": "other",
      "layer": "hooks",
      "size": 1641,
      "lines": 58,
      "complexity": 1,
      "dependencies": [
        "react"
      ],
      "exports": [
        "DailyTaskStatus",
        "DailyTask",
        "DailyTasksStats",
        "useDailyTasks"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/hooks/useCrudMutation.ts",
      "domain": "other",
      "layer": "hooks",
      "size": 2467,
      "lines": 86,
      "complexity": 1,
      "dependencies": [
        "@tanstack/react-query",
        "@tanstack/react-query",
        "@/hooks/use-toast"
      ],
      "exports": [
        "useCrudMutation"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": true,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": [
          "QueryKey"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.1
    },
    {
      "path": "client/src/hooks/useConfig.ts",
      "domain": "other",
      "layer": "hooks",
      "size": 113,
      "lines": 6,
      "complexity": 0,
      "dependencies": [
        "@/config/publicConfig"
      ],
      "exports": [
        "useConfig"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/hooks/use-toast.ts",
      "domain": "other",
      "layer": "hooks",
      "size": 675,
      "lines": 29,
      "complexity": 1,
      "dependencies": [
        "react"
      ],
      "exports": [
        "useToast"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/hooks/use-mobile.tsx",
      "domain": "other",
      "layer": "hooks",
      "size": 557,
      "lines": 20,
      "complexity": 1,
      "dependencies": [
        "react"
      ],
      "exports": [
        "useIsMobile"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/hooks/use-media-query.ts",
      "domain": "other",
      "layer": "hooks",
      "size": 460,
      "lines": 8,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "useMediaQuery",
        "useBreakpoint",
        "useMobileDetector"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/hooks/use-local-storage.ts",
      "domain": "other",
      "layer": "hooks",
      "size": 2229,
      "lines": 78,
      "complexity": 3,
      "dependencies": [
        "react"
      ],
      "exports": [
        "useLocalStorage"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.1
    },
    {
      "path": "client/src/hooks/use-gamification.tsx",
      "domain": "other",
      "layer": "hooks",
      "size": 6280,
      "lines": 197,
      "complexity": 2,
      "dependencies": [
        "@tanstack/react-query",
        "@/features/gamification/services/gamification-api.service",
        "@/hooks/use-auth",
        "@/hooks/use-toast"
      ],
      "exports": [
        "useGamification"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.9
    },
    {
      "path": "client/src/hooks/use-draft.ts",
      "domain": "other",
      "layer": "hooks",
      "size": 5081,
      "lines": 202,
      "complexity": 4,
      "dependencies": [
        "react",
        "@tanstack/react-query",
        "@/lib/queryClient",
        "@db/types"
      ],
      "exports": [
        "useDraft"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "CategoryId",
          "PrefixId"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 2.3
    },
    {
      "path": "client/src/hooks/use-debounce.ts",
      "domain": "other",
      "layer": "hooks",
      "size": 670,
      "lines": 26,
      "complexity": 1,
      "dependencies": [
        "react"
      ],
      "exports": [
        "useDebounce"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/hooks/use-content.ts",
      "domain": "other",
      "layer": "hooks",
      "size": 2430,
      "lines": 102,
      "complexity": 2,
      "dependencies": [
        "@tanstack/react-query",
        "react",
        "@/types/thread.types",
        "@db/types"
      ],
      "exports": [
        "ContentTab",
        "ContentItem",
        "ContentResponse",
        "UseContentParams",
        "useContent",
        "useHomeContent",
        "useForumContent"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "ThreadDisplay"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 1.9
    },
    {
      "path": "client/src/hooks/use-async-button.tsx",
      "domain": "other",
      "layer": "hooks",
      "size": 1209,
      "lines": 45,
      "complexity": 2,
      "dependencies": [
        "react"
      ],
      "exports": [
        "AsyncCallback",
        "useAsyncButton"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.9
    },
    {
      "path": "client/src/hooks/index.ts",
      "domain": "other",
      "layer": "hooks",
      "size": 762,
      "lines": 23,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "useAuth ",
        "useAuthRequired ",
        "useToast ",
        "useMessages ",
        "useInfiniteScroll ",
        "useWebSocketStatus ",
        "useRainNotifications ",
        "useDgtPurchase ",
        "useImageUpload ",
        "useAvatarUpload ",
        "useMediaQuery",
        "useBreakpoint",
        "useMobileDetector"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/core/router.tsx",
      "domain": "other",
      "layer": "other",
      "size": 528,
      "lines": 18,
      "complexity": 0,
      "dependencies": [
        "@/constants/routes"
      ],
      "exports": [
        "ROUTES"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/core/queryClient.ts",
      "domain": "other",
      "layer": "other",
      "size": 2308,
      "lines": 91,
      "complexity": 2,
      "dependencies": [
        "@tanstack/react-query"
      ],
      "exports": [
        "getQueryFn",
        "queryClient"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": true,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.9
    },
    {
      "path": "client/src/core/constants.ts",
      "domain": "other",
      "layer": "other",
      "size": 1038,
      "lines": 32,
      "complexity": 1,
      "dependencies": [],
      "exports": [
        "IS_PRODUCTION",
        "IS_DEVELOPMENT",
        "BASE_URL",
        "API_BASE_URL",
        "MODE",
        "DEFAULT_PAGE_SIZE"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/core/api.ts",
      "domain": "other",
      "layer": "other",
      "size": 7549,
      "lines": 312,
      "complexity": 6,
      "dependencies": [
        "@/hooks/use-shop-items",
        "@/hooks/use-vault-items",
        "@/types/notifications",
        "@db/types"
      ],
      "exports": [
        "CryptoBalance",
        "WalletBalance",
        "DgtPurchaseOrder",
        "api"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 224,
          "context": "recipients: { id: number; username: string }[];",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        }
      ],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": true,
        "hasBrandedIds": true,
        "hasNumericIds": true,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": [
          "ShopItem"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 2.0000000000000004
    },
    {
      "path": "client/src/test/setup.ts",
      "domain": "other",
      "layer": "other",
      "size": 2644,
      "lines": 87,
      "complexity": 3,
      "dependencies": [
        "vitest",
        "react"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 2.1
    },
    {
      "path": "client/src/constants/websocket-disabled.ts",
      "domain": "other",
      "layer": "other",
      "size": 533,
      "lines": 15,
      "complexity": 1,
      "dependencies": [],
      "exports": [
        "WEBSOCKET_DISABLED"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.7
    },
    {
      "path": "client/src/constants/routes.ts",
      "domain": "other",
      "layer": "other",
      "size": 1948,
      "lines": 46,
      "complexity": 0,
      "dependencies": [
        "@/constants/routes"
      ],
      "exports": [
        "ROUTES"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/constants/env.ts",
      "domain": "other",
      "layer": "other",
      "size": 839,
      "lines": 25,
      "complexity": 1,
      "dependencies": [],
      "exports": [
        "IS_PRODUCTION",
        "IS_DEVELOPMENT",
        "BASE_URL",
        "MODE"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/constants/apiRoutes.ts",
      "domain": "other",
      "layer": "other",
      "size": 211,
      "lines": 10,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "API_ROUTES"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 4,
          "context": "threadsByForum: (id: number | string) => `/api/forum/forums/${id}/threads`",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        }
      ],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": true,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 2.6
    },
    {
      "path": "client/src/contexts/content-feed-context.tsx",
      "domain": "other",
      "layer": "other",
      "size": 2589,
      "lines": 92,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/hooks/use-content"
      ],
      "exports": [
        "ContentFeedProvider",
        "useContentFeed",
        "useContentFeedState"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "ContentTab"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/contexts/MotionContext.tsx",
      "domain": "other",
      "layer": "other",
      "size": 1576,
      "lines": 46,
      "complexity": 1,
      "dependencies": [
        "react"
      ],
      "exports": [
        "MotionProvider",
        "useMotion"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/ErrorBoundary.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1210,
      "lines": 50,
      "complexity": 1,
      "dependencies": [
        "react"
      ],
      "exports": [
        "ErrorBoundary"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/config/widgetRegistry.ts",
      "domain": "other",
      "layer": "other",
      "size": 7803,
      "lines": 320,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/stores/useLayoutStore",
        "lucide-react"
      ],
      "exports": [
        "WidgetMetadata",
        "WidgetConfig",
        "widgetRegistry",
        "getWidgetsByCategory",
        "getWidgetsBySupportedSlot",
        "getWidgetMetadata",
        "WidgetId"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "SlotId"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 1.7
    },
    {
      "path": "client/src/config/ui.config.ts",
      "domain": "other",
      "layer": "other",
      "size": 10336,
      "lines": 354,
      "complexity": 2,
      "dependencies": [
        "zod"
      ],
      "exports": [
        "HeroQuoteSchema",
        "HeroQuote",
        "FooterQuoteSchema",
        "FooterQuote",
        "UiConfigSchema",
        "uiConfig"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.4
    },
    {
      "path": "client/src/config/themeFallbacks.ts",
      "domain": "other",
      "layer": "other",
      "size": 589,
      "lines": 34,
      "complexity": 0,
      "dependencies": [
        "lucide-react"
      ],
      "exports": [
        "DefaultZoneTheme",
        "DEFAULT_ZONE_THEMES"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/config/themeConstants.ts",
      "domain": "other",
      "layer": "other",
      "size": 2378,
      "lines": 80,
      "complexity": 1,
      "dependencies": [
        "lucide-react"
      ],
      "exports": [
        "ZONE_THEMES",
        "THEME_ICONS",
        "THEME_COLORS_BG"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/config/tags.config.ts",
      "domain": "other",
      "layer": "other",
      "size": 831,
      "lines": 31,
      "complexity": 0,
      "dependencies": [
        "zod"
      ],
      "exports": [
        "ForumTagSchema",
        "ForumTag",
        "tagConfig"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.1
    },
    {
      "path": "client/src/config/sidebarWidgets.config.ts",
      "domain": "other",
      "layer": "other",
      "size": 1507,
      "lines": 36,
      "complexity": 0,
      "dependencies": [
        "zod"
      ],
      "exports": [
        "WidgetType",
        "SidebarWidgetConfigSchema",
        "SidebarWidgetConfig",
        "sidebarWidgets",
        "validatedConfig as validatedSidebarWidgets "
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.1
    },
    {
      "path": "client/src/config/rarity.config.ts",
      "domain": "other",
      "layer": "other",
      "size": 661,
      "lines": 20,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "rarityColorMap",
        "rarityBorderMap",
        "Rarity"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/config/publicConfig.ts",
      "domain": "other",
      "layer": "other",
      "size": 122,
      "lines": 11,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "publicConfig"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/config/pagination.config.ts",
      "domain": "other",
      "layer": "other",
      "size": 286,
      "lines": 14,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "PAGINATION_CONFIG",
        "PaginationConfig"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/config/pageSlotMap.ts",
      "domain": "other",
      "layer": "other",
      "size": 637,
      "lines": 20,
      "complexity": 0,
      "dependencies": [
        "@/stores/useLayoutStore"
      ],
      "exports": [
        "pageSlotMap"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "SlotId"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/config/navigation.ts",
      "domain": "other",
      "layer": "other",
      "size": 5235,
      "lines": 242,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/components/icons/iconRenderer"
      ],
      "exports": [
        "NavItemConfig",
        "UserMenuItemConfig",
        "primaryNavigation",
        "createUserMenuItems",
        "filterNavItems",
        "trackNavigation"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/config/footer-navigation.ts",
      "domain": "other",
      "layer": "other",
      "size": 1851,
      "lines": 64,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "FooterLink",
        "FooterNavigationSection",
        "footerNavigation",
        "getNavigationSection",
        "getResourcesSection",
        "getCommunitySection",
        "getLegalSection"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/config/fonts.config.ts",
      "domain": "other",
      "layer": "other",
      "size": 5718,
      "lines": 201,
      "complexity": 2,
      "dependencies": [],
      "exports": [
        "FontConfig",
        "fontConfigs",
        "getAllFontImports",
        "getFontsByCategory",
        "fontCombinations"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.9
    },
    {
      "path": "client/src/config/featureFlags.ts",
      "domain": "other",
      "layer": "other",
      "size": 268,
      "lines": 13,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "featureFlags",
        "ENABLE_WIDGETS"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/config/easter-eggs.config.ts",
      "domain": "other",
      "layer": "other",
      "size": 2236,
      "lines": 58,
      "complexity": 1,
      "dependencies": [],
      "exports": [
        "XP_EASTER_EGGS",
        "BANKRUPTCY_EFFECTS",
        "BankruptcyMessage",
        "REPUTATION_EASTER_EGGS",
        "OBLITERATION_EFFECTS",
        "ObliterationMessage"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/config/brand.config.ts",
      "domain": "other",
      "layer": "other",
      "size": 3054,
      "lines": 147,
      "complexity": 1,
      "dependencies": [],
      "exports": [
        "brandConfig",
        "BrandConfig",
        "ColorSystem",
        "AnimationSystem"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/config/animation.config.ts",
      "domain": "other",
      "layer": "other",
      "size": 248,
      "lines": 15,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "animationConfig",
        "AnimationConfig"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "server/src/routes/api/ui.routes.ts",
      "domain": "other",
      "layer": "routes",
      "size": 553,
      "lines": 21,
      "complexity": 1,
      "dependencies": [
        "express"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 0.7
    },
    {
      "path": "server/src/routes/api/index.ts",
      "domain": "other",
      "layer": "routes",
      "size": 1054,
      "lines": 37,
      "complexity": 0,
      "dependencies": [
        "express"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 0.5
    },
    {
      "path": "server/src/core/repository/repository-factory.ts",
      "domain": "other",
      "layer": "other",
      "size": 6046,
      "lines": 205,
      "complexity": 3,
      "dependencies": [],
      "exports": [
        "RepositoryFactory",
        "repositoryFactory",
        "getUserRepository",
        "getTransactionRepository",
        "getForumRepository",
        "getThreadRepository",
        "getPostRepository",
        "getXPRepository"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "IRepositoryFactory",
          "IUserRepository",
          "IForumRepository",
          "IThreadRepository",
          "IPostRepository",
          "ITransactionRepository",
          "IXPRepository",
          "RepositoryConfig"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 2.1
    },
    {
      "path": "server/src/core/repository/interfaces.ts",
      "domain": "other",
      "layer": "other",
      "size": 6623,
      "lines": 184,
      "complexity": 1,
      "dependencies": [
        "@schema",
        "@/db/types"
      ],
      "exports": [
        "IBaseRepository",
        "IUserRepository",
        "IForumRepository",
        "IThreadRepository",
        "IPostRepository",
        "ITransactionRepository",
        "IXPRepository",
        "IRepositoryFactory",
        "IRepositoryContext",
        "ITransactionContext",
        "RepositoryConfig",
        "RepositoryErrorContext",
        "RepositoryErrorCode",
        "QueryBuilder",
        "IRepositoryCache",
        "IRepositoryMonitor",
        "RepositoryStats"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 14,
          "context": "findById(id: number | string): Promise<T | null>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 18,
          "context": "update(id: number | string, data: Partial<T>): Promise<T>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 19,
          "context": "delete(id: number | string): Promise<void>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 20,
          "context": "exists(id: number | string): Promise<boolean>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 29,
          "context": "updateLastLogin(id: number): Promise<void>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 30,
          "context": "incrementXP(id: number, amount: number): Promise<User>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 52,
          "context": "incrementViewCount(id: number): Promise<void>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 53,
          "context": "updatePostCount(id: number): Promise<void>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 54,
          "context": "markAsSolved(id: number, solvingPostId?: number): Promise<Thread>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 62,
          "context": "incrementLikeCount(id: number): Promise<void>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 63,
          "context": "decrementLikeCount(id: number): Promise<void>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 64,
          "context": "updateTipCount(id: number, amount: number): Promise<void>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 69,
          "context": "findByUserId(userId: number, options?: QueryOptions): Promise<PaginatedResult<Transaction>>;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 72,
          "context": "getTotalByUser(userId: number, type?: string): Promise<number>;",
          "suggestedFix": "UserId",
          "confidence": 1
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 73,
          "context": "getBalanceByUser(userId: number): Promise<number>;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 78,
          "context": "findByUserId(userId: number): Promise<any>;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 79,
          "context": "awardXP(userId: number, amount: number, reason: string): Promise<any>;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 81,
          "context": "getUserRank(userId: number): Promise<number>;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "threadId: number",
          "line": 59,
          "context": "findByThreadId(threadId: number, options?: QueryOptions): Promise<PaginatedResult<Post>>;",
          "suggestedFix": "ThreadId",
          "confidence": 0.8
        }
      ],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": true,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": [
          "User",
          "ForumCategory",
          "Thread",
          "Post",
          "Transaction"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 3.1
    },
    {
      "path": "server/src/core/repository/index.ts",
      "domain": "other",
      "layer": "other",
      "size": 2024,
      "lines": 82,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "REPOSITORY_VERSION",
        "REPOSITORY_BUILD_DATE",
        "REPOSITORY_STATUS",
        "createRepositoryFactory",
        "isRepositoryError",
        "BaseRepository",
        "RepositoryError",
        "UserRepository ",
        "TransactionRepository ",
        "RepositoryFactory",
        "repositoryFactory",
        "getUserRepository",
        "getTransactionRepository",
        "getForumRepository",
        "getThreadRepository",
        "getPostRepository",
        "getXPRepository"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.5
    },
    {
      "path": "server/src/core/repository/base-repository.ts",
      "domain": "other",
      "layer": "other",
      "size": 9773,
      "lines": 395,
      "complexity": 7,
      "dependencies": [
        "@db",
        "drizzle-orm",
        "drizzle-orm/pg-core"
      ],
      "exports": [
        "PaginationOptions",
        "SortOptions",
        "FilterOptions",
        "QueryOptions",
        "PaginatedResult",
        "RepositoryTransaction",
        "RepositoryError"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 69,
          "context": "async findById(id: number | string): Promise<T | null> {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 201,
          "context": "async update(id: number | string, data: Partial<T>): Promise<T> {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 233,
          "context": "async delete(id: number | string): Promise<void> {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 251,
          "context": "async exists(id: number | string): Promise<boolean> {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        }
      ],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": true,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": [
          "AnyPgColumn",
          "AnyPgTable"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 4.500000000000001
    },
    {
      "path": "server/src/core/monitoring/query-performance.ts",
      "domain": "other",
      "layer": "other",
      "size": 5879,
      "lines": 248,
      "complexity": 3,
      "dependencies": [],
      "exports": [
        "QueryMetrics",
        "PerformanceStats",
        "queryMonitor",
        "createQueryMonitoringMiddleware"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 2.1
    },
    {
      "path": "server/src/core/monitoring/health-check.ts",
      "domain": "other",
      "layer": "other",
      "size": 9023,
      "lines": 352,
      "complexity": 4,
      "dependencies": [
        "express",
        "express",
        "@db",
        "drizzle-orm",
        "os"
      ],
      "exports": [
        "HealthStatus",
        "ServiceHealth",
        "SystemMetrics",
        "requestMetricsMiddleware",
        "healthMonitor "
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "Request",
          "Response"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 2.3
    },
    {
      "path": "server/src/core/utils/error-response.util.ts",
      "domain": "other",
      "layer": "utils",
      "size": 6261,
      "lines": 287,
      "complexity": 6,
      "dependencies": [
        "express",
        "zod"
      ],
      "exports": [
        "ErrorResponse",
        "SuccessResponse",
        "ApiResponse",
        "ResponseError",
        "formatErrorResponse",
        "formatSuccessResponse",
        "handleValidationError",
        "createErrorHandler",
        "asyncHandler",
        "requirePermission",
        "requireResource",
        "checkRateLimit",
        "createPaginationMeta",
        "controllerMethod",
        "healthResponse"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": [
          "Request",
          "Response"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 2.2
    },
    {
      "path": "server/src/core/config/environment.ts",
      "domain": "other",
      "layer": "other",
      "size": 5695,
      "lines": 199,
      "complexity": 2,
      "dependencies": [
        "zod"
      ],
      "exports": [
        "EnvironmentConfig",
        "env",
        "isProduction",
        "isDevelopment",
        "isTest",
        "getDatabaseConfig",
        "getSessionConfig",
        "getCorsConfig",
        "getRateLimitConfig"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.1
    },
    {
      "path": "server/src/core/audit/audit-logger.ts",
      "domain": "other",
      "layer": "other",
      "size": 13024,
      "lines": 537,
      "complexity": 6,
      "dependencies": [
        "fs/promises",
        "path"
      ],
      "exports": [
        "AuditEventType",
        "AuditSeverity",
        "AuditEvent",
        "auditLogger",
        "auditMiddleware"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 157,
          "context": "userId: number | undefined,",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 189,
          "context": "userId: number,",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 219,
          "context": "userId: number,",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 274,
          "context": "userId: number,",
          "suggestedFix": "UserId",
          "confidence": 0.8
        }
      ],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": true,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 3.1
    },
    {
      "path": "server/src/core/services/rate-limit.service.ts",
      "domain": "other",
      "layer": "services",
      "size": 6887,
      "lines": 301,
      "complexity": 6,
      "dependencies": [
        "ioredis",
        "express-rate-limit",
        "rate-limit-redis",
        "express"
      ],
      "exports": [
        "rateLimiters",
        "createCustomRateLimiter",
        "bypassRateLimit",
        "redisClient "
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": [
          "Request",
          "Response"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 1.9000000000000001
    },
    {
      "path": "client/src/types/compat/brand.ts",
      "domain": "other",
      "layer": "types",
      "size": 576,
      "lines": 23,
      "complexity": 0,
      "dependencies": [
        "@/config/brand.config"
      ],
      "exports": [
        "RuntimeBrandConfig",
        "BrandConfigUpdate"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "BrandConfig"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/types/compat/avatar.ts",
      "domain": "other",
      "layer": "types",
      "size": 365,
      "lines": 14,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "AvatarFrame"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 5,
          "context": "id: number;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        }
      ],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": true,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 2.1
    },
    {
      "path": "client/src/pages/zones/index.tsx",
      "domain": "other",
      "layer": "pages",
      "size": 4511,
      "lines": 130,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/components/footer",
        "@/components/forum/CanonicalZoneGrid",
        "@/features/forum/components/HierarchicalZoneNav",
        "@/contexts/ForumStructureContext",
        "@/contexts/ForumStructureContext",
        "@/components/ui/loader",
        "@/components/ui/error-display",
        "lucide-react",
        "@/components/forum/ZoneCard",
        "@/components/forum/ForumErrorBoundary"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "MergedZone"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/pages/zones/[slug].tsx",
      "domain": "other",
      "layer": "pages",
      "size": 9876,
      "lines": 305,
      "complexity": 1,
      "dependencies": [
        "react",
        "wouter",
        "@/contexts/ForumStructureContext",
        "@/contexts/ForumStructureContext",
        "@/components/ui/card",
        "@/components/ui/button",
        "@/components/ui/skeleton",
        "@/features/forum/components/ForumListItem",
        "@/layout/primitives/Wide",
        "@/components/navigation/ForumBreadcrumbs",
        "@/utils/spacing-constants"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "MergedForum"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/pages/tags/[tagSlug].tsx",
      "domain": "other",
      "layer": "pages",
      "size": 5737,
      "lines": 170,
      "complexity": 1,
      "dependencies": [
        "react",
        "wouter",
        "@/components/forum/ThreadCard",
        "@/features/forum/hooks/useForumQueries",
        "@tanstack/react-query",
        "@/lib/queryClient",
        "@/components/header",
        "@/components/footer",
        "@/components/ui/button",
        "@/components/ui/card",
        "@/components/ui/separator",
        "@/components/ui/badge",
        "lucide-react",
        "@/components/ui/skeleton",
        "@/components/ui/pagination",
        "@/types/thread.types"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": [
          "ThreadDisplay",
          "ThreadsApiResponse"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.1
    },
    {
      "path": "client/src/pages/referrals/index.tsx",
      "domain": "other",
      "layer": "pages",
      "size": 12745,
      "lines": 409,
      "complexity": 2,
      "dependencies": [
        "react",
        "@tanstack/react-query",
        "@/lib/queryClient",
        "@/layout/primitives/Wide",
        "@/components/ui/card",
        "@/components/ui/button",
        "@/components/ui/input",
        "@/components/ui/label",
        "@/components/ui/badge",
        "@/components/ui/skeleton",
        "@/components/ui/alert",
        "@/hooks/use-auth.tsx",
        "@/components/auth/protected-route",
        "lucide-react",
        "sonner"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.9
    },
    {
      "path": "client/src/pages/ui-playground/demo-data.ts",
      "domain": "other",
      "layer": "pages",
      "size": 3561,
      "lines": 104,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "usernameTiers",
        "userTitles",
        "avatarFrameRarities",
        "cryptoIcons",
        "sampleAnnouncements",
        "navSections"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/pages/preferences/index.tsx",
      "domain": "other",
      "layer": "pages",
      "size": 6169,
      "lines": 187,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/hooks/useSearchParams",
        "@/components/header",
        "@/components/footer",
        "@/hooks/use-auth.tsx",
        "@/components/ui/tabs",
        "@/components/ui/card",
        "@/components/preferences/profile-preferences",
        "@/components/preferences/account-preferences",
        "@/components/preferences/notification-preferences",
        "@/components/preferences/display-preferences",
        "@/components/preferences/session-preferences",
        "@/components/preferences/referral-preferences",
        "@/components/preferences/social-preferences",
        "lucide-react",
        "@/components/auth/protected-route",
        "@/components/ui/container"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/pages/invite/[code].tsx",
      "domain": "other",
      "layer": "pages",
      "size": 8312,
      "lines": 291,
      "complexity": 2,
      "dependencies": [
        "react",
        "wouter",
        "@tanstack/react-query",
        "@/lib/queryClient",
        "@/layout/primitives/Wide",
        "@/components/ui/card",
        "@/components/ui/button",
        "@/components/ui/alert",
        "@/hooks/use-auth.tsx",
        "lucide-react",
        "sonner"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.9
    },
    {
      "path": "client/src/pages/search/index.tsx",
      "domain": "other",
      "layer": "pages",
      "size": 162,
      "lines": 6,
      "complexity": 0,
      "dependencies": [
        "react"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/pages/dev/index.ts",
      "domain": "other",
      "layer": "pages",
      "size": 80,
      "lines": 2,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "DevPlaygroundLayout",
        "PlaygroundSection"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/pages/dev/DevPlaygroundLayout.tsx",
      "domain": "other",
      "layer": "pages",
      "size": 2975,
      "lines": 97,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/lib/utils",
        "@/stores/usePlaygroundControls"
      ],
      "exports": [
        "DevPlaygroundLayout",
        "PlaygroundSection"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.8999999999999999
    },
    {
      "path": "client/src/pages/dev/DemoCard.tsx",
      "domain": "other",
      "layer": "pages",
      "size": 1136,
      "lines": 39,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/stores/usePlaygroundControls"
      ],
      "exports": [
        "DemoCard"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.7
    },
    {
      "path": "client/src/pages/dev/ControlsDrawer.tsx",
      "domain": "other",
      "layer": "pages",
      "size": 1909,
      "lines": 57,
      "complexity": 0,
      "dependencies": [
        "react",
        "@/stores/usePlaygroundControls",
        "lucide-react",
        "@/components/ui/input",
        "@/components/ui/button"
      ],
      "exports": [
        "ControlsDrawer"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.5
    },
    {
      "path": "client/src/pages/dictionary/index.tsx",
      "domain": "other",
      "layer": "pages",
      "size": 2252,
      "lines": 68,
      "complexity": 1,
      "dependencies": [
        "react",
        "@tanstack/react-query",
        "wouter",
        "@/lib/queryClient",
        "@/components/ui/button",
        "@/components/ui/card",
        "@/components/ui/loader",
        "@/components/ui/error-display",
        "@/features/dictionary/components/AddWordModal",
        "@/components/ui/tooltip"
      ],
      "exports": [],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 13,
          "context": "id: number;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        }
      ],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": true,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 2.8
    },
    {
      "path": "client/src/pages/dictionary/[slug].tsx",
      "domain": "other",
      "layer": "pages",
      "size": 2475,
      "lines": 80,
      "complexity": 2,
      "dependencies": [
        "react",
        "wouter",
        "@tanstack/react-query",
        "@/lib/queryClient",
        "@/components/ui/loader",
        "@/components/ui/error-display",
        "@/components/ui/button",
        "@/components/ui/tooltip",
        "@/features/dictionary/services/dictionaryApi"
      ],
      "exports": [],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 12,
          "context": "id: number;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 34,
          "context": "const upvoteMutation = useMutation((id: number) => dictionaryApi.upvote(id), {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        }
      ],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": true,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 4.1
    },
    {
      "path": "client/src/pages/announcements/index.tsx",
      "domain": "other",
      "layer": "pages",
      "size": 176,
      "lines": 6,
      "complexity": 0,
      "dependencies": [
        "react"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/lib/utils/generateSlug.ts",
      "domain": "other",
      "layer": "utils",
      "size": 175,
      "lines": 9,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "generateSlug"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/lib/utils/category.ts",
      "domain": "other",
      "layer": "utils",
      "size": 1431,
      "lines": 27,
      "complexity": 2,
      "dependencies": [],
      "exports": [
        "getCategoryIcon",
        "getCategoryColor"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.9
    },
    {
      "path": "client/src/lib/utils/applyPluginRewards.ts",
      "domain": "other",
      "layer": "utils",
      "size": 4473,
      "lines": 163,
      "complexity": 3,
      "dependencies": [
        "@/types/inventory"
      ],
      "exports": [
        "applyPluginRewards",
        "hasSystemRole",
        "getSystemRoleColor",
        "PluginReward",
        "SYSTEM_ROLE_COLORS "
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": [
          "UserInventoryWithProduct"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 1.3
    },
    {
      "path": "client/src/lib/utils/api-helpers.ts",
      "domain": "other",
      "layer": "utils",
      "size": 952,
      "lines": 26,
      "complexity": 1,
      "dependencies": [],
      "exports": [
        "ensureArray",
        "ensureValue"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.1
    },
    {
      "path": "client/src/lib/utils/animateNumber.ts",
      "domain": "other",
      "layer": "utils",
      "size": 3346,
      "lines": 124,
      "complexity": 3,
      "dependencies": [
        "react",
        "@db/types"
      ],
      "exports": [
        "animateNumber",
        "useAnimatedNumber"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "AnimationFrameId"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 2.1
    },
    {
      "path": "client/src/hooks/__tests__/useMediaQuery.test.tsx",
      "domain": "other",
      "layer": "hooks",
      "size": 8083,
      "lines": 284,
      "complexity": 2,
      "dependencies": [
        "@testing-library/react",
        "vitest"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.9
    },
    {
      "path": "client/src/test/utils/renderWithProviders.tsx",
      "domain": "other",
      "layer": "utils",
      "size": 936,
      "lines": 30,
      "complexity": 1,
      "dependencies": [
        "react",
        "@testing-library/react",
        "@/providers/root-provider"
      ],
      "exports": [
        "renderWithProviders"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/layout/primitives/index.ts",
      "domain": "other",
      "layer": "other",
      "size": 260,
      "lines": 7,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "Wide ",
        "Prose ",
        "FullBleedSection ",
        "ClampPadding ",
        "StickyRegion ",
        "PageBackdrop "
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/layout/primitives/Wide.tsx",
      "domain": "other",
      "layer": "other",
      "size": 583,
      "lines": 20,
      "complexity": 0,
      "dependencies": [
        "react",
        "@/lib/utils"
      ],
      "exports": [
        "Wide"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/layout/primitives/StickyRegion.tsx",
      "domain": "other",
      "layer": "other",
      "size": 419,
      "lines": 20,
      "complexity": 0,
      "dependencies": [
        "react",
        "@/lib/utils"
      ],
      "exports": [
        "StickyRegion"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/layout/primitives/Prose.tsx",
      "domain": "other",
      "layer": "other",
      "size": 524,
      "lines": 25,
      "complexity": 0,
      "dependencies": [
        "react",
        "@/lib/utils"
      ],
      "exports": [
        "Prose"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/layout/primitives/PageBackdrop.tsx",
      "domain": "other",
      "layer": "other",
      "size": 509,
      "lines": 18,
      "complexity": 0,
      "dependencies": [
        "react",
        "@/lib/utils"
      ],
      "exports": [
        "PageBackdrop"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/layout/primitives/FullBleedSection.tsx",
      "domain": "other",
      "layer": "other",
      "size": 1061,
      "lines": 38,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/lib/utils"
      ],
      "exports": [
        "FullBleedSection"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/layout/primitives/ClampPadding.tsx",
      "domain": "other",
      "layer": "other",
      "size": 628,
      "lines": 31,
      "complexity": 0,
      "dependencies": [
        "react",
        "@/lib/utils"
      ],
      "exports": [
        "ClampPadding"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/__tests__/services/error.service.test.ts",
      "domain": "other",
      "layer": "services",
      "size": 8854,
      "lines": 281,
      "complexity": 3,
      "dependencies": [
        "vitest",
        "@/services/error.service",
        "@/services/error.service"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": true,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "AppError",
          "ErrorCategory",
          "ErrorSeverity"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 1.1
    },
    {
      "path": "client/src/components/social/WhaleWatchDisplay.tsx",
      "domain": "other",
      "layer": "components",
      "size": 11596,
      "lines": 374,
      "complexity": 2,
      "dependencies": [
        "react",
        "@tanstack/react-query",
        "@/lib/queryClient",
        "@/components/ui/card",
        "@/components/ui/badge",
        "@/components/ui/button",
        "@/components/ui/avatar",
        "@/components/ui/tabs",
        "@/components/ui/scroll-area",
        "@/components/ui/skeleton",
        "wouter",
        "date-fns",
        "@/lib/utils"
      ],
      "exports": [
        "WhaleWatchDisplay"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.9
    },
    {
      "path": "client/src/components/social/WhaleWatchDashboard.tsx",
      "domain": "other",
      "layer": "components",
      "size": 17294,
      "lines": 567,
      "complexity": 3,
      "dependencies": [
        "react",
        "@tanstack/react-query",
        "@/lib/queryClient",
        "@/components/ui/card",
        "@/components/ui/button",
        "@/components/ui/input",
        "@/components/ui/badge",
        "@/components/ui/avatar",
        "@/components/ui/tabs",
        "@/components/ui/scroll-area",
        "@/components/ui/skeleton",
        "date-fns",
        "wouter",
        "@/lib/utils",
        "@/hooks/use-toast"
      ],
      "exports": [
        "WhaleWatchDashboard"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 43,
          "context": "id: number;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        }
      ],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": true,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 3.4000000000000004
    },
    {
      "path": "client/src/components/social/FollowingList.tsx",
      "domain": "other",
      "layer": "components",
      "size": 2183,
      "lines": 67,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/hooks/useFollowing",
        "@/components/ui/avatar",
        "@/components/ui/skeleton",
        "@/components/ui/badge",
        "wouter",
        "@/lib/utils"
      ],
      "exports": [
        "FollowingList"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/social/FollowButton.tsx",
      "domain": "other",
      "layer": "components",
      "size": 4613,
      "lines": 186,
      "complexity": 2,
      "dependencies": [
        "react",
        "@tanstack/react-query",
        "@/lib/queryClient",
        "@/components/ui/button",
        "lucide-react",
        "@/hooks/use-toast",
        "@/hooks/use-auth",
        "@/lib/utils"
      ],
      "exports": [
        "FollowButton"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.9
    },
    {
      "path": "client/src/components/ui/widget-skeleton.tsx",
      "domain": "other",
      "layer": "components",
      "size": 374,
      "lines": 15,
      "complexity": 0,
      "dependencies": [
        "react"
      ],
      "exports": [
        "WidgetSkeleton"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/toggle.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1457,
      "lines": 42,
      "complexity": 1,
      "dependencies": [
        "react",
        "@radix-ui/react-toggle",
        "class-variance-authority",
        "@/lib/utils"
      ],
      "exports": [
        "Toggle",
        "toggleVariants"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/ui/toggle-group.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1682,
      "lines": 58,
      "complexity": 1,
      "dependencies": [
        "react",
        "@radix-ui/react-toggle-group",
        "class-variance-authority",
        "@/lib/utils",
        "@/components/ui/toggle"
      ],
      "exports": [
        "ToggleGroup",
        "ToggleGroupItem"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/ui/toaster.tsx",
      "domain": "other",
      "layer": "components",
      "size": 733,
      "lines": 33,
      "complexity": 1,
      "dependencies": [
        "@/hooks/use-toast"
      ],
      "exports": [
        "Toaster"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.1
    },
    {
      "path": "client/src/components/ui/toast.tsx",
      "domain": "other",
      "layer": "components",
      "size": 6009,
      "lines": 178,
      "complexity": 1,
      "dependencies": [
        "react",
        "@radix-ui/react-toast",
        "class-variance-authority",
        "lucide-react",
        "@/lib/utils"
      ],
      "exports": [
        "type ToastProps",
        "type ToastActionElement",
        "ToastProvider",
        "ToastViewport",
        "Toast",
        "ToastTitle",
        "ToastDescription",
        "ToastClose",
        "ToastAction"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/ui/textarea.tsx",
      "domain": "other",
      "layer": "components",
      "size": 2872,
      "lines": 95,
      "complexity": 1,
      "dependencies": [
        "react",
        "class-variance-authority",
        "@/lib/utils",
        "lucide-react"
      ],
      "exports": [
        "TextareaProps",
        "Textarea",
        "textareaVariants"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/ui/tabs.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1840,
      "lines": 54,
      "complexity": 0,
      "dependencies": [
        "react",
        "@radix-ui/react-tabs",
        "@/lib/utils"
      ],
      "exports": [
        "Tabs",
        "TabsList",
        "TabsTrigger",
        "TabsContent"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/table.tsx",
      "domain": "other",
      "layer": "components",
      "size": 2670,
      "lines": 96,
      "complexity": 0,
      "dependencies": [
        "react",
        "@/lib/utils"
      ],
      "exports": [
        "Table",
        "TableHeader",
        "TableBody",
        "TableFooter",
        "TableHead",
        "TableRow",
        "TableCell",
        "TableCaption"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/tab-switcher.tsx",
      "domain": "other",
      "layer": "components",
      "size": 6048,
      "lines": 196,
      "complexity": 2,
      "dependencies": [
        "react",
        "@/lib/utils",
        "lucide-react",
        "lucide-react",
        "@/hooks/use-content"
      ],
      "exports": [
        "TabConfig",
        "TabSwitcherProps",
        "TabSwitcher"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "LucideIcon"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.9
    },
    {
      "path": "client/src/components/ui/switch.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1112,
      "lines": 28,
      "complexity": 0,
      "dependencies": [
        "react",
        "@radix-ui/react-switch",
        "@/lib/utils"
      ],
      "exports": [
        "Switch "
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/stat-chip.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1766,
      "lines": 67,
      "complexity": 1,
      "dependencies": [
        "react",
        "lucide-react",
        "@/lib/utils/animateNumber",
        "react"
      ],
      "exports": [
        "StatChipProps",
        "StatChip"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "LucideProps"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/ui/slider.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1045,
      "lines": 24,
      "complexity": 0,
      "dependencies": [
        "react",
        "@radix-ui/react-slider",
        "@/lib/utils"
      ],
      "exports": [
        "Slider "
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/skeleton.tsx",
      "domain": "other",
      "layer": "components",
      "size": 268,
      "lines": 9,
      "complexity": 0,
      "dependencies": [
        "react",
        "@/lib/utils"
      ],
      "exports": [
        "Skeleton "
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/sidebar.tsx",
      "domain": "other",
      "layer": "components",
      "size": 22061,
      "lines": 745,
      "complexity": 2,
      "dependencies": [
        "react",
        "@radix-ui/react-slot",
        "class-variance-authority",
        "lucide-react",
        "@/hooks/use-mobile",
        "@/lib/utils",
        "@/components/ui/button",
        "@/components/ui/input",
        "@/components/ui/separator",
        "@/components/ui/skeleton",
        "@/components/ui/tooltip"
      ],
      "exports": [
        "Sidebar",
        "SidebarContent",
        "SidebarFooter",
        "SidebarGroup",
        "SidebarGroupAction",
        "SidebarGroupContent",
        "SidebarGroupLabel",
        "SidebarHeader",
        "SidebarInput",
        "SidebarInset",
        "SidebarMenu",
        "SidebarMenuAction",
        "SidebarMenuBadge",
        "SidebarMenuButton",
        "SidebarMenuItem",
        "SidebarMenuSkeleton",
        "SidebarMenuSub",
        "SidebarMenuSubButton",
        "SidebarMenuSubItem",
        "SidebarProvider"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.9
    },
    {
      "path": "client/src/components/ui/sheet.tsx",
      "domain": "other",
      "layer": "components",
      "size": 4092,
      "lines": 122,
      "complexity": 1,
      "dependencies": [
        "react",
        "@radix-ui/react-dialog",
        "class-variance-authority",
        "lucide-react",
        "@/lib/utils"
      ],
      "exports": [
        "Sheet",
        "SheetPortal",
        "SheetOverlay",
        "SheetTrigger",
        "SheetClose",
        "SheetContent",
        "SheetHeader",
        "SheetFooter",
        "SheetTitle",
        "SheetDescription"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/ui/separator.tsx",
      "domain": "other",
      "layer": "components",
      "size": 699,
      "lines": 25,
      "complexity": 0,
      "dependencies": [
        "react",
        "@radix-ui/react-separator",
        "@/lib/utils"
      ],
      "exports": [
        "Separator "
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/seo-head.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1546,
      "lines": 52,
      "complexity": 1,
      "dependencies": [
        "react",
        "react-helmet"
      ],
      "exports": [
        "SeoHead"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/ui/select.tsx",
      "domain": "other",
      "layer": "components",
      "size": 5522,
      "lines": 154,
      "complexity": 0,
      "dependencies": [
        "react",
        "@radix-ui/react-select",
        "lucide-react",
        "@/lib/utils"
      ],
      "exports": [
        "Select",
        "SelectGroup",
        "SelectValue",
        "SelectTrigger",
        "SelectContent",
        "SelectLabel",
        "SelectItem",
        "SelectSeparator",
        "SelectScrollUpButton",
        "SelectScrollDownButton"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/scroll-area.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1583,
      "lines": 45,
      "complexity": 0,
      "dependencies": [
        "react",
        "@radix-ui/react-scroll-area",
        "@/lib/utils"
      ],
      "exports": [
        "ScrollArea",
        "ScrollBar"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/safe-image.tsx",
      "domain": "other",
      "layer": "components",
      "size": 438,
      "lines": 19,
      "complexity": 0,
      "dependencies": [
        "react"
      ],
      "exports": [
        "SafeImage"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/resizable.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1673,
      "lines": 43,
      "complexity": 0,
      "dependencies": [
        "lucide-react",
        "react-resizable-panels",
        "@/lib/utils"
      ],
      "exports": [
        "ResizablePanelGroup",
        "ResizablePanel",
        "ResizableHandle"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/radio-group.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1403,
      "lines": 37,
      "complexity": 0,
      "dependencies": [
        "react",
        "@radix-ui/react-radio-group",
        "lucide-react",
        "@/lib/utils"
      ],
      "exports": [
        "RadioGroup",
        "RadioGroupItem"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/progress.tsx",
      "domain": "other",
      "layer": "components",
      "size": 746,
      "lines": 24,
      "complexity": 0,
      "dependencies": [
        "react",
        "@radix-ui/react-progress",
        "@/lib/utils"
      ],
      "exports": [
        "Progress "
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/popover.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1254,
      "lines": 30,
      "complexity": 0,
      "dependencies": [
        "react",
        "@radix-ui/react-popover",
        "@/lib/utils"
      ],
      "exports": [
        "Popover",
        "PopoverTrigger",
        "PopoverContent"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/pagination.tsx",
      "domain": "other",
      "layer": "components",
      "size": 7414,
      "lines": 269,
      "complexity": 2,
      "dependencies": [
        "react",
        "@/components/ui/button",
        "@/lib/utils"
      ],
      "exports": [
        "Pagination",
        "PaginationContent",
        "PaginationItem",
        "PaginationLink",
        "PaginationPrevious",
        "PaginationNext",
        "PaginationEllipsis"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.9
    },
    {
      "path": "client/src/components/ui/navigation-menu.tsx",
      "domain": "other",
      "layer": "components",
      "size": 4983,
      "lines": 121,
      "complexity": 0,
      "dependencies": [
        "react",
        "@radix-ui/react-navigation-menu",
        "class-variance-authority",
        "lucide-react",
        "@/lib/utils"
      ],
      "exports": [
        "navigationMenuTriggerStyle",
        "NavigationMenu",
        "NavigationMenuList",
        "NavigationMenuItem",
        "NavigationMenuContent",
        "NavigationMenuTrigger",
        "NavigationMenuLink",
        "NavigationMenuIndicator",
        "NavigationMenuViewport"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/menubar.tsx",
      "domain": "other",
      "layer": "components",
      "size": 8263,
      "lines": 232,
      "complexity": 1,
      "dependencies": [
        "react",
        "@radix-ui/react-menubar",
        "lucide-react",
        "@/lib/utils"
      ],
      "exports": [
        "Menubar",
        "MenubarMenu",
        "MenubarTrigger",
        "MenubarContent",
        "MenubarItem",
        "MenubarSeparator",
        "MenubarLabel",
        "MenubarCheckboxItem",
        "MenubarRadioGroup",
        "MenubarRadioItem",
        "MenubarPortal",
        "MenubarSubContent",
        "MenubarSubTrigger",
        "MenubarGroup",
        "MenubarSub",
        "MenubarShortcut"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/ui/menu.tsx",
      "domain": "other",
      "layer": "components",
      "size": 6672,
      "lines": 186,
      "complexity": 0,
      "dependencies": [
        "react",
        "@radix-ui/react-dropdown-menu",
        "lucide-react",
        "@/lib/utils"
      ],
      "exports": [
        "Menu",
        "MenuTrigger",
        "MenuContent",
        "MenuItem",
        "MenuCheckboxItem",
        "MenuRadioItem",
        "MenuLabel",
        "MenuSeparator",
        "MenuShortcut",
        "MenuGroup",
        "MenuPortal",
        "MenuSub",
        "MenuSubContent",
        "MenuSubTrigger",
        "MenuRadioGroup"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/loader.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1063,
      "lines": 46,
      "complexity": 1,
      "dependencies": [
        "react",
        "lucide-react",
        "@/lib/utils"
      ],
      "exports": [
        "LoadingSpinner"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/ui/label.tsx",
      "domain": "other",
      "layer": "components",
      "size": 696,
      "lines": 20,
      "complexity": 0,
      "dependencies": [
        "react",
        "@radix-ui/react-label",
        "class-variance-authority",
        "@/lib/utils"
      ],
      "exports": [
        "Label "
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/input.tsx",
      "domain": "other",
      "layer": "components",
      "size": 3059,
      "lines": 98,
      "complexity": 1,
      "dependencies": [
        "react",
        "class-variance-authority",
        "@/lib/utils",
        "lucide-react"
      ],
      "exports": [
        "InputProps",
        "Input",
        "inputVariants"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/ui/input-otp.tsx",
      "domain": "other",
      "layer": "components",
      "size": 2083,
      "lines": 70,
      "complexity": 0,
      "dependencies": [
        "react",
        "input-otp",
        "lucide-react",
        "@/lib/utils"
      ],
      "exports": [
        "InputOTP",
        "InputOTPGroup",
        "InputOTPSlot",
        "InputOTPSeparator"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/index.ts",
      "domain": "other",
      "layer": "components",
      "size": 644,
      "lines": 25,
      "complexity": 0,
      "dependencies": [],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/hover-card.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1238,
      "lines": 30,
      "complexity": 0,
      "dependencies": [
        "react",
        "@radix-ui/react-hover-card",
        "@/lib/utils"
      ],
      "exports": [
        "HoverCard",
        "HoverCardTrigger",
        "HoverCardContent"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/hamburger.tsx",
      "domain": "other",
      "layer": "components",
      "size": 579,
      "lines": 23,
      "complexity": 0,
      "dependencies": [
        "react"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/frost-card.tsx",
      "domain": "other",
      "layer": "components",
      "size": 914,
      "lines": 32,
      "complexity": 0,
      "dependencies": [
        "react",
        "@/components/ui/card",
        "@/lib/utils"
      ],
      "exports": [
        "FrostCardProps",
        "FrostCard"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/form.tsx",
      "domain": "other",
      "layer": "components",
      "size": 3964,
      "lines": 170,
      "complexity": 1,
      "dependencies": [
        "react",
        "@radix-ui/react-label",
        "@radix-ui/react-slot",
        "@/lib/utils",
        "@/components/ui/label"
      ],
      "exports": [
        "useFormField",
        "Form",
        "FormItem",
        "FormLabel",
        "FormControl",
        "FormDescription",
        "FormMessage",
        "FormField"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/ui/file-drop-zone.tsx",
      "domain": "other",
      "layer": "components",
      "size": 6296,
      "lines": 192,
      "complexity": 3,
      "dependencies": [
        "react",
        "react-dropzone",
        "@/lib/utils",
        "lucide-react"
      ],
      "exports": [
        "FileDropZoneProps",
        "FileDropZone"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.1
    },
    {
      "path": "client/src/components/ui/feature-gate.tsx",
      "domain": "other",
      "layer": "components",
      "size": 4479,
      "lines": 141,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/hooks/useFeatureGates",
        "lucide-react",
        "@/components/ui/button",
        "wouter",
        "framer-motion",
        "react"
      ],
      "exports": [
        "FeatureGate"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/ui/error-display.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1399,
      "lines": 51,
      "complexity": 1,
      "dependencies": [
        "lucide-react",
        "@/components/ui/alert",
        "@/components/ui/button",
        "@/lib/utils"
      ],
      "exports": [
        "ErrorDisplay"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": true,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/ui/enhanced-loading-states.tsx",
      "domain": "other",
      "layer": "components",
      "size": 11776,
      "lines": 412,
      "complexity": 1,
      "dependencies": [
        "react",
        "framer-motion",
        "lucide-react",
        "@/lib/utils"
      ],
      "exports": [
        "EnhancedSpinner",
        "ThreadCardSkeleton",
        "ThreadListSkeleton",
        "LoadingOverlay",
        "SmartLoadingState",
        "ProgressIndicator"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/ui/enhanced-button.tsx",
      "domain": "other",
      "layer": "components",
      "size": 6628,
      "lines": 217,
      "complexity": 2,
      "dependencies": [
        "react",
        "framer-motion",
        "@radix-ui/react-slot",
        "class-variance-authority",
        "@/lib/utils",
        "@/hooks/useMediaQuery"
      ],
      "exports": [
        "EnhancedButtonProps",
        "EnhancedButton",
        "buttonVariants"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 86,
          "context": "const [ripples, setRipples] = React.useState<Array<{ id: number; x: number; y: number }>>([]);",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        }
      ],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": true,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 3
    },
    {
      "path": "client/src/components/ui/dropdown-menu.tsx",
      "domain": "other",
      "layer": "components",
      "size": 7375,
      "lines": 186,
      "complexity": 0,
      "dependencies": [
        "react",
        "@radix-ui/react-dropdown-menu",
        "lucide-react",
        "@/lib/utils"
      ],
      "exports": [
        "DropdownMenu",
        "DropdownMenuTrigger",
        "DropdownMenuContent",
        "DropdownMenuItem",
        "DropdownMenuCheckboxItem",
        "DropdownMenuRadioItem",
        "DropdownMenuLabel",
        "DropdownMenuSeparator",
        "DropdownMenuShortcut",
        "DropdownMenuGroup",
        "DropdownMenuPortal",
        "DropdownMenuSub",
        "DropdownMenuSubContent",
        "DropdownMenuSubTrigger",
        "DropdownMenuRadioGroup"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/drawer.tsx",
      "domain": "other",
      "layer": "components",
      "size": 2903,
      "lines": 101,
      "complexity": 0,
      "dependencies": [
        "react",
        "vaul",
        "@/lib/utils"
      ],
      "exports": [
        "Drawer",
        "DrawerPortal",
        "DrawerOverlay",
        "DrawerTrigger",
        "DrawerClose",
        "DrawerContent",
        "DrawerHeader",
        "DrawerFooter",
        "DrawerTitle",
        "DrawerDescription"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/dialog.tsx",
      "domain": "other",
      "layer": "components",
      "size": 3821,
      "lines": 105,
      "complexity": 0,
      "dependencies": [
        "react",
        "@radix-ui/react-dialog",
        "lucide-react",
        "@/lib/utils"
      ],
      "exports": [
        "Dialog",
        "DialogPortal",
        "DialogOverlay",
        "DialogClose",
        "DialogTrigger",
        "DialogContent",
        "DialogHeader",
        "DialogFooter",
        "DialogTitle",
        "DialogDescription"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/context-menu.tsx",
      "domain": "other",
      "layer": "components",
      "size": 7185,
      "lines": 188,
      "complexity": 0,
      "dependencies": [
        "react",
        "@radix-ui/react-context-menu",
        "lucide-react",
        "@/lib/utils"
      ],
      "exports": [
        "ContextMenu",
        "ContextMenuTrigger",
        "ContextMenuContent",
        "ContextMenuItem",
        "ContextMenuCheckboxItem",
        "ContextMenuRadioItem",
        "ContextMenuLabel",
        "ContextMenuSeparator",
        "ContextMenuShortcut",
        "ContextMenuGroup",
        "ContextMenuPortal",
        "ContextMenuSub",
        "ContextMenuSubContent",
        "ContextMenuSubTrigger",
        "ContextMenuRadioGroup"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/content-feed.tsx",
      "domain": "other",
      "layer": "components",
      "size": 11171,
      "lines": 351,
      "complexity": 2,
      "dependencies": [
        "react",
        "wouter",
        "@/lib/utils",
        "date-fns",
        "@/components/ui/badge",
        "@/components/ui/avatar",
        "@/components/ui/skeleton",
        "@/hooks/use-content"
      ],
      "exports": [
        "ContentFeedProps",
        "ContentFeed"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "ContentItem"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.9
    },
    {
      "path": "client/src/components/ui/content-area.tsx",
      "domain": "other",
      "layer": "components",
      "size": 11129,
      "lines": 357,
      "complexity": 3,
      "dependencies": [
        "react",
        "@/lib/utils",
        "@/components/ui/card",
        "@/components/ui/tab-switcher",
        "@/components/ui/content-feed",
        "@/hooks/use-auth",
        "@/contexts/content-feed-context",
        "lucide-react",
        "@/hooks/use-content",
        "@/hooks/use-content",
        "@db/types"
      ],
      "exports": [
        "ContentAreaProps",
        "ContentArea",
        "HomeContentArea",
        "ForumContentArea"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "ContentTab",
          "UseContentParams"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 1.1
    },
    {
      "path": "client/src/components/ui/command.tsx",
      "domain": "other",
      "layer": "components",
      "size": 4715,
      "lines": 142,
      "complexity": 0,
      "dependencies": [
        "react",
        "@radix-ui/react-dialog",
        "cmdk",
        "lucide-react",
        "@/lib/utils",
        "@/components/ui/dialog"
      ],
      "exports": [
        "Command",
        "CommandDialog",
        "CommandInput",
        "CommandList",
        "CommandEmpty",
        "CommandGroup",
        "CommandItem",
        "CommandShortcut",
        "CommandSeparator"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/collapsible.tsx",
      "domain": "other",
      "layer": "components",
      "size": 335,
      "lines": 12,
      "complexity": 0,
      "dependencies": [
        "@radix-ui/react-collapsible"
      ],
      "exports": [
        "Collapsible",
        "CollapsibleTrigger",
        "CollapsibleContent"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/checkbox.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1026,
      "lines": 27,
      "complexity": 0,
      "dependencies": [
        "react",
        "@radix-ui/react-checkbox",
        "lucide-react",
        "@/lib/utils"
      ],
      "exports": [
        "Checkbox "
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/chart.tsx",
      "domain": "other",
      "layer": "components",
      "size": 9053,
      "lines": 330,
      "complexity": 2,
      "dependencies": [
        "react",
        "recharts",
        "@/lib/utils"
      ],
      "exports": [
        "ChartConfig",
        "ChartContainer",
        "ChartTooltip",
        "ChartTooltipContent",
        "ChartLegend",
        "ChartLegendContent",
        "ChartStyle"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": true,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.9
    },
    {
      "path": "client/src/components/ui/carousel.tsx",
      "domain": "other",
      "layer": "components",
      "size": 5696,
      "lines": 241,
      "complexity": 1,
      "dependencies": [
        "react",
        "embla-carousel-react",
        "lucide-react",
        "@/lib/utils",
        "@/components/ui/button"
      ],
      "exports": [
        "type CarouselApi",
        "Carousel",
        "CarouselContent",
        "CarouselItem",
        "CarouselPrevious",
        "CarouselNext"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/ui/card.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1748,
      "lines": 57,
      "complexity": 0,
      "dependencies": [
        "react",
        "@/lib/utils"
      ],
      "exports": [
        "Card",
        "CardHeader",
        "CardFooter",
        "CardTitle",
        "CardDescription",
        "CardContent"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/candlestick-menu.tsx",
      "domain": "other",
      "layer": "components",
      "size": 3196,
      "lines": 117,
      "complexity": 1,
      "dependencies": [
        "react"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.7
    },
    {
      "path": "client/src/components/ui/calendar.tsx",
      "domain": "other",
      "layer": "components",
      "size": 2495,
      "lines": 62,
      "complexity": 1,
      "dependencies": [
        "react",
        "lucide-react",
        "react-day-picker",
        "@/lib/utils",
        "@/components/ui/button"
      ],
      "exports": [
        "CalendarProps",
        "Calendar "
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/ui/button.tsx",
      "domain": "other",
      "layer": "components",
      "size": 3609,
      "lines": 124,
      "complexity": 1,
      "dependencies": [
        "react",
        "@radix-ui/react-slot",
        "class-variance-authority",
        "@/lib/utils"
      ],
      "exports": [
        "buttonVariants",
        "ButtonProps",
        "Button "
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/ui/breadcrumb.tsx",
      "domain": "other",
      "layer": "components",
      "size": 2629,
      "lines": 102,
      "complexity": 0,
      "dependencies": [
        "react",
        "@radix-ui/react-slot",
        "lucide-react",
        "@/lib/utils"
      ],
      "exports": [
        "Breadcrumb",
        "BreadcrumbList",
        "BreadcrumbItem",
        "BreadcrumbLink",
        "BreadcrumbPage",
        "BreadcrumbSeparator",
        "BreadcrumbEllipsis"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/bookmark-button.tsx",
      "domain": "other",
      "layer": "components",
      "size": 3170,
      "lines": 121,
      "complexity": 2,
      "dependencies": [
        "react",
        "@tanstack/react-query",
        "lucide-react",
        "@/lib/utils",
        "@/lib/queryClient",
        "@/hooks/use-auth",
        "@/hooks/use-toast"
      ],
      "exports": [
        "BookmarkButton"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "threadId: number",
          "line": 12,
          "context": "threadId: number;",
          "suggestedFix": "ThreadId",
          "confidence": 0.8
        }
      ],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 1
    },
    {
      "path": "client/src/components/ui/avatar.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1444,
      "lines": 49,
      "complexity": 0,
      "dependencies": [
        "react",
        "@radix-ui/react-avatar",
        "@/lib/utils"
      ],
      "exports": [
        "Avatar",
        "AvatarImage",
        "AvatarFallback"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/aspect-ratio.tsx",
      "domain": "other",
      "layer": "components",
      "size": 143,
      "lines": 6,
      "complexity": 0,
      "dependencies": [
        "@radix-ui/react-aspect-ratio"
      ],
      "exports": [
        "AspectRatio "
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/animated-logo.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1100,
      "lines": 43,
      "complexity": 1,
      "dependencies": [
        "react"
      ],
      "exports": [
        "AnimatedLogo"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/ui/alert.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1515,
      "lines": 50,
      "complexity": 1,
      "dependencies": [
        "react",
        "class-variance-authority",
        "@/lib/utils"
      ],
      "exports": [
        "Alert",
        "AlertTitle",
        "AlertDescription"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/ui/alert-dialog.tsx",
      "domain": "other",
      "layer": "components",
      "size": 4250,
      "lines": 116,
      "complexity": 0,
      "dependencies": [
        "react",
        "@radix-ui/react-alert-dialog",
        "@/lib/utils",
        "@/components/ui/button"
      ],
      "exports": [
        "AlertDialog",
        "AlertDialogPortal",
        "AlertDialogOverlay",
        "AlertDialogTrigger",
        "AlertDialogContent",
        "AlertDialogHeader",
        "AlertDialogFooter",
        "AlertDialogTitle",
        "AlertDialogDescription",
        "AlertDialogAction",
        "AlertDialogCancel"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/accordion.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1923,
      "lines": 53,
      "complexity": 0,
      "dependencies": [
        "react",
        "@radix-ui/react-accordion",
        "lucide-react",
        "@/lib/utils"
      ],
      "exports": [
        "Accordion",
        "AccordionItem",
        "AccordionTrigger",
        "AccordionContent"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/ui/accessibility-enhancements.tsx",
      "domain": "other",
      "layer": "components",
      "size": 14714,
      "lines": 529,
      "complexity": 4,
      "dependencies": [
        "react",
        "framer-motion",
        "@/lib/utils",
        "@/hooks/use-local-storage",
        "@/components/ui/button",
        "@/components/ui/switch",
        "@/components/ui/slider",
        "@/components/ui/label"
      ],
      "exports": [
        "useAccessibility",
        "useFocusManagement",
        "SkipNavigation",
        "AccessibilityTrigger",
        "LiveRegion",
        "announce",
        "AccessibilityProvider",
        "FocusTrap"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.3
    },
    {
      "path": "client/src/components/ui/Container.tsx",
      "domain": "other",
      "layer": "components",
      "size": 726,
      "lines": 40,
      "complexity": 0,
      "dependencies": [
        "@/lib/utils",
        "react"
      ],
      "exports": [
        "Container"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/sidebar/related-content-widget.tsx",
      "domain": "other",
      "layer": "components",
      "size": 8525,
      "lines": 311,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/components/ui/card",
        "@/components/ui/button",
        "@/components/ui/badge",
        "@/components/ui/avatar",
        "@/contexts/content-feed-context",
        "@/lib/utils"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/sidebar/navigation-widget.tsx",
      "domain": "other",
      "layer": "components",
      "size": 5458,
      "lines": 203,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/components/ui/card",
        "@/components/ui/button",
        "@/components/ui/badge",
        "@/contexts/content-feed-context",
        "@/lib/utils"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/zone/PrimaryZoneCarousel.tsx",
      "domain": "other",
      "layer": "components",
      "size": 8789,
      "lines": 309,
      "complexity": 1,
      "dependencies": [
        "react",
        "framer-motion",
        "lucide-react",
        "@/components/ui/button",
        "@/components/forum/ZoneCard",
        "@/lib/utils",
        "@/hooks/useMediaQuery"
      ],
      "exports": [
        "PrimaryZoneCarouselProps",
        "PrimaryZoneCarousel "
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/preferences/social-preferences.tsx",
      "domain": "other",
      "layer": "components",
      "size": 16118,
      "lines": 524,
      "complexity": 1,
      "dependencies": [
        "react",
        "@tanstack/react-query",
        "@/lib/queryClient",
        "@/components/ui/card",
        "@/components/ui/button",
        "@/components/ui/switch",
        "@/components/ui/label",
        "@/components/ui/separator",
        "@/components/ui/badge",
        "@/hooks/use-toast"
      ],
      "exports": [
        "SocialPreferences"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.7
    },
    {
      "path": "client/src/components/preferences/referral-preferences.tsx",
      "domain": "other",
      "layer": "components",
      "size": 5992,
      "lines": 173,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/types/compat/user",
        "@/features/users/hooks/useUserReferrals",
        "@/components/ui/button",
        "@/components/ui/input",
        "@/components/ui/avatar",
        "@/components/ui/separator",
        "lucide-react",
        "@/components/ui/skeleton",
        "date-fns"
      ],
      "exports": [
        "ReferralPreferences"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "User"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/preferences/display-preferences.tsx",
      "domain": "other",
      "layer": "components",
      "size": 8889,
      "lines": 254,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/types/compat/user",
        "@/components/ui/button",
        "@/components/ui/card",
        "@/components/ui/label",
        "@/components/ui/radio-group",
        "@/components/ui/switch",
        "lucide-react",
        "@/hooks/preferences/useUserSettings",
        "@/hooks/preferences/useUpdateUserSettings"
      ],
      "exports": [
        "DisplayPreferences"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "User"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 1.7
    },
    {
      "path": "client/src/components/preferences/account-preferences.tsx",
      "domain": "other",
      "layer": "components",
      "size": 8118,
      "lines": 269,
      "complexity": 2,
      "dependencies": [
        "react",
        "@/types/compat/user",
        "@/components/ui/button",
        "@/components/ui/input",
        "@/components/ui/switch",
        "@/components/ui/label",
        "@/components/ui/card",
        "@/components/ui/separator",
        "lucide-react",
        "@/components/ui/alert",
        "@/hooks/preferences/useUserSettings"
      ],
      "exports": [
        "AccountPreferences"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": [
          "User"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 1.4
    },
    {
      "path": "client/src/components/preferences/PreferencesToggle.tsx",
      "domain": "other",
      "layer": "components",
      "size": 920,
      "lines": 43,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/components/ui/switch",
        "@/components/ui/label"
      ],
      "exports": [
        "PreferencesToggle"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/preferences/PreferencesTextarea.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1215,
      "lines": 55,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/components/ui/textarea",
        "@/components/ui/label"
      ],
      "exports": [
        "PreferencesTextarea"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/preferences/PreferencesSelect.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1580,
      "lines": 69,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/components/ui/label"
      ],
      "exports": [
        "PreferencesSelect"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/preferences/PreferencesInput.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1235,
      "lines": 55,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/components/ui/input",
        "@/components/ui/label"
      ],
      "exports": [
        "PreferencesInput"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/preferences/PreferencesGroup.tsx",
      "domain": "other",
      "layer": "components",
      "size": 753,
      "lines": 28,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/components/ui/separator"
      ],
      "exports": [
        "PreferencesGroup"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/preferences/PreferencesCard.tsx",
      "domain": "other",
      "layer": "components",
      "size": 767,
      "lines": 27,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/components/ui/card"
      ],
      "exports": [
        "PreferencesCard"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/skeletons/ZoneCardSkeleton.tsx",
      "domain": "other",
      "layer": "components",
      "size": 367,
      "lines": 13,
      "complexity": 0,
      "dependencies": [
        "react",
        "@/components/ui/skeleton"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/skeletons/HomePageSkeleton.tsx",
      "domain": "other",
      "layer": "components",
      "size": 516,
      "lines": 21,
      "complexity": 1,
      "dependencies": [
        "react"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/platform-energy/index.ts",
      "domain": "other",
      "layer": "components",
      "size": 345,
      "lines": 15,
      "complexity": 0,
      "dependencies": [],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/navigation/nav-item.tsx",
      "domain": "other",
      "layer": "components",
      "size": 2495,
      "lines": 106,
      "complexity": 1,
      "dependencies": [
        "react",
        "wouter",
        "@/lib/utils"
      ],
      "exports": [
        "NavItemProps",
        "NavItem"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/navigation/mobile-nav-bar.tsx",
      "domain": "other",
      "layer": "components",
      "size": 2670,
      "lines": 112,
      "complexity": 1,
      "dependencies": [
        "react",
        "wouter",
        "@/lib/utils",
        "@/hooks/use-auth.tsx"
      ],
      "exports": [
        "MobileNavBarProps",
        "MobileNavBar"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "NavItemProps"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/paths/path-progress.tsx",
      "domain": "other",
      "layer": "components",
      "size": 2793,
      "lines": 106,
      "complexity": 2,
      "dependencies": [
        "react",
        "@/components/ui/progress",
        "@shared/path-config",
        "@/lib/utils",
        "lucide-react"
      ],
      "exports": [
        "PathProgress",
        "getPathLevel",
        "getProgressPercentage"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.9
    },
    {
      "path": "client/src/components/media/MediaAsset.tsx",
      "domain": "other",
      "layer": "components",
      "size": 926,
      "lines": 29,
      "complexity": 1,
      "dependencies": [
        "react",
        "@lottiefiles/dotlottie-react",
        "@/features/admin/services/media-api.service"
      ],
      "exports": [
        "MediaAsset"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "MediaType"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/identity/path-progress.tsx",
      "domain": "other",
      "layer": "components",
      "size": 165,
      "lines": 7,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "PathProgress",
        "getPathLevel",
        "getProgressPercentage"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/identity/index.ts",
      "domain": "other",
      "layer": "components",
      "size": 118,
      "lines": 5,
      "complexity": 0,
      "dependencies": [],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/layout/site-layout-wrapper.tsx",
      "domain": "other",
      "layer": "components",
      "size": 573,
      "lines": 20,
      "complexity": 0,
      "dependencies": [
        "react",
        "@/components/header",
        "@/components/footer"
      ],
      "exports": [
        "SiteLayoutWrapper"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/layout/sidebar.tsx",
      "domain": "other",
      "layer": "components",
      "size": 144,
      "lines": 3,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "Sidebar as default",
        "Sidebar"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/layout/hero-section.tsx",
      "domain": "other",
      "layer": "components",
      "size": 5883,
      "lines": 149,
      "complexity": 1,
      "dependencies": [
        "react",
        "wouter",
        "lucide-react",
        "@/components/ui/button",
        "framer-motion",
        "@/config/ui.config",
        "@/config/ui.config"
      ],
      "exports": [
        "HeroSection"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "HeroQuote"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/layout/announcement-ticker.tsx",
      "domain": "other",
      "layer": "components",
      "size": 7068,
      "lines": 239,
      "complexity": 3,
      "dependencies": [
        "react",
        "@tanstack/react-query",
        "axios",
        "wouter"
      ],
      "exports": [
        "AnnouncementTicker"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 20,
          "context": "id: number;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        }
      ],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": true,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 2.4000000000000004
    },
    {
      "path": "client/src/components/layout/WidgetGallery.tsx",
      "domain": "other",
      "layer": "components",
      "size": 7396,
      "lines": 245,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/config/widgetRegistry",
        "@/stores/useLayoutStore",
        "@/components/ui/button",
        "@/components/ui/input",
        "@/components/ui/badge",
        "@/components/ui/tabs",
        "@/components/ui/scroll-area",
        "lucide-react",
        "@/lib/utils",
        "uuid"
      ],
      "exports": [
        "WidgetGallery"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.7
    },
    {
      "path": "client/src/components/layout/SlotRenderer.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1282,
      "lines": 37,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/stores/useLayoutStore"
      ],
      "exports": [
        "SlotRenderer"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.7
    },
    {
      "path": "client/src/components/layout/SidebarNavigation.tsx",
      "domain": "other",
      "layer": "components",
      "size": 11469,
      "lines": 362,
      "complexity": 3,
      "dependencies": [
        "react",
        "wouter",
        "@/contexts/ForumStructureContext",
        "@/navigation/forumNav",
        "@/hooks/use-local-storage",
        "@/lib/utils",
        "@/components/ui/badge",
        "framer-motion"
      ],
      "exports": [
        "SidebarNavigation"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 2.1
    },
    {
      "path": "client/src/components/layout/ResponsiveLayoutWrapper.tsx",
      "domain": "other",
      "layer": "components",
      "size": 7821,
      "lines": 253,
      "complexity": 2,
      "dependencies": [
        "react",
        "@/stores/useLayoutStore",
        "@/components/ui/button",
        "lucide-react",
        "@/lib/utils",
        "@/hooks/use-media-query",
        "@/config/featureFlags"
      ],
      "exports": [
        "ResponsiveLayoutWrapper"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.9
    },
    {
      "path": "client/src/components/layout/LayoutRenderer.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1300,
      "lines": 37,
      "complexity": 0,
      "dependencies": [
        "react",
        "@/stores/useLayoutStore",
        "@/config/pageSlotMap"
      ],
      "exports": [
        "LayoutRenderer"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/layout/AppSidebar.tsx",
      "domain": "other",
      "layer": "components",
      "size": 5274,
      "lines": 135,
      "complexity": 3,
      "dependencies": [
        "react",
        "wouter",
        "@/components/ui/card",
        "@/components/ui/avatar",
        "@/components/ui/badge",
        "@/lib/utils",
        "wouter",
        "@/features/forum/components/HierarchicalZoneNav",
        "@/constants/routes",
        "@/components/widgets/ProfileCard",
        "@/hooks/use-auth",
        "@db/types"
      ],
      "exports": [
        "Sidebar"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "CategoryId",
          "ForumId"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 1.1
    },
    {
      "path": "client/src/components/header/index.ts",
      "domain": "other",
      "layer": "components",
      "size": 1107,
      "lines": 32,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "SiteHeader ",
        "HeaderProvider",
        "useHeader",
        "Logo ",
        "PrimaryNav ",
        "SearchBox ",
        "UserMenu ",
        "NotificationButton ",
        "WalletButton ",
        "AuthButtons ",
        "AdminButton ",
        "MobileNav ",
        "NavLink ",
        "HeaderThemeWrapper ",
        "HeaderPluginSlot",
        "registerHeaderPlugin",
        "unregisterHeaderPlugin",
        "primaryNavigation",
        "createUserMenuItems",
        "filterNavItems"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/header/SiteHeader.tsx",
      "domain": "other",
      "layer": "components",
      "size": 2971,
      "lines": 102,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/components/ui/candlestick-menu",
        "@/components/economy/wallet/WalletSheet",
        "@/hooks/wrappers/use-auth-wrapper"
      ],
      "exports": [
        "SiteHeader"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/header/SearchBox.tsx",
      "domain": "other",
      "layer": "components",
      "size": 692,
      "lines": 24,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/components/icons/iconRenderer",
        "@/components/ui/input"
      ],
      "exports": [
        "SearchBox"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/header/PrimaryNav.tsx",
      "domain": "other",
      "layer": "components",
      "size": 5234,
      "lines": 182,
      "complexity": 2,
      "dependencies": [
        "react",
        "wouter",
        "gsap",
        "@/config/navigation"
      ],
      "exports": [
        "PrimaryNav"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.9
    },
    {
      "path": "client/src/components/header/NavLink.tsx",
      "domain": "other",
      "layer": "components",
      "size": 916,
      "lines": 52,
      "complexity": 1,
      "dependencies": [
        "react",
        "wouter",
        "@/config/navigation"
      ],
      "exports": [
        "NavLink"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/header/MobileNav.tsx",
      "domain": "other",
      "layer": "components",
      "size": 6264,
      "lines": 186,
      "complexity": 1,
      "dependencies": [
        "react",
        "wouter",
        "@/components/icons/iconRenderer",
        "@/components/ui/button",
        "@/components/ui/avatar",
        "@/config/navigation"
      ],
      "exports": [
        "MobileNav"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/header/Logo.tsx",
      "domain": "other",
      "layer": "components",
      "size": 393,
      "lines": 18,
      "complexity": 1,
      "dependencies": [
        "wouter"
      ],
      "exports": [
        "Logo"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/header/HeaderThemeWrapper.tsx",
      "domain": "other",
      "layer": "components",
      "size": 837,
      "lines": 32,
      "complexity": 1,
      "dependencies": [
        "react"
      ],
      "exports": [
        "HeaderThemeWrapper"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/header/HeaderPluginSlot.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1314,
      "lines": 52,
      "complexity": 1,
      "dependencies": [
        "react"
      ],
      "exports": [
        "registerHeaderPlugin",
        "unregisterHeaderPlugin",
        "HeaderPluginSlot"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/header/HeaderContext.tsx",
      "domain": "other",
      "layer": "components",
      "size": 3308,
      "lines": 120,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/hooks/wrappers/use-auth-wrapper"
      ],
      "exports": [
        "AuthStatus",
        "HeaderUser",
        "HeaderTheme",
        "HeaderContextValue",
        "HeaderProvider",
        "useHeader"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/gamification/progression-card.tsx",
      "domain": "other",
      "layer": "components",
      "size": 8835,
      "lines": 268,
      "complexity": 1,
      "dependencies": [
        "@/lib/utils",
        "@/components/ui/card",
        "@/components/ui/progress",
        "@/components/ui/badge",
        "@/components/ui/button",
        "@/components/ui/separator",
        "@/lib/utils",
        "lucide-react",
        "framer-motion",
        "wouter",
        "@/features/gamification/services/gamification-api.service"
      ],
      "exports": [
        "ProgressionCard"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "UserProgression"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/gamification/index.ts",
      "domain": "other",
      "layer": "components",
      "size": 1053,
      "lines": 39,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "LevelDisplay",
        "LevelBadge",
        "ProgressionCard ",
        "ProfileGamificationWidget ",
        "AchievementCard ",
        "AchievementGrid ",
        "AchievementUnlockModal ",
        "MissionCard ",
        "MissionDashboard ",
        "Leaderboard ",
        "LevelUpModal "
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/fixtures/fixture-preview.tsx",
      "domain": "other",
      "layer": "components",
      "size": 10317,
      "lines": 359,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/components/ui/card",
        "@/components/ui/badge",
        "@/components/ui/button",
        "@/components/ui/avatar",
        "@/components/ui/tabs",
        "date-fns"
      ],
      "exports": [
        "FixturePreview"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.7
    },
    {
      "path": "client/src/components/fixtures/fixture-builder.tsx",
      "domain": "other",
      "layer": "components",
      "size": 12798,
      "lines": 451,
      "complexity": 2,
      "dependencies": [
        "react",
        "@/components/ui/card",
        "@/components/ui/button",
        "@/components/ui/input",
        "@/components/ui/label",
        "@/components/ui/textarea",
        "@/components/ui/switch",
        "@/components/ui/badge",
        "@/components/ui/tabs",
        "lucide-react",
        "sonner"
      ],
      "exports": [
        "FixtureBuilder"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.9
    },
    {
      "path": "client/src/components/footer/index.ts",
      "domain": "other",
      "layer": "components",
      "size": 556,
      "lines": 19,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "SiteFooter ",
        "LiveStats ",
        "FooterBrand ",
        "FooterSection ",
        "RandomTagline ",
        "footerNavigation",
        "getNavigationSection",
        "getResourcesSection",
        "getCommunitySection",
        "getLegalSection"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/footer/SiteFooter.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1916,
      "lines": 53,
      "complexity": 1,
      "dependencies": [
        "react",
        "framer-motion",
        "@/config/footer-navigation"
      ],
      "exports": [
        "SiteFooter"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/footer/RandomTagline.tsx",
      "domain": "other",
      "layer": "components",
      "size": 2761,
      "lines": 76,
      "complexity": 1,
      "dependencies": [
        "react",
        "framer-motion"
      ],
      "exports": [
        "RandomTagline"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/footer/LiveStats.tsx",
      "domain": "other",
      "layer": "components",
      "size": 3559,
      "lines": 116,
      "complexity": 1,
      "dependencies": [
        "react",
        "framer-motion",
        "lucide-react"
      ],
      "exports": [
        "LiveStats"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/footer/FooterSection.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1320,
      "lines": 50,
      "complexity": 1,
      "dependencies": [
        "react",
        "framer-motion",
        "wouter",
        "@/config/footer-navigation"
      ],
      "exports": [
        "FooterSection"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "FooterLink"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/footer/FooterBrand.tsx",
      "domain": "other",
      "layer": "components",
      "size": 661,
      "lines": 25,
      "complexity": 1,
      "dependencies": [
        "react",
        "framer-motion"
      ],
      "exports": [
        "FooterBrand"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/dev/dev-playground-shortcut.tsx",
      "domain": "other",
      "layer": "components",
      "size": 567,
      "lines": 21,
      "complexity": 0,
      "dependencies": [
        "wouter",
        "lucide-react"
      ],
      "exports": [
        "DevPlaygroundShortcut"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/icons/types.ts",
      "domain": "other",
      "layer": "components",
      "size": 852,
      "lines": 28,
      "complexity": 0,
      "dependencies": [
        "lucide-react"
      ],
      "exports": [
        "Theme",
        "IconConfig",
        "IconMap"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "LucideIcon"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 1.5
    },
    {
      "path": "client/src/components/icons/iconRenderer.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1866,
      "lines": 78,
      "complexity": 2,
      "dependencies": [
        "react",
        "lucide-react",
        "react-lottie-player"
      ],
      "exports": [
        "IconRendererProps",
        "IconRenderer"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": true,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": [
          "LucideIcon"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 1.0999999999999999
    },
    {
      "path": "client/src/components/icons/iconMap.config.ts",
      "domain": "other",
      "layer": "components",
      "size": 2240,
      "lines": 186,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "iconMap",
        "IconKey"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/icons/iconLoader.ts",
      "domain": "other",
      "layer": "components",
      "size": 196,
      "lines": 7,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "getIconConfig"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "IconConfig"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/editor/suggestion.ts",
      "domain": "other",
      "layer": "components",
      "size": 6957,
      "lines": 252,
      "complexity": 3,
      "dependencies": [
        "@tiptap/react",
        "tippy.js",
        "@/lib/queryClient"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 2.1
    },
    {
      "path": "client/src/components/editor/rich-text-editor.tsx",
      "domain": "other",
      "layer": "components",
      "size": 21059,
      "lines": 728,
      "complexity": 3,
      "dependencies": [
        "react",
        "react-dom/client",
        "@tiptap/react",
        "@tiptap/starter-kit",
        "@tiptap/extension-underline",
        "@tiptap/extension-link",
        "@tiptap/extension-image",
        "@tiptap/extension-placeholder",
        "@tiptap/extension-text-style",
        "@tiptap/extension-font-family",
        "@tiptap/extension-color",
        "@tiptap/extension-text-align",
        "@tiptap/extension-code-block-lowlight",
        "lowlight",
        "@tiptap/extension-mention",
        "@/components/ui/button",
        "@/components/ui/tooltip",
        "@/lib/utils"
      ],
      "exports": [
        "RichTextEditorProps",
        "RichTextEditor"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": true,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.3
    },
    {
      "path": "client/src/components/editor/gif-picker.tsx",
      "domain": "other",
      "layer": "components",
      "size": 10602,
      "lines": 372,
      "complexity": 4,
      "dependencies": [
        "react",
        "@/lib/queryClient",
        "@/components/ui/button",
        "@/components/ui/input",
        "@/components/ui/tabs",
        "lucide-react"
      ],
      "exports": [
        "GifPicker"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.3
    },
    {
      "path": "client/src/components/editor/enhanced-gif-picker.tsx",
      "domain": "other",
      "layer": "components",
      "size": 13834,
      "lines": 455,
      "complexity": 5,
      "dependencies": [
        "react",
        "@/lib/queryClient",
        "@/components/ui/button",
        "@/components/ui/input",
        "@/components/ui/tabs",
        "lucide-react"
      ],
      "exports": [
        "EnhancedGifPicker"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 2.5
    },
    {
      "path": "client/src/components/dashboard/UpcomingEventsWidget.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1345,
      "lines": 50,
      "complexity": 1,
      "dependencies": [
        "react",
        "lucide-react",
        "@/components/ui/card"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/dashboard/DailyTasksWidget.tsx",
      "domain": "other",
      "layer": "components",
      "size": 2016,
      "lines": 53,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/hooks/useDailyTasks",
        "lucide-react",
        "@/components/ui/progress",
        "@/components/ui/card"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/common/index.ts",
      "domain": "other",
      "layer": "components",
      "size": 324,
      "lines": 9,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "LoadingCard ",
        "StandardErrorDisplay ",
        "StatsBar ",
        "default as BackToHomeButton "
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/common/StatsBar.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1960,
      "lines": 80,
      "complexity": 1,
      "dependencies": [
        "react",
        "framer-motion",
        "@/config/brand.config",
        "@/lib/utils"
      ],
      "exports": [
        "StatItem",
        "StatsBar"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/common/StandardErrorDisplay.tsx",
      "domain": "other",
      "layer": "components",
      "size": 814,
      "lines": 37,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/components/ui/error-display",
        "@/config/brand.config"
      ],
      "exports": [
        "StandardErrorDisplay"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": true,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/common/LoadingCard.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1557,
      "lines": 64,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/components/ui/loader",
        "@/config/brand.config",
        "@/lib/utils"
      ],
      "exports": [
        "LoadingCard"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/common/Breadcrumb.tsx",
      "domain": "other",
      "layer": "components",
      "size": 1902,
      "lines": 69,
      "complexity": 1,
      "dependencies": [
        "react",
        "wouter"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/common/BackToHomeButton.tsx",
      "domain": "other",
      "layer": "components",
      "size": 713,
      "lines": 30,
      "complexity": 1,
      "dependencies": [
        "react",
        "framer-motion",
        "wouter",
        "@/components/ui/button",
        "lucide-react"
      ],
      "exports": [
        "BackToHomeButton"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/errors/NetworkError.tsx",
      "domain": "other",
      "layer": "components",
      "size": 6416,
      "lines": 216,
      "complexity": 3,
      "dependencies": [
        "react",
        "lucide-react",
        "@/components/ui/button",
        "@/components/ui/card",
        "@/components/ui/alert"
      ],
      "exports": [
        "NetworkError"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.1
    },
    {
      "path": "client/src/components/errors/ErrorBoundary.tsx",
      "domain": "other",
      "layer": "components",
      "size": 6839,
      "lines": 230,
      "complexity": 2,
      "dependencies": [
        "react",
        "lucide-react",
        "@/components/ui/button",
        "@/components/ui/card"
      ],
      "exports": [
        "ErrorBoundary",
        "withErrorBoundary",
        "useErrorHandler"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.9
    },
    {
      "path": "server/src/core/routes/api/status.ts",
      "domain": "other",
      "layer": "routes",
      "size": 449,
      "lines": 17,
      "complexity": 1,
      "dependencies": [
        "express",
        "@db"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 0.7
    },
    {
      "path": "server/src/core/routes/api/index.ts",
      "domain": "other",
      "layer": "routes",
      "size": 280,
      "lines": 11,
      "complexity": 0,
      "dependencies": [
        "express"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/pages/ui-playground/animations/FadeInListDemo.tsx",
      "domain": "other",
      "layer": "pages",
      "size": 485,
      "lines": 23,
      "complexity": 0,
      "dependencies": [
        "react",
        "framer-motion"
      ],
      "exports": [
        "FadeInListDemo"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/pages/ui-playground/animations/CardFlipDemo.tsx",
      "domain": "other",
      "layer": "pages",
      "size": 1157,
      "lines": 45,
      "complexity": 0,
      "dependencies": [
        "react",
        "framer-motion",
        "@/pages/dev/DemoCard",
        "react"
      ],
      "exports": [
        "CardFlipDemo"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/pages/ui-playground/animations/ButtonPulseDemo.tsx",
      "domain": "other",
      "layer": "pages",
      "size": 672,
      "lines": 28,
      "complexity": 0,
      "dependencies": [
        "react",
        "react",
        "@/components/ui/button",
        "@/pages/dev/DemoCard"
      ],
      "exports": [
        "ButtonPulseDemo"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.5
    },
    {
      "path": "client/src/pages/ui-playground/sections/FontsSection.tsx",
      "domain": "other",
      "layer": "pages",
      "size": 10407,
      "lines": 298,
      "complexity": 1,
      "dependencies": [
        "react",
        "react",
        "@/pages/dev",
        "@/config/fonts.config",
        "@/components/ui/card",
        "@/components/ui/button",
        "@/components/ui/input",
        "@/components/ui/badge",
        "@/components/ui/tabs",
        "lucide-react"
      ],
      "exports": [
        "FontsSection"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/pages/ui-playground/sections/ColorsSection.tsx",
      "domain": "other",
      "layer": "pages",
      "size": 2015,
      "lines": 63,
      "complexity": 0,
      "dependencies": [
        "react",
        "@/pages/dev"
      ],
      "exports": [
        "ColorsSection"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/pages/ui-playground/sections/CardsSection.tsx",
      "domain": "other",
      "layer": "pages",
      "size": 2043,
      "lines": 61,
      "complexity": 0,
      "dependencies": [
        "react",
        "@/pages/dev",
        "@/components/ui/card",
        "lucide-react",
        "@/components/ui/skeleton",
        "@/components/ui/badge"
      ],
      "exports": [
        "CardsSection"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/pages/ui-playground/sections/ButtonsSection.tsx",
      "domain": "other",
      "layer": "pages",
      "size": 2707,
      "lines": 94,
      "complexity": 0,
      "dependencies": [
        "react",
        "@/pages/dev",
        "@/components/ui/button",
        "lucide-react"
      ],
      "exports": [
        "ButtonsSection"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/pages/ui-playground/sections/AnimationsSection.tsx",
      "domain": "other",
      "layer": "pages",
      "size": 523,
      "lines": 18,
      "complexity": 0,
      "dependencies": [
        "react",
        "@/pages/dev"
      ],
      "exports": [
        "AnimationsSection"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/features/gamification/services/gamification-api.service.ts",
      "domain": "other",
      "layer": "services",
      "size": 7954,
      "lines": 361,
      "complexity": 5,
      "dependencies": [
        "@/lib/queryClient"
      ],
      "exports": [
        "LevelInfo",
        "UserProgression",
        "Achievement",
        "UserAchievement",
        "Mission",
        "MissionProgress",
        "LeaderboardEntry",
        "GamificationStats",
        "GamificationDashboard",
        "GamificationApiService",
        "gamificationApi"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 58,
          "context": "id: number;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 87,
          "context": "id: number;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 106,
          "context": "id: number;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 34,
          "context": "userId: number;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 77,
          "context": "userId: number;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 107,
          "context": "userId: number;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 117,
          "context": "userId: number;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 242,
          "context": "async checkAndAwardAchievements(userId: number, actionType: string, metadata?: any) {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 314,
          "context": "async updateMissionProgress(userId: number, actionType: string, metadata?: any) {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        }
      ],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": true,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "high",
      "migrationEffort": 5.4
    },
    {
      "path": "client/src/features/dictionary/services/dictionaryApi.ts",
      "domain": "other",
      "layer": "services",
      "size": 604,
      "lines": 12,
      "complexity": 0,
      "dependencies": [
        "@/lib/queryClient"
      ],
      "exports": [
        "dictionaryApi"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 8,
          "context": "moderate: (id: number, status: 'approved' | 'rejected') =>",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 10,
          "context": "upvote: (id: number) => apiRequest({ url: `/api/dictionary/${id}/upvote`, method: 'POST' })",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        }
      ],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": true,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 3.7
    },
    {
      "path": "client/src/features/activity/hooks/useActivityFeed.ts",
      "domain": "other",
      "layer": "hooks",
      "size": 1695,
      "lines": 73,
      "complexity": 1,
      "dependencies": [
        "@tanstack/react-query",
        "@/features/activity/services/activityApi",
        "@/hooks/use-auth"
      ],
      "exports": [
        "useActivityFeed",
        "useAdminActivityFeed",
        "useUserActivityFeed"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/features/activity/components/PaginatedActivityFeed.tsx",
      "domain": "other",
      "layer": "components",
      "size": 10065,
      "lines": 342,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/features/activity/hooks/useActivityFeed",
        "@/features/activity/services/activityApi",
        "date-fns"
      ],
      "exports": [
        "PaginatedActivityFeed"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/features/activity/components/ActivityFeed.tsx",
      "domain": "other",
      "layer": "components",
      "size": 7095,
      "lines": 256,
      "complexity": 1,
      "dependencies": [
        "react",
        "@/features/activity/hooks/useActivityFeed",
        "@/features/activity/services/activityApi",
        "date-fns"
      ],
      "exports": [
        "ActivityFeed"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/features/activity/services/activityApi.ts",
      "domain": "other",
      "layer": "services",
      "size": 4077,
      "lines": 172,
      "complexity": 4,
      "dependencies": [
        "@/lib/queryClient"
      ],
      "exports": [
        "EventLog",
        "EventLogFilters",
        "EventLogPagination",
        "ApiResponse",
        "activityApi"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 1.5
    },
    {
      "path": "client/src/components/platform-energy/stats/platform-stats-widget.tsx",
      "domain": "other",
      "layer": "components",
      "size": 4864,
      "lines": 175,
      "complexity": 2,
      "dependencies": [
        "@tanstack/react-query",
        "@/components/ui/card",
        "@/components/ui/skeleton",
        "lucide-react"
      ],
      "exports": [
        "PlatformStatsWidget"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.10000000000000003
    }
  ],
  "totalIssues": 180,
  "avgComplexity": 1.4142857142857144,
  "migrationEffort": 400.1999999999988,
  "dependencies": [
    "@playwright/test",
    "@degentalk/db/types",
    "@db",
    "@aws-sdk/client-s3",
    "@schema",
    "@shared/path-config",
    "@schema/system/analyticsEvents",
    "@db/types",
    "@neondatabase/serverless",
    "@vitejs/plugin-react",
    "@replit/vite-plugin-runtime-error-modal",
    "@tailwindcss/typography",
    "@tailwindcss/container-queries",
    "@db/types/id.types",
    "@fixtures",
    "@server/src/core/repository",
    "@server/src/core/logger",
    "@server/src/utils/slugify",
    "@server/src/lib/db",
    "@/config/brand.config",
    "@/core/constants",
    "@/components/ui/toaster",
    "@/components/header",
    "@/components/auth/protected-route",
    "@/components/dev/dev-role-switcher",
    "@/components/dev/dev-playground-shortcut",
    "@/components/forum/LegacyForumRedirect",
    "@/db/types",
    "@faker-js/faker",
    "@server/src/core/cache.service",
    "@server/src/utils/environment",
    "@server/src/middleware/dev-security.middleware",
    "@supabase/supabase-js",
    "@tanstack/react-query",
    "@/hooks/use-auth",
    "@/hooks/use-purchase-modal",
    "@/contexts/shoutbox-context",
    "@/contexts/ForumStructureContext",
    "@/contexts/ForumThemeProvider",
    "@/components/ui/tooltip",
    "@/contexts/ProfileCardContext",
    "@/contexts/MotionContext",
    "@/lib/queryClient",
    "@/contexts/ForumOrderingContext",
    "@/contexts/XpToastContext",
    "@/contexts/LevelUpContext",
    "@/components/messages/WhispersInbox",
    "@/components/messages/WhisperButton",
    "@/hooks/use-messages",
    "@/components/ui/card",
    "@/components/ui/badge",
    "@/components/messages/icons/MessageSquareWave",
    "@/pages/dev",
    "@/pages/not-found",
    "@/layout/primitives",
    "@/pages/ui-playground/sections/ButtonsSection",
    "@/pages/ui-playground/sections/CardsSection",
    "@/pages/ui-playground/sections/ColorsSection",
    "@/pages/ui-playground/sections/AvatarBadgesSection",
    "@/pages/ui-playground/sections/AnimationsSection",
    "@/pages/ui-playground/sections/FontsSection",
    "@/lib/utils",
    "@/components/ui/button",
    "@/components/ui/tabs",
    "@/components/ui/alert",
    "@/hooks/use-gamification",
    "@/features/gamification/services/gamification-api.service",
    "@/components/layout/hero-section",
    "@/components/layout/announcement-ticker",
    "@/components/footer",
    "@/components/layout/ResponsiveLayoutWrapper",
    "@/components/zone/PrimaryZoneCarousel",
    "@/layout/primitives/Wide",
    "@/components/ui/content-area",
    "@/contexts/content-feed-context",
    "@/utils/spacing-constants",
    "@/features/users/hooks",
    "@/hooks/useZoneStats",
    "@/utils/forumStats",
    "@/components/skeletons/HomePageSkeleton",
    "@/components/forum/ZoneCard",
    "@/components/forum/ForumErrorBoundary",
    "@/components/ui/input",
    "@/components/fixtures/fixture-builder",
    "@/components/fixtures/fixture-preview",
    "@/components/ui/loader",
    "@/components/ui/error-display",
    "@/components/users/UserDirectoryTable",
    "@/components/users/UserFilters",
    "@/lib/roles",
    "@/constants/env",
    "@/constants/websocket-disabled",
    "@/types/canonical.types",
    "@/config/featureFlags",
    "@/lib/api-request",
    "@/hooks/use-toast",
    "@/hooks/useUserCosmetics",
    "@/hooks/useUserXP",
    "@/config/publicConfig",
    "@/types/thread.types",
    "@/constants/routes",
    "@/hooks/use-shop-items",
    "@/hooks/use-vault-items",
    "@/types/notifications",
    "@/hooks/use-content",
    "@/stores/useLayoutStore",
    "@/components/icons/iconRenderer",
    "@/components/forum/CanonicalZoneGrid",
    "@/features/forum/components/HierarchicalZoneNav",
    "@/components/ui/skeleton",
    "@/features/forum/components/ForumListItem",
    "@/components/navigation/ForumBreadcrumbs",
    "@/components/forum/ThreadCard",
    "@/features/forum/hooks/useForumQueries",
    "@/components/ui/separator",
    "@/components/ui/pagination",
    "@/components/ui/label",
    "@/hooks/use-auth.tsx",
    "@/hooks/useSearchParams",
    "@/components/preferences/profile-preferences",
    "@/components/preferences/account-preferences",
    "@/components/preferences/notification-preferences",
    "@/components/preferences/display-preferences",
    "@/components/preferences/session-preferences",
    "@/components/preferences/referral-preferences",
    "@/components/preferences/social-preferences",
    "@/components/ui/container",
    "@/stores/usePlaygroundControls",
    "@/features/dictionary/components/AddWordModal",
    "@/features/dictionary/services/dictionaryApi",
    "@/types/inventory",
    "@testing-library/react",
    "@/providers/root-provider",
    "@/services/error.service",
    "@/components/ui/avatar",
    "@/components/ui/scroll-area",
    "@/hooks/useFollowing",
    "@radix-ui/react-toggle",
    "@radix-ui/react-toggle-group",
    "@/components/ui/toggle",
    "@radix-ui/react-toast",
    "@radix-ui/react-tabs",
    "@radix-ui/react-switch",
    "@/lib/utils/animateNumber",
    "@radix-ui/react-slider",
    "@radix-ui/react-slot",
    "@/hooks/use-mobile",
    "@radix-ui/react-dialog",
    "@radix-ui/react-separator",
    "@radix-ui/react-select",
    "@radix-ui/react-scroll-area",
    "@radix-ui/react-radio-group",
    "@radix-ui/react-progress",
    "@radix-ui/react-popover",
    "@radix-ui/react-navigation-menu",
    "@radix-ui/react-menubar",
    "@radix-ui/react-dropdown-menu",
    "@radix-ui/react-label",
    "@radix-ui/react-hover-card",
    "@/hooks/useFeatureGates",
    "@/hooks/useMediaQuery",
    "@radix-ui/react-context-menu",
    "@/components/ui/tab-switcher",
    "@/components/ui/content-feed",
    "@/components/ui/dialog",
    "@radix-ui/react-collapsible",
    "@radix-ui/react-checkbox",
    "@radix-ui/react-avatar",
    "@radix-ui/react-aspect-ratio",
    "@radix-ui/react-alert-dialog",
    "@radix-ui/react-accordion",
    "@/hooks/use-local-storage",
    "@/components/ui/switch",
    "@/components/ui/slider",
    "@/types/compat/user",
    "@/features/users/hooks/useUserReferrals",
    "@/components/ui/radio-group",
    "@/hooks/preferences/useUserSettings",
    "@/hooks/preferences/useUpdateUserSettings",
    "@/components/ui/textarea",
    "@/components/ui/progress",
    "@lottiefiles/dotlottie-react",
    "@/features/admin/services/media-api.service",
    "@/config/ui.config",
    "@/config/widgetRegistry",
    "@/navigation/forumNav",
    "@/hooks/use-media-query",
    "@/config/pageSlotMap",
    "@/components/widgets/ProfileCard",
    "@/components/ui/candlestick-menu",
    "@/components/economy/wallet/WalletSheet",
    "@/hooks/wrappers/use-auth-wrapper",
    "@/config/navigation",
    "@/config/footer-navigation",
    "@tiptap/react",
    "@tiptap/starter-kit",
    "@tiptap/extension-underline",
    "@tiptap/extension-link",
    "@tiptap/extension-image",
    "@tiptap/extension-placeholder",
    "@tiptap/extension-text-style",
    "@tiptap/extension-font-family",
    "@tiptap/extension-color",
    "@tiptap/extension-text-align",
    "@tiptap/extension-code-block-lowlight",
    "@tiptap/extension-mention",
    "@/hooks/useDailyTasks",
    "@/pages/dev/DemoCard",
    "@/config/fonts.config",
    "@/features/activity/services/activityApi",
    "@/features/activity/hooks/useActivityFeed"
  ],
  "dependents": [],
  "criticalPath": false,
  "riskAssessment": {
    "runtime": "high",
    "testing": "high",
    "integration": "low"
  },
  "migrationStrategy": {
    "priority": 3,
    "approach": "incremental",
    "estimatedDays": 81,
    "blockers": [],
    "prerequisites": []
  }
}