{
  "name": "engagement",
  "files": [
    {
      "path": "scripts/templates/vault-domain-template.ts",
      "domain": "engagement",
      "layer": "other",
      "size": 27419,
      "lines": 997,
      "complexity": 10,
      "dependencies": [
        "@db/types",
        "express",
        "express",
        "drizzle-orm",
        "express",
        "zod",
        "vitest",
        "@db"
      ],
      "exports": [
        "vaultRoutesTemplate",
        "vaultControllerTemplate",
        "VaultController",
        "vaultController",
        "vaultServiceTemplate",
        "VaultService",
        "vaultService",
        "vaultValidatorsTemplate",
        "createVaultSchema",
        "releaseVaultSchema",
        "validateCreateVault",
        "validateReleaseVault",
        "vaultErrorCodesTemplate",
        "vaultTestTemplate",
        "createVaultDomainScript",
        "createVaultSchema",
        "releaseVaultSchema"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 254,
          "context": "async getUserVaults(userId: number) {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 310,
          "context": "userId: number,",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 386,
          "context": "async releaseVault(userId: number, vaultId: number) {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 478,
          "context": "async getVaultHistory(userId: number, page: number = 1, limit: number = 10) {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 955,
          "context": "userId: number,",
          "suggestedFix": "UserId",
          "confidence": 0.8
        }
      ],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": true,
        "typeImports": [
          "AdminId"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 2.7
    },
    {
      "path": "scripts/db/seed-vaults.ts",
      "domain": "engagement",
      "layer": "other",
      "size": 1579,
      "lines": 40,
      "complexity": 2,
      "dependencies": [
        "@db"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.4
    },
    {
      "path": "db/schema/system/airdrop-records.ts",
      "domain": "engagement",
      "layer": "other",
      "size": 1283,
      "lines": 25,
      "complexity": 0,
      "dependencies": [
        "drizzle-orm/pg-core"
      ],
      "exports": [
        "tokenTypeEnumAirdrop",
        "adminManualAirdropLogs",
        "AdminManualAirdropLog",
        "NewAdminManualAirdropLog"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.1
    },
    {
      "path": "client/src/types/vault.types.ts",
      "domain": "engagement",
      "layer": "types",
      "size": 6028,
      "lines": 235,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "ItemCategory",
        "ItemRarity",
        "UnlockMethod",
        "SeasonType",
        "BaseVaultItem",
        "VaultFrame",
        "VaultTitle",
        "VaultColor",
        "VaultBoost",
        "VaultEvent",
        "EventRequirement",
        "EventReward",
        "AdminActionLog",
        "VaultAdminAction",
        "VaultActionDetails",
        "UserVaultItem",
        "ItemHistory",
        "VaultAdminService",
        "ItemStatistics",
        "AdminLogFilters"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": true,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/lib/rare-items-vault.ts",
      "domain": "engagement",
      "layer": "utils",
      "size": 16933,
      "lines": 713,
      "complexity": 3,
      "dependencies": [],
      "exports": [
        "ItemRarity",
        "UnlockMethod",
        "ItemCategory",
        "SeasonType",
        "BaseVaultItem",
        "VaultFrame",
        "VaultTitle",
        "VaultColor",
        "VaultBoost",
        "vaultFrames",
        "vaultTitles",
        "vaultColors",
        "vaultBoosts",
        "vaultMysteryExclusives",
        "vaultItems",
        "getItemsByCategory",
        "getItemsByRarity",
        "getLootboxItems",
        "getSeasonalItems",
        "getItemsByXpRequirement"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 2.1
    },
    {
      "path": "client/src/hooks/use-vault-items.tsx",
      "domain": "engagement",
      "layer": "hooks",
      "size": 592,
      "lines": 31,
      "complexity": 0,
      "dependencies": [
        "react"
      ],
      "exports": [
        "ItemCategory",
        "useVaultItemsForShop"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "ShopItem"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/hooks/use-rain.ts",
      "domain": "engagement",
      "layer": "hooks",
      "size": 2931,
      "lines": 120,
      "complexity": 2,
      "dependencies": [
        "@tanstack/react-query",
        "@/lib/queryClient",
        "@/hooks/use-toast",
        "@db/types"
      ],
      "exports": [
        "RainParams",
        "useRain"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 17,
          "context": "id: number;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 25,
          "context": "id: number;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        }
      ],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": true,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "RoomId",
          "ActionId"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 2.1
    },
    {
      "path": "client/src/contexts/shoutbox-context.tsx",
      "domain": "engagement",
      "layer": "other",
      "size": 9985,
      "lines": 331,
      "complexity": 5,
      "dependencies": [
        "react",
        "@tanstack/react-query",
        "@/lib/queryClient",
        "@/hooks/use-media-query"
      ],
      "exports": [
        "ShoutboxPosition",
        "ShoutboxEffectivePosition",
        "ShoutboxExpansionLevel",
        "ShoutboxProvider",
        "useShoutbox"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/contexts/safe-shoutbox-provider.tsx",
      "domain": "engagement",
      "layer": "other",
      "size": 1875,
      "lines": 66,
      "complexity": 2,
      "dependencies": [
        "react",
        "@/constants/env"
      ],
      "exports": [
        "SafeShoutboxProvider"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.9
    },
    {
      "path": "client/src/contexts/mock-shoutbox-context.tsx",
      "domain": "engagement",
      "layer": "other",
      "size": 6433,
      "lines": 211,
      "complexity": 3,
      "dependencies": [
        "react",
        "@/hooks/use-toast",
        "@/hooks/use-media-query"
      ],
      "exports": [
        "ShoutboxPosition",
        "ShoutboxEffectivePosition",
        "ShoutboxExpansionLevel",
        "MockShoutboxProvider",
        "useMockShoutbox"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.3000000000000001
    },
    {
      "path": "server/src/domains/engagement/engagement.service.ts",
      "domain": "engagement",
      "subdomain": "engagement.service.ts",
      "layer": "other",
      "size": 4432,
      "lines": 166,
      "complexity": 3,
      "dependencies": [
        "@db",
        "@/db/types"
      ],
      "exports": [
        "EngagementService",
        "engagementService"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 43,
          "context": "id: number;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 124,
          "context": "async getUserEngagementStats(userId: number) {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        }
      ],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": true,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "AdminUserId"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 1.3
    },
    {
      "path": "client/src/components/shoutbox/shoutbox.spec.tsx",
      "domain": "engagement",
      "subdomain": "shoutbox.spec.tsx",
      "layer": "components",
      "size": 1049,
      "lines": 36,
      "complexity": 1,
      "dependencies": [
        "@/test/utils/renderWithProviders",
        "vitest",
        "@/contexts/shoutbox-context"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/shoutbox/shoutbox-widget.tsx",
      "domain": "engagement",
      "subdomain": "shoutbox-widget.tsx",
      "layer": "components",
      "size": 27705,
      "lines": 878,
      "complexity": 4,
      "dependencies": [
        "react",
        "@tanstack/react-query",
        "axios",
        "date-fns",
        "@/components/ui/card",
        "@/components/ui/input",
        "@/components/ui/button",
        "@/components/identity/AvatarFrame",
        "@/components/users/Username",
        "@/components/economy/xp/LevelBadge",
        "@/components/ui/tooltip",
        "@/components/ui/tabs",
        "@/hooks/use-toast",
        "@/contexts/shoutbox-context",
        "@/hooks/useIdentityDisplay",
        "@db/types"
      ],
      "exports": [],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 58,
          "context": "id: number;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 67,
          "context": "id: number;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 79,
          "context": "id: number;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        }
      ],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": true,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": [
          "GroupId",
          "MessageId"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 3.8
    },
    {
      "path": "client/src/components/shoutbox/shoutbox-position-selector.tsx",
      "domain": "engagement",
      "subdomain": "shoutbox-position-selector.tsx",
      "layer": "components",
      "size": 8692,
      "lines": 267,
      "complexity": 2,
      "dependencies": [
        "react",
        "lucide-react",
        "@/components/ui/popover",
        "@/components/ui/button",
        "@/components/ui/radio-group",
        "@/components/ui/label",
        "@/contexts/shoutbox-context",
        "@/contexts/shoutbox-context",
        "@/hooks/use-toast",
        "@/hooks/use-media-query",
        "@/stores/useLayoutStore"
      ],
      "exports": [
        "ShoutboxPositionSelector"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "ShoutboxPosition"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 1.9
    },
    {
      "path": "client/src/components/shoutbox/shoutbox-help-command.tsx",
      "domain": "engagement",
      "subdomain": "shoutbox-help-command.tsx",
      "layer": "components",
      "size": 3224,
      "lines": 125,
      "complexity": 1,
      "dependencies": [
        "react"
      ],
      "exports": [
        "processHelpCommand"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/shoutbox/positioned-shoutbox.tsx",
      "domain": "engagement",
      "subdomain": "positioned-shoutbox.tsx",
      "layer": "components",
      "size": 5617,
      "lines": 178,
      "complexity": 2,
      "dependencies": [
        "react",
        "@/contexts/shoutbox-context",
        "@/contexts/shoutbox-context",
        "react-dom",
        "lucide-react"
      ],
      "exports": [
        "PositionedShoutbox"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "ShoutboxEffectivePosition"
        ]
      },
      "riskLevel": "low",
      "migrationEffort": 0.9
    },
    {
      "path": "client/src/components/shoutbox/integration-example.tsx",
      "domain": "engagement",
      "subdomain": "integration-example.tsx",
      "layer": "components",
      "size": 3185,
      "lines": 96,
      "complexity": 2,
      "dependencies": [
        "react",
        "@/hooks/use-rain-notifications"
      ],
      "exports": [
        "ShoutboxWithRainSupport"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 1.9
    },
    {
      "path": "client/src/components/shoutbox/index.ts",
      "domain": "engagement",
      "subdomain": "index.ts",
      "layer": "components",
      "size": 702,
      "lines": 14,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "default as ShoutboxWidget ",
        "PositionedShoutbox ",
        "ShoutboxPositionSelector ",
        "ShoutboxRainNotification",
        "RainNotifications",
        "StyledShoutboxMessage",
        "detectMessageType",
        "default as ShoutboxHelpCommand",
        "processHelpCommand"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "client/src/components/shoutbox/ShoutboxInput.tsx",
      "domain": "engagement",
      "subdomain": "ShoutboxInput.tsx",
      "layer": "components",
      "size": 3618,
      "lines": 135,
      "complexity": 1,
      "dependencies": [
        "react",
        "lucide-react",
        "@/components/ui/input",
        "@/components/ui/button",
        "@/hooks/use-mentions",
        "@/components/mentions/MentionAutocomplete"
      ],
      "exports": [
        "ShoutboxInput"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.7
    },
    {
      "path": "client/src/components/shoutbox/ShoutboxContainer.tsx",
      "domain": "engagement",
      "subdomain": "ShoutboxContainer.tsx",
      "layer": "components",
      "size": 6337,
      "lines": 194,
      "complexity": 1,
      "dependencies": [
        "react",
        "lucide-react",
        "@tanstack/react-query",
        "@/lib/queryClient",
        "@/hooks/use-auth",
        "@/hooks/use-toast",
        "@/components/ui/input",
        "@/components/ui/button",
        "@/components/ui/avatar",
        "@/components/ui/badge",
        "@/components/ui/skeleton",
        "@/components/ui/feature-gate",
        "@/components/users/Username",
        "@/components/economy/wallet/rain-button"
      ],
      "exports": [],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 27,
          "context": "userId: number;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        }
      ],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 1
    },
    {
      "path": "server/src/domains/engagement/tip/tip.service.ts",
      "domain": "engagement",
      "subdomain": "tip",
      "layer": "other",
      "size": 9216,
      "lines": 346,
      "complexity": 4,
      "dependencies": [
        "@db",
        "@schema",
        "drizzle-orm",
        "uuid"
      ],
      "exports": [
        "TipRequest",
        "TipResponse",
        "TipService",
        "tipService"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 78,
          "context": "id: number;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 292,
          "context": "userId: number,",
          "suggestedFix": "UserId",
          "confidence": 0.8
        }
      ],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": true,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 2
    },
    {
      "path": "server/src/domains/engagement/tip/tip.routes.ts",
      "domain": "engagement",
      "subdomain": "tip",
      "layer": "routes",
      "size": 1798,
      "lines": 58,
      "complexity": 0,
      "dependencies": [
        "express",
        "zod"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 0.1
    },
    {
      "path": "server/src/domains/engagement/tip/tip.controller.ts",
      "domain": "engagement",
      "subdomain": "tip",
      "layer": "controllers",
      "size": 3514,
      "lines": 134,
      "complexity": 2,
      "dependencies": [
        "@server/src/core/services/user.service",
        "express",
        "zod"
      ],
      "exports": [
        "TipController",
        "tipController"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": [
          "Request",
          "Response"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 0.4
    },
    {
      "path": "server/src/domains/engagement/rain/rain.service.ts",
      "domain": "engagement",
      "subdomain": "rain",
      "layer": "other",
      "size": 15153,
      "lines": 563,
      "complexity": 8,
      "dependencies": [
        "@db",
        "drizzle-orm",
        "@/db/types"
      ],
      "exports": [
        "RainService",
        "rainService"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 63,
          "context": "recipients: Array<{ id: number; username: string }>;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 372,
          "context": "private async checkCooldowns(userId: number, commandType: 'tip' | 'rain'): Promise<void> {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 467,
          "context": "private async updateLastCommandTime(userId: number, commandType: 'tip' | 'rain'): Promise<void> {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 520,
          "context": "async updateRainSettings(userId: number, settings: any) {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        }
      ],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": true,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": [
          "ActionId"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 3
    },
    {
      "path": "server/src/domains/engagement/rain/rain.routes.ts",
      "domain": "engagement",
      "subdomain": "rain",
      "layer": "routes",
      "size": 1848,
      "lines": 61,
      "complexity": 0,
      "dependencies": [
        "express",
        "zod"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 0.1
    },
    {
      "path": "server/src/domains/engagement/rain/rain.controller.ts",
      "domain": "engagement",
      "subdomain": "rain",
      "layer": "controllers",
      "size": 3137,
      "lines": 133,
      "complexity": 2,
      "dependencies": [
        "@server/src/core/services/user.service",
        "express",
        "zod"
      ],
      "exports": [
        "RainController",
        "rainController"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": [
          "Request",
          "Response"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 0.4
    },
    {
      "path": "server/src/domains/engagement/airdrop/airdrop.service.ts",
      "domain": "engagement",
      "subdomain": "airdrop",
      "layer": "other",
      "size": 11003,
      "lines": 457,
      "complexity": 5,
      "dependencies": [
        "@db",
        "@schema",
        "drizzle-orm",
        "uuid",
        "@/db/types"
      ],
      "exports": [
        "AirdropOptions",
        "AirdropResult",
        "AirdropService",
        "airdropService"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 36,
          "context": "id: number;",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        }
      ],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": true,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": [
          "AdminUserId",
          "AirdropId",
          "ActionId"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 2.1
    },
    {
      "path": "server/src/domains/engagement/airdrop/airdrop.routes.ts",
      "domain": "engagement",
      "subdomain": "airdrop",
      "layer": "routes",
      "size": 1862,
      "lines": 69,
      "complexity": 1,
      "dependencies": [
        "express"
      ],
      "exports": [
        "registerAirdropRoutes"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 0.7
    },
    {
      "path": "server/src/domains/engagement/airdrop/airdrop.controller.ts",
      "domain": "engagement",
      "subdomain": "airdrop",
      "layer": "controllers",
      "size": 5084,
      "lines": 194,
      "complexity": 4,
      "dependencies": [
        "@server/src/core/services/user.service",
        "express"
      ],
      "exports": [
        "AirdropController",
        "airdropController"
      ],
      "idPatterns": [
        {
          "type": "conversion",
          "pattern": "parseInt(req.params.id)",
          "line": 158,
          "context": "const airdropId = parseInt(req.params.id);",
          "suggestedFix": "remove parseInt, use branded type",
          "confidence": 0.5
        }
      ],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "Request",
          "Response"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 1.4
    },
    {
      "path": "server/src/domains/engagement/vault/vault.service.ts",
      "domain": "engagement",
      "subdomain": "vault",
      "layer": "other",
      "size": 9758,
      "lines": 358,
      "complexity": 6,
      "dependencies": [
        "@db",
        "drizzle-orm",
        "@/db/types"
      ],
      "exports": [
        "VaultLockOptions",
        "VaultService",
        "vaultService"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 25,
          "context": "userId: number;",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 274,
          "context": "async getUserVaultLocks(userId: number): Promise<any[]> {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 298,
          "context": "userId: number,",
          "suggestedFix": "UserId",
          "confidence": 0.8
        }
      ],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": [
          "UnlockTransactionId",
          "VaultLockId",
          "ActionId"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 2.5
    },
    {
      "path": "server/src/domains/engagement/vault/vault.routes.ts",
      "domain": "engagement",
      "subdomain": "vault",
      "layer": "routes",
      "size": 10322,
      "lines": 393,
      "complexity": 6,
      "dependencies": [
        "express",
        "express",
        "zod",
        "@db",
        "drizzle-orm",
        "@schema",
        "@server/src/utils/auth"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": true,
        "typeImports": [
          "Request",
          "Response"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 1.4000000000000001
    },
    {
      "path": "server/src/domains/engagement/vault/vault.controller.ts",
      "domain": "engagement",
      "subdomain": "vault",
      "layer": "controllers",
      "size": 5897,
      "lines": 223,
      "complexity": 4,
      "dependencies": [
        "@server/src/core/services/user.service",
        "express",
        "@server/src/core/errors"
      ],
      "exports": [
        "VaultController",
        "vaultController"
      ],
      "idPatterns": [
        {
          "type": "conversion",
          "pattern": "parseInt(req.params.id)",
          "line": 97,
          "context": "const vaultLockId = parseInt(req.params.id);",
          "suggestedFix": "remove parseInt, use branded type",
          "confidence": 0.5
        }
      ],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": true,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": [
          "Request",
          "Response"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 2.4
    }
  ],
  "totalIssues": 25,
  "avgComplexity": 2.6875,
  "migrationEffort": 41.19999999999999,
  "dependencies": [
    "@db/types",
    "@db",
    "@tanstack/react-query",
    "@/lib/queryClient",
    "@/hooks/use-toast",
    "@/hooks/use-media-query",
    "@/constants/env",
    "@/db/types",
    "@/test/utils/renderWithProviders",
    "@/contexts/shoutbox-context",
    "@/components/ui/card",
    "@/components/ui/input",
    "@/components/ui/button",
    "@/components/identity/AvatarFrame",
    "@/components/users/Username",
    "@/components/economy/xp/LevelBadge",
    "@/components/ui/tooltip",
    "@/components/ui/tabs",
    "@/hooks/useIdentityDisplay",
    "@/components/ui/popover",
    "@/components/ui/radio-group",
    "@/components/ui/label",
    "@/stores/useLayoutStore",
    "@/hooks/use-rain-notifications",
    "@/hooks/use-mentions",
    "@/components/mentions/MentionAutocomplete",
    "@/hooks/use-auth",
    "@/components/ui/avatar",
    "@/components/ui/badge",
    "@/components/ui/skeleton",
    "@/components/ui/feature-gate",
    "@/components/economy/wallet/rain-button",
    "@schema",
    "@server/src/core/services/user.service",
    "@server/src/utils/auth",
    "@server/src/core/errors"
  ],
  "dependents": [],
  "criticalPath": false,
  "riskAssessment": {
    "runtime": "medium",
    "testing": "high",
    "integration": "low"
  },
  "migrationStrategy": {
    "priority": 3,
    "approach": "parallel",
    "estimatedDays": 9,
    "blockers": [],
    "prerequisites": []
  }
}