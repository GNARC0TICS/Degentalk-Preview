{
  "timestamp": "2025-07-01T23:13:47.762Z",
  "summary": {
    "totalFiles": 1539,
    "totalLines": 275974,
    "totalIssues": 699,
    "domains": 35,
    "avgComplexity": 1.931124106562703,
    "migrationEstimate": 365
  },
  "domains": [
    {
      "name": "forum-core",
      "files": [
        {
          "path": "test-threads-simple.ts",
          "domain": "forum-core",
          "layer": "other",
          "size": 1423,
          "lines": 49,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "test-forum-e2e.spec.ts",
          "domain": "forum-core",
          "layer": "other",
          "size": 9665,
          "lines": 294,
          "complexity": 9,
          "dependencies": [
            "@playwright/test"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 3.3
        },
        {
          "path": "scripts/test-forum-api.ts",
          "domain": "forum-core",
          "layer": "other",
          "size": 2720,
          "lines": 75,
          "complexity": 2,
          "dependencies": [
            "@db/types",
            "node-fetch"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.0999999999999999
        },
        {
          "path": "scripts/build-forum-sdk.ts",
          "domain": "forum-core",
          "layer": "other",
          "size": 751,
          "lines": 21,
          "complexity": 0,
          "dependencies": [
            "@db/types",
            "fs",
            "path"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "scripts/backfill-thread-parentForumSlug.ts",
          "domain": "forum-core",
          "layer": "other",
          "size": 12127,
          "lines": 188,
          "complexity": 2,
          "dependencies": [
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "HeatEventId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        },
        {
          "path": "tests/e2e/forum-home.spec.ts",
          "domain": "forum-core",
          "layer": "other",
          "size": 875,
          "lines": 24,
          "complexity": 1,
          "dependencies": [
            "@playwright/test"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "scripts/validation/validate-forum-structure-migration.ts",
          "domain": "forum-core",
          "layer": "other",
          "size": 6889,
          "lines": 158,
          "complexity": 2,
          "dependencies": [
            "drizzle-orm",
            "chalk"
          ],
          "exports": [
            "validateMigration "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        },
        {
          "path": "scripts/testing/validate-forum-fks.ts",
          "domain": "forum-core",
          "layer": "other",
          "size": 11181,
          "lines": 390,
          "complexity": 5,
          "dependencies": [
            "drizzle-orm/node-postgres",
            "pg",
            "chalk",
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.5
        },
        {
          "path": "scripts/seed/seedForumsFromConfig.ts",
          "domain": "forum-core",
          "layer": "other",
          "size": 1916,
          "lines": 65,
          "complexity": 2,
          "dependencies": [
            "node:crypto",
            "@paralleldrive/cuid2",
            "@/db",
            "@/schema/forum/structure",
            "@/client/src/config/forumMap.config",
            "chalk"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        },
        {
          "path": "scripts/ops/check-forum-config-sync.ts",
          "domain": "forum-core",
          "layer": "other",
          "size": 17725,
          "lines": 313,
          "complexity": 6,
          "dependencies": [
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "HeatEventId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.2
        },
        {
          "path": "scripts/migration/migrate-forum-structure.ts",
          "domain": "forum-core",
          "layer": "other",
          "size": 17943,
          "lines": 394,
          "complexity": 3,
          "dependencies": [
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types"
          ],
          "exports": [
            "runMigration",
            "validateMigration"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "HeatEventId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.6000000000000001
        },
        {
          "path": "scripts/dev/syncForumsToDB.ts",
          "domain": "forum-core",
          "layer": "other",
          "size": 307,
          "lines": 10,
          "complexity": 0,
          "dependencies": [],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "scripts/db/update-forum-slugs.ts",
          "domain": "forum-core",
          "layer": "other",
          "size": 784,
          "lines": 28,
          "complexity": 1,
          "dependencies": [
            "@db/types",
            "@db",
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "scripts/db/test-forum-runtime.ts",
          "domain": "forum-core",
          "layer": "other",
          "size": 1502,
          "lines": 43,
          "complexity": 1,
          "dependencies": [],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "scripts/db/test-forum-query.ts",
          "domain": "forum-core",
          "layer": "other",
          "size": 4257,
          "lines": 122,
          "complexity": 2,
          "dependencies": [
            "@schema",
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.4
        },
        {
          "path": "scripts/db/read-thread.ts",
          "domain": "forum-core",
          "layer": "other",
          "size": 783,
          "lines": 32,
          "complexity": 1,
          "dependencies": [
            "@db",
            "@neondatabase/serverless",
            "drizzle-orm/neon-http",
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "scripts/db/fix-forum-relationships.ts",
          "domain": "forum-core",
          "layer": "other",
          "size": 13715,
          "lines": 304,
          "complexity": 3,
          "dependencies": [
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "HeatEventId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.6000000000000001
        },
        {
          "path": "scripts/db/diagnose-mentions-table.ts",
          "domain": "forum-core",
          "layer": "other",
          "size": 7516,
          "lines": 173,
          "complexity": 1,
          "dependencies": [
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "HeatEventId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.2
        },
        {
          "path": "scripts/db/add_categoryid_to_thread_prefixes.ts",
          "domain": "forum-core",
          "layer": "other",
          "size": 1558,
          "lines": 51,
          "complexity": 1,
          "dependencies": [
            "pg",
            "dotenv"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "migrations/postgres/schema.snapshot.ts",
          "domain": "forum-core",
          "subdomain": "schema.snapshot.ts",
          "layer": "other",
          "size": 201986,
          "lines": 4346,
          "complexity": 4,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "adFormat",
            "campaignStatus",
            "campaignType",
            "contentEditStatus",
            "contentVisibilityStatus",
            "cosmeticType",
            "cryptoCurrency",
            "eventType",
            "friendshipStatus",
            "interactionType",
            "mentionSourceType",
            "mentionType",
            "moderatorNoteType",
            "notificationType",
            "paymentMethod",
            "paymentStatus",
            "placementPosition",
            "promotionStatus",
            "promotionType",
            "reactionType"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.8
        },
        {
          "path": "migrations/postgres/relations.ts",
          "domain": "forum-core",
          "subdomain": "relations.ts",
          "layer": "other",
          "size": 60782,
          "lines": 1968,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/relations"
          ],
          "exports": [
            "siteSettingsRelations",
            "usersRelations",
            "adminThemesRelations",
            "siteTemplatesRelations",
            "featureFlagsRelations",
            "seoMetadataRelations",
            "announcementsRelations",
            "uiAnalyticsRelations",
            "uiQuotesRelations",
            "uiCollectionsRelations",
            "emailTemplatesRelations",
            "emailTemplateVersionsRelations",
            "moderatorNotesRelations",
            "backupSchedulesRelations",
            "adminBackupsRelations",
            "backupSettingsRelations",
            "restoreOperationsRelations",
            "brandConfigurationsRelations",
            "userMissionProgressRelations",
            "missionsRelations"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "lib/mentions/utils.ts",
          "domain": "forum-core",
          "subdomain": "utils.ts",
          "layer": "other",
          "size": 263,
          "lines": 10,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "extractMentionsFromText"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "lib/mentions/createMentionsIndex.ts",
          "domain": "forum-core",
          "subdomain": "createMentionsIndex.ts",
          "layer": "other",
          "size": 1618,
          "lines": 56,
          "complexity": 1,
          "dependencies": [
            "@server/src/lib/db",
            "@schema",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [
            "MentionSourceType"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.2
        },
        {
          "path": "lib/forum/shouldAwardXP.ts",
          "domain": "forum-core",
          "subdomain": "shouldAwardXP.ts",
          "layer": "other",
          "size": 181,
          "lines": 7,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "shouldAwardXP"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "lib/forum/prefixEngine.ts",
          "domain": "forum-core",
          "subdomain": "prefixEngine.ts",
          "layer": "other",
          "size": 569,
          "lines": 20,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "ThreadEngagementStats",
            "prefixEngine"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "lib/forum/getForumRules.ts",
          "domain": "forum-core",
          "subdomain": "getForumRules.ts",
          "layer": "other",
          "size": 716,
          "lines": 20,
          "complexity": 1,
          "dependencies": [
            "@/contexts/ForumStructureContext"
          ],
          "exports": [
            "getForumRules"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "MergedRules"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "lib/forum/getAvailablePrefixes.ts",
          "domain": "forum-core",
          "subdomain": "getAvailablePrefixes.ts",
          "layer": "other",
          "size": 201,
          "lines": 7,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "getAvailablePrefixes"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/types/forum.types.ts",
          "domain": "forum-core",
          "layer": "types",
          "size": 3129,
          "lines": 98,
          "complexity": 1,
          "dependencies": [
            "@/client/src/types/canonical.types"
          ],
          "exports": [
            "ThreadWithUser",
            "PostWithUser",
            "ThreadWithUserAndCategory",
            "PaginationInfo",
            "ThreadWithUserAndStructure",
            "ThreadWithPostsAndUser",
            "ThreadWithPostsAndUserStructure",
            "ForumTag",
            "ForumCategoryWithStats",
            "ForumStructureWithStats",
            "ThreadPrefix",
            "__ensureModule"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 50,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "ForumStructureNode"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.3
        },
        {
          "path": "shared/types/core/forum.types.ts",
          "domain": "forum-core",
          "layer": "types",
          "size": 6889,
          "lines": 296,
          "complexity": 2,
          "dependencies": [
            "@db/types/id.types",
            "@db/schema/core/enums"
          ],
          "exports": [
            "Forum",
            "ForumSettings",
            "ForumPrefix",
            "ForumRule",
            "ForumStats",
            "Thread",
            "ThreadMetadata",
            "Post",
            "PostMetadata",
            "PostReaction",
            "ThreadView",
            "ThreadSubscription",
            "CreateThreadRequest",
            "UpdateThreadRequest",
            "CreatePostRequest",
            "UpdatePostRequest",
            "ThreadSearchParams",
            "PostSearchParams",
            "isForum",
            "isThread"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "ThreadId",
              "PostId",
              "ForumId",
              "UserId",
              "PrefixId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "shared/lib/mentions/utils.ts",
          "domain": "forum-core",
          "subdomain": "utils.ts",
          "layer": "utils",
          "size": 665,
          "lines": 25,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "extractMentionsFromText",
            "isValidMention"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "shared/lib/mentions/createMentionsIndex.ts",
          "domain": "forum-core",
          "subdomain": "createMentionsIndex.ts",
          "layer": "utils",
          "size": 802,
          "lines": 31,
          "complexity": 1,
          "dependencies": [
            "@/lib/db",
            "@db/schema",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "UserId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "shared/lib/forum/shouldAwardXP.ts",
          "domain": "forum-core",
          "subdomain": "shouldAwardXP.ts",
          "layer": "utils",
          "size": 224,
          "lines": 8,
          "complexity": 0,
          "dependencies": [
            "@db/types"
          ],
          "exports": [
            "shouldAwardXP"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "shared/lib/forum/prefixEngine.ts",
          "domain": "forum-core",
          "subdomain": "prefixEngine.ts",
          "layer": "utils",
          "size": 613,
          "lines": 21,
          "complexity": 0,
          "dependencies": [
            "@db/types"
          ],
          "exports": [
            "ThreadEngagementStats",
            "prefixEngine"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "shared/lib/forum/getForumRules.ts",
          "domain": "forum-core",
          "subdomain": "getForumRules.ts",
          "layer": "utils",
          "size": 759,
          "lines": 21,
          "complexity": 1,
          "dependencies": [
            "@db/types",
            "@/contexts/ForumStructureContext"
          ],
          "exports": [
            "getForumRules"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "shared/lib/forum/getAvailablePrefixes.ts",
          "domain": "forum-core",
          "subdomain": "getAvailablePrefixes.ts",
          "layer": "utils",
          "size": 243,
          "lines": 8,
          "complexity": 0,
          "dependencies": [
            "@db/types"
          ],
          "exports": [
            "getAvailablePrefixes"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "shared/fixtures/factories/forum.factory.ts",
          "domain": "forum-core",
          "layer": "other",
          "size": 9264,
          "lines": 301,
          "complexity": 2,
          "dependencies": [
            "@schema"
          ],
          "exports": [
            "ThreadFactory",
            "PostFactory",
            "ForumCategoryFactory"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Thread",
              "Post",
              "ForumCategory"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        },
        {
          "path": "server/src/config/forum.config.ts",
          "domain": "forum-core",
          "layer": "other",
          "size": 399,
          "lines": 24,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "forumConfig",
            "ForumConfig"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/system/mentionsIndex.ts",
          "domain": "forum-core",
          "layer": "other",
          "size": 1114,
          "lines": 33,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "mentionsIndex",
            "MentionIndex"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/social/mentions.ts",
          "domain": "forum-core",
          "layer": "other",
          "size": 2789,
          "lines": 83,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "mentionTypeEnum",
            "mentions",
            "userMentionPreferences"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/forum/threads.ts",
          "domain": "forum-core",
          "subdomain": "threads.ts",
          "layer": "other",
          "size": 5545,
          "lines": 145,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm",
            "drizzle-orm/pg-core",
            "drizzle-orm",
            "drizzle-zod",
            "zod"
          ],
          "exports": [
            "PostTable",
            "threads",
            "threadsRelations",
            "insertThreadSchema",
            "Thread",
            "InsertThread"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "db/schema/forum/threadTags.ts",
          "domain": "forum-core",
          "subdomain": "threadTags.ts",
          "layer": "other",
          "size": 628,
          "lines": 22,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core"
          ],
          "exports": [
            "threadTags",
            "ThreadTag",
            "InsertThreadTag"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/forum/threadFeaturePermissions.ts",
          "domain": "forum-core",
          "subdomain": "threadFeaturePermissions.ts",
          "layer": "other",
          "size": 1234,
          "lines": 26,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "threadFeaturePermissions",
            "threadFeaturePermissionsRelations",
            "ThreadFeaturePermission",
            "InsertThreadFeaturePermission"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/forum/threadDrafts.ts",
          "domain": "forum-core",
          "subdomain": "threadDrafts.ts",
          "layer": "other",
          "size": 1650,
          "lines": 44,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm",
            "drizzle-zod"
          ],
          "exports": [
            "threadDrafts",
            "ThreadDraft",
            "InsertThreadDraft",
            "insertThreadDraftSchema",
            "selectThreadDraftSchema"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/forum/threadBookmarks.ts",
          "domain": "forum-core",
          "subdomain": "threadBookmarks.ts",
          "layer": "other",
          "size": 914,
          "lines": 28,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "userThreadBookmarks",
            "UserThreadBookmark",
            "InsertUserThreadBookmark"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/forum/tags.ts",
          "domain": "forum-core",
          "subdomain": "tags.ts",
          "layer": "other",
          "size": 703,
          "lines": 19,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm",
            "drizzle-zod"
          ],
          "exports": [
            "tags",
            "insertTagSchema",
            "Tag",
            "InsertTag"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/forum/structure.ts",
          "domain": "forum-core",
          "subdomain": "structure.ts",
          "layer": "other",
          "size": 2473,
          "lines": 76,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "forumStructure",
            "ForumStructureNode",
            "NewForumStructureNode"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "AnyPgColumn"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "db/schema/forum/rules.ts",
          "domain": "forum-core",
          "subdomain": "rules.ts",
          "layer": "other",
          "size": 1882,
          "lines": 63,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm",
            "drizzle-zod",
            "zod"
          ],
          "exports": [
            "forumRules",
            "insertForumRuleSchema",
            "ForumRule",
            "InsertForumRule"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/forum/prefixes.ts",
          "domain": "forum-core",
          "subdomain": "prefixes.ts",
          "layer": "other",
          "size": 1128,
          "lines": 27,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm",
            "drizzle-zod"
          ],
          "exports": [
            "threadPrefixes",
            "insertThreadPrefixSchema",
            "ThreadPrefix",
            "InsertThreadPrefix"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/forum/posts.ts",
          "domain": "forum-core",
          "subdomain": "posts.ts",
          "layer": "other",
          "size": 3568,
          "lines": 109,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm",
            "drizzle-orm/pg-core",
            "drizzle-orm",
            "drizzle-zod",
            "zod"
          ],
          "exports": [
            "posts",
            "postsRelations",
            "insertPostSchema",
            "Post",
            "InsertPost"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/forum/postReactions.ts",
          "domain": "forum-core",
          "subdomain": "postReactions.ts",
          "layer": "other",
          "size": 1370,
          "lines": 34,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm",
            "drizzle-zod"
          ],
          "exports": [
            "postReactions",
            "insertPostReactionSchema",
            "PostReaction",
            "InsertPostReaction"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/forum/postLikes.ts",
          "domain": "forum-core",
          "subdomain": "postLikes.ts",
          "layer": "other",
          "size": 848,
          "lines": 28,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "postLikes",
            "PostLike",
            "InsertPostLike"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/forum/postDrafts.ts",
          "domain": "forum-core",
          "subdomain": "postDrafts.ts",
          "layer": "other",
          "size": 945,
          "lines": 26,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "postDrafts",
            "PostDraft",
            "InsertPostDraft"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/forum/polls.ts",
          "domain": "forum-core",
          "subdomain": "polls.ts",
          "layer": "other",
          "size": 686,
          "lines": 20,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "polls",
            "Poll"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/forum/pollVotes.ts",
          "domain": "forum-core",
          "subdomain": "pollVotes.ts",
          "layer": "other",
          "size": 628,
          "lines": 20,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "pollVotes",
            "PollVote"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/forum/pollOptions.ts",
          "domain": "forum-core",
          "subdomain": "pollOptions.ts",
          "layer": "other",
          "size": 468,
          "lines": 14,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core"
          ],
          "exports": [
            "pollOptions",
            "PollOption"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/forum/emojiPacks.ts",
          "domain": "forum-core",
          "subdomain": "emojiPacks.ts",
          "layer": "other",
          "size": 996,
          "lines": 39,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "emojiPacks",
            "EmojiPack"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/forum/emojiPackItems.ts",
          "domain": "forum-core",
          "subdomain": "emojiPackItems.ts",
          "layer": "other",
          "size": 715,
          "lines": 23,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core"
          ],
          "exports": [
            "emojiPackItems",
            "EmojiPackItem"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/forum/customEmojis.ts",
          "domain": "forum-core",
          "subdomain": "customEmojis.ts",
          "layer": "other",
          "size": 1856,
          "lines": 53,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "customEmojis",
            "CustomEmoji",
            "InsertCustomEmoji"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/economy/postTips.ts",
          "domain": "forum-core",
          "layer": "other",
          "size": 922,
          "lines": 27,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm",
            "drizzle-zod"
          ],
          "exports": [
            "postTips",
            "insertPostTipSchema",
            "PostTip",
            "InsertPostTip"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "client/src/utils/forumStats.ts",
          "domain": "forum-core",
          "layer": "utils",
          "size": 360,
          "lines": 13,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "getMomentumLabel"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/utils/forum-urls.ts",
          "domain": "forum-core",
          "layer": "utils",
          "size": 6204,
          "lines": 261,
          "complexity": 5,
          "dependencies": [],
          "exports": [
            "ForumEntity",
            "ThreadEntity",
            "getForumUrl",
            "getSubforumUrl",
            "getLegacyZoneUrl",
            "getLegacyZoneForumUrl",
            "getLegacyZoneSubforumUrl",
            "getThreadUrl",
            "getThreadUrlById",
            "getCreateThreadUrl",
            "ParsedForumUrl",
            "parseForumUrl",
            "getSmartForumUrl",
            "isForumActive",
            "isLegacyZoneActive",
            "BreadcrumbItem",
            "generateBreadcrumbs",
            "URL_PATTERNS"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/utils/forum-routing-helper.ts",
          "domain": "forum-core",
          "layer": "utils",
          "size": 5491,
          "lines": 167,
          "complexity": 6,
          "dependencies": [],
          "exports": [
            "ForumEntityBase",
            "ForumEntityType",
            "getForumEntityType",
            "isPrimaryZone",
            "isCategory",
            "isChildForum",
            "getForumEntityUrl",
            "BreadcrumbItem",
            "getStaticBreadcrumbs",
            "getThreadUrl",
            "sortEntities",
            "getZoneOrForumDisplayName",
            "getForumAnchorId",
            "formatZoneName",
            "isEntityActive"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9000000000000001
        },
        {
          "path": "client/src/types/thread.types.ts",
          "domain": "forum-core",
          "layer": "types",
          "size": 3301,
          "lines": 137,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "ResolvedZone",
            "ThreadUser",
            "ThreadZone",
            "ThreadCategory",
            "ThreadTag",
            "ThreadPrefix",
            "ThreadEngagement",
            "ThreadReaction",
            "ThreadDisplay",
            "ThreadsApiResponse",
            "ThreadListProps"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "CanonicalThread",
              "CanonicalUser",
              "CanonicalZone"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/types/forum.ts",
          "domain": "forum-core",
          "layer": "types",
          "size": 2162,
          "lines": 70,
          "complexity": 1,
          "dependencies": [
            "@/types/compat/forum",
            "@db/types"
          ],
          "exports": [
            "ForumUserLite",
            "ForumCategoryLite",
            "ThreadCardPropsData",
            "ThreadCardComponentProps",
            "Tag"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ThreadPrefix",
              "ForumTag as ThreadTag"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/pages/forum-rules.tsx",
          "domain": "forum-core",
          "layer": "pages",
          "size": 10808,
          "lines": 380,
          "complexity": 3,
          "dependencies": [
            "react",
            "react-helmet",
            "@tanstack/react-query",
            "@/components/ui/tabs",
            "@/components/ui/button",
            "@/components/ui/checkbox",
            "@/components/ui/badge",
            "@/components/ui/alert",
            "@/components/ui/separator",
            "lucide-react",
            "@/hooks/use-toast",
            "@/hooks/use-auth.tsx",
            "@/lib/queryClient",
            "@/components/ui/loader",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 27,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 48,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 49,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "RuleId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.6000000000000005
        },
        {
          "path": "client/src/navigation/forumNav.ts",
          "domain": "forum-core",
          "layer": "other",
          "size": 4912,
          "lines": 139,
          "complexity": 2,
          "dependencies": [
            "lucide-react",
            "lucide-react",
            "@/contexts/ForumStructureContext",
            "@/utils/forum-urls",
            "react"
          ],
          "exports": [
            "NavNode",
            "buildNavigationTree"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "LucideProps"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        },
        {
          "path": "client/src/hooks/useThreadZone.ts",
          "domain": "forum-core",
          "layer": "hooks",
          "size": 2674,
          "lines": 87,
          "complexity": 1,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/features/forum/services/forumApi",
            "@/contexts/ForumStructureContext",
            "@/contexts/ForumStructureContext",
            "@/types/canonical.types"
          ],
          "exports": [
            "ThreadWithPosts",
            "useThreadZone"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "MergedZone"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/hooks/useForumFilters.ts",
          "domain": "forum-core",
          "layer": "hooks",
          "size": 5152,
          "lines": 190,
          "complexity": 4,
          "dependencies": [
            "react",
            "wouter",
            "@/components/forum/ThreadFilters",
            "@db/types"
          ],
          "exports": [
            "useForumFilters"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ThreadFiltersState",
              "ThreadSortOption"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.3
        },
        {
          "path": "client/src/hooks/use-mentions.ts",
          "domain": "forum-core",
          "layer": "hooks",
          "size": 6524,
          "lines": 231,
          "complexity": 2,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/lib/queryClient"
          ],
          "exports": [
            "useMentions"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/contexts/ForumThemeProvider.tsx",
          "domain": "forum-core",
          "layer": "other",
          "size": 7233,
          "lines": 248,
          "complexity": 3,
          "dependencies": [
            "react",
            "react",
            "lucide-react",
            "@/lib/queryClient",
            "@/styles/cssVariables"
          ],
          "exports": [
            "ThemeSettings",
            "ThemeOverrides",
            "ForumThemeProvider",
            "useForumTheme"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ReactNode",
              "ComponentType"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.1
        },
        {
          "path": "client/src/contexts/ForumStructureContext.tsx",
          "domain": "forum-core",
          "layer": "other",
          "size": 17190,
          "lines": 565,
          "complexity": 5,
          "dependencies": [
            "react",
            "react",
            "zod",
            "@/config/forumMap.config",
            "@/config/forumMap.config",
            "@db/types"
          ],
          "exports": [
            "ApiEntity",
            "PluginData",
            "ForumStructureApiResponse",
            "ForumId",
            "MergedTheme",
            "MergedRules",
            "MergedForum",
            "MergedZone",
            "ForumStructureContextType",
            "ForumStructureProvider",
            "useForumStructure",
            "useZones",
            "useForums",
            "legacy"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 179,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 209,
              "context": "getZoneById: (id: number) => MergedZone | undefined;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 211,
              "context": "getForumById: (id: number) => MergedForum | undefined;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": true,
            "hasNumericIds": true,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "ReactNode"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.4999999999999998
        },
        {
          "path": "client/src/contexts/ForumOrderingContext.tsx",
          "domain": "forum-core",
          "layer": "other",
          "size": 1457,
          "lines": 45,
          "complexity": 1,
          "dependencies": [
            "react",
            "react",
            "@/config/featureFlags"
          ],
          "exports": [
            "ForumOrderingProvider",
            "useOrderedZones"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ReactNode"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/config/thread.config.ts",
          "domain": "forum-core",
          "layer": "other",
          "size": 302,
          "lines": 14,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "THREAD_CONFIG",
            "ThreadConfig"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/config/forumMap.config.ts",
          "domain": "forum-core",
          "layer": "other",
          "size": 16547,
          "lines": 696,
          "complexity": 3,
          "dependencies": [],
          "exports": [
            "ZONE_TYPES",
            "ZoneType",
            "PrefixGrantRule",
            "ForumRules",
            "ForumTheme",
            "Forum",
            "Zone",
            "DEFAULT_FORUM_RULES",
            "forumMap"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.6000000000000001
        },
        {
          "path": "client/src/config/forum-layouts.config.ts",
          "domain": "forum-core",
          "layer": "other",
          "size": 1720,
          "lines": 68,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "forumLayoutConfig",
            "ForumLayoutConfig",
            "ViewMode",
            "HeaderVariant"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/types/compat/forum.ts",
          "domain": "forum-core",
          "layer": "types",
          "size": 1105,
          "lines": 24,
          "complexity": 0,
          "dependencies": [
            "@/types/canonical.types"
          ],
          "exports": [
            "Thread",
            "ThreadWithUser",
            "ThreadWithUserAndCategory",
            "ThreadWithUserAndStructure",
            "PostWithUser",
            "ThreadWithPostsAndUser",
            "ThreadWithPostsAndUserStructure",
            "ThreadPrefix",
            "ThreadTag as ForumTag"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "CanonicalThread",
              "CanonicalPost"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/pages/threads/create.tsx",
          "domain": "forum-core",
          "subdomain": "create.tsx",
          "layer": "pages",
          "size": 12855,
          "lines": 381,
          "complexity": 2,
          "dependencies": [
            "react",
            "wouter",
            "@/features/forum/components/ThreadForm",
            "@/components/ui/button",
            "@/components/ui/card",
            "@/components/ui/alert",
            "@/hooks/use-auth",
            "@/contexts/ForumStructureContext",
            "@/contexts/ForumStructureContext",
            "@/lib/utils",
            "@/components/footer/SiteFooter",
            "@/components/ui/Container"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "MergedForum",
              "MergedZone"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        },
        {
          "path": "client/src/pages/threads/BBCodeThreadPage.tsx",
          "domain": "forum-core",
          "subdomain": "BBCodeThreadPage.tsx",
          "layer": "pages",
          "size": 17638,
          "lines": 553,
          "complexity": 5,
          "dependencies": [
            "react",
            "wouter",
            "@/features/forum/hooks/useForumQueries",
            "@/components/forum/BBCodePostCard",
            "@/components/forum/ThreadSidebar",
            "@/components/forum/ThreadPagination",
            "@/components/forum/bbcode/QuickReplyBox",
            "@/components/footer",
            "@/components/ui/button",
            "@/components/ui/skeleton",
            "@/layout/primitives",
            "@/components/ui/badge",
            "framer-motion",
            "@/types/compat/forum",
            "@/hooks/useSearchParams",
            "@/contexts/ForumStructureContext",
            "@/lib/forum/breadcrumbs",
            "@/hooks/use-auth",
            "@/components/forum/sidebar",
            "@/features/forum/contexts/ThreadActionsContext"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 200,
              "context": "const handleLike = (postId: number, hasLiked: boolean) => {",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 204,
              "context": "const handleReply = (postId: number) => {",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 209,
              "context": "const handleQuote = (postId: number) => {",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 214,
              "context": "const handleEdit = (postId: number) => {",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 218,
              "context": "const handleDelete = (postId: number) => {",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 222,
              "context": "const handleMarkSolution = (postId: number) => {",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 226,
              "context": "const handleTip = (postId: number) => {",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 230,
              "context": "const handleReport = (postId: number) => {",
              "suggestedFix": "PostId",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "PostWithUser",
              "ThreadWithPostsAndUser"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 1.5
        },
        {
          "path": "client/src/pages/forums/search.tsx",
          "domain": "forum-core",
          "subdomain": "search.tsx",
          "layer": "pages",
          "size": 4658,
          "lines": 149,
          "complexity": 2,
          "dependencies": [
            "react",
            "wouter",
            "@/components/footer",
            "@/components/ui/input",
            "@/components/ui/button",
            "lucide-react",
            "@/layout/primitives"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/pages/forums/index.tsx",
          "domain": "forum-core",
          "subdomain": "index.tsx",
          "layer": "pages",
          "size": 14203,
          "lines": 435,
          "complexity": 2,
          "dependencies": [
            "react",
            "framer-motion",
            "wouter",
            "@/components/ui/button",
            "@/components/ui/loader",
            "@/components/ui/error-display",
            "lucide-react",
            "@/components/ui/card",
            "@/components/footer",
            "@/components/forum/forum-guidelines",
            "@/contexts/ForumStructureContext",
            "@/contexts/ForumStructureContext",
            "@/components/ui/input",
            "wouter",
            "@/components/ui/badge",
            "@/components/users",
            "@/features/users/hooks",
            "@/utils/spacing-constants",
            "@/contexts/ForumThemeProvider",
            "@/layout/primitives"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "MergedZone",
              "MergedForum"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/pages/forums/[forumSlug].tsx",
          "domain": "forum-core",
          "subdomain": "[forumSlug].tsx",
          "layer": "pages",
          "size": 543,
          "lines": 21,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/components/forum/ForumPage",
            "@/components/forum/ForumErrorBoundary"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/pages/admin/forum-structure.tsx",
          "domain": "forum-core",
          "layer": "pages",
          "size": 8264,
          "lines": 270,
          "complexity": 2,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "lucide-react",
            "@/components/ui/button",
            "@/components/ui/dialog",
            "@/components/ui/input",
            "@/components/admin/layout/AdminPageShell",
            "@/components/admin/common/AdminDataTable",
            "@/components/admin/layout/EntityTable",
            "zod",
            "react-hook-form",
            "@hookform/resolvers/zod",
            "@/components/admin/inputs/AdminAccessSelector",
            "@/components/admin/inputs/AdminToggle"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 92,
              "context": "mutationFn: async (id: number) => {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "ColumnDef"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 3.5
        },
        {
          "path": "client/src/lib/forum/urls.ts",
          "domain": "forum-core",
          "subdomain": "urls.ts",
          "layer": "utils",
          "size": 3947,
          "lines": 159,
          "complexity": 4,
          "dependencies": [
            "@/constants/routes"
          ],
          "exports": [
            "ForumContext",
            "generateForumUrl",
            "generateCreateThreadUrl",
            "generateForumsIndexUrl",
            "parseForumUrl",
            "isLegacyForumUrl",
            "extractLegacyForumSlug"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 8,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.6
        },
        {
          "path": "client/src/lib/forum/sidebarUtils.ts",
          "domain": "forum-core",
          "subdomain": "sidebarUtils.ts",
          "layer": "utils",
          "size": 2258,
          "lines": 69,
          "complexity": 2,
          "dependencies": [
            "@/config/sidebarWidgets.config"
          ],
          "exports": [
            "getSidebarWidgets",
            "getZoneThemeKey",
            "isValidWidgetType",
            "getWidgetsForZone"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.10000000000000003
        },
        {
          "path": "client/src/lib/forum/breadcrumbs.ts",
          "domain": "forum-core",
          "subdomain": "breadcrumbs.ts",
          "layer": "utils",
          "size": 2744,
          "lines": 98,
          "complexity": 1,
          "dependencies": [
            "@/components/navigation/ForumBreadcrumbs",
            "@/utils/forum-urls"
          ],
          "exports": [
            "ForumContext",
            "createForumBreadcrumbs"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 5,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "BreadcrumbItem"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.8
        },
        {
          "path": "client/src/components/ui/thread-skeleton.tsx",
          "domain": "forum-core",
          "layer": "components",
          "size": 2567,
          "lines": 83,
          "complexity": 0,
          "dependencies": [
            "react"
          ],
          "exports": [
            "ThreadCardSkeleton",
            "ThreadListSkeleton",
            "HotThreadItemSkeleton",
            "HotThreadsSkeleton"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/smart-thread-filters.tsx",
          "domain": "forum-core",
          "layer": "components",
          "size": 16421,
          "lines": 540,
          "complexity": 2,
          "dependencies": [
            "react",
            "framer-motion",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/input",
            "@/components/ui/label",
            "@/components/ui/switch",
            "@/components/ui/slider",
            "@/components/ui/popover",
            "@/lib/utils",
            "@/hooks/useMediaQuery",
            "@/hooks/use-local-storage",
            "@db/types"
          ],
          "exports": [
            "ThreadFiltersState",
            "SmartThreadFiltersProps"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 67,
              "context": "availableTags?: Array<{ id: number; name: string; slug: string; color?: string }>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 68,
              "context": "availablePrefixes?: Array<{ id: number; name: string; color?: string }>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "PrefixId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 4.1
        },
        {
          "path": "client/src/components/ui/reactions-bar.tsx",
          "domain": "forum-core",
          "layer": "components",
          "size": 9210,
          "lines": 323,
          "complexity": 3,
          "dependencies": [
            "react",
            "lucide-react",
            "@/components/ui/button",
            "@/lib/utils",
            "@/lib/queryClient",
            "@/hooks/use-auth",
            "@/hooks/use-toast",
            "@tanstack/react-query",
            "@/components/ui/dialog",
            "@/components/ui/tooltip"
          ],
          "exports": [
            "ReactionsBar"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 21,
              "context": "postId: number;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.2
        },
        {
          "path": "client/src/components/ui/mobile-forum-nav.tsx",
          "domain": "forum-core",
          "layer": "components",
          "size": 12590,
          "lines": 398,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "framer-motion",
            "framer-motion",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/input",
            "@/lib/utils",
            "@/contexts/ForumStructureContext",
            "@/hooks/use-auth"
          ],
          "exports": [
            "MobileForumNavProps"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "PanInfo"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.8999999999999999
        },
        {
          "path": "client/src/components/ui/enhanced-thread-card.tsx",
          "domain": "forum-core",
          "layer": "components",
          "size": 10424,
          "lines": 345,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "framer-motion",
            "date-fns",
            "@/components/ui/card",
            "@/components/ui/badge",
            "@/components/ui/button",
            "@/components/ui/avatar",
            "@/lib/utils",
            "@/hooks/useMediaQuery",
            "@/types/thread.types"
          ],
          "exports": [
            "EnhancedThreadCardProps"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ThreadDisplay"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/notifications/MentionsNotifications.tsx",
          "domain": "forum-core",
          "layer": "components",
          "size": 9136,
          "lines": 316,
          "complexity": 2,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/components/ui/badge",
            "@/components/ui/button",
            "@/components/ui/avatar",
            "@/components/ui/card",
            "@/components/ui/skeleton",
            "@/components/ui/scroll-area",
            "date-fns",
            "wouter",
            "@/lib/utils",
            "@db/types"
          ],
          "exports": [
            "MentionsNotifications"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 27,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "MentionId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 3
        },
        {
          "path": "client/src/components/navigation/ForumBreadcrumbs.tsx",
          "domain": "forum-core",
          "layer": "components",
          "size": 5752,
          "lines": 184,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "lucide-react",
            "@/utils/spacing-constants"
          ],
          "exports": [
            "BreadcrumbItem",
            "ForumBreadcrumbs",
            "createForumBreadcrumbs"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/modals/TipPostModal.tsx",
          "domain": "forum-core",
          "layer": "components",
          "size": 4633,
          "lines": 165,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/label",
            "lucide-react",
            "@/lib/utils"
          ],
          "exports": [
            "TipPostModal"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/modals/QuotePostModal.tsx",
          "domain": "forum-core",
          "layer": "components",
          "size": 5489,
          "lines": 190,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "@/components/ui/textarea",
            "@/components/ui/label",
            "lucide-react",
            "@/lib/utils",
            "@/types/compat/forum"
          ],
          "exports": [
            "QuotePostModal"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "PostWithUser"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/mentions/MentionRenderer.tsx",
          "domain": "forum-core",
          "subdomain": "MentionRenderer.tsx",
          "layer": "components",
          "size": 2436,
          "lines": 97,
          "complexity": 3,
          "dependencies": [
            "react",
            "wouter",
            "@/lib/utils"
          ],
          "exports": [
            "MentionRenderer",
            "extractMentions",
            "hasMentions",
            "highlightMentions"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.1
        },
        {
          "path": "client/src/components/mentions/MentionAutocomplete.tsx",
          "domain": "forum-core",
          "subdomain": "MentionAutocomplete.tsx",
          "layer": "components",
          "size": 5491,
          "lines": 201,
          "complexity": 2,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/components/ui/avatar",
            "@/components/ui/badge",
            "@/lib/utils"
          ],
          "exports": [
            "MentionAutocomplete"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/forum/zone-group.tsx",
          "domain": "forum-core",
          "subdomain": "zone-group.tsx",
          "layer": "components",
          "size": 4171,
          "lines": 141,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/card",
            "wouter",
            "lucide-react"
          ],
          "exports": [
            "Forum",
            "Zone",
            "ZoneGroup"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 51,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 59,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 73,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 3
        },
        {
          "path": "client/src/components/forum/tag-input.tsx",
          "domain": "forum-core",
          "subdomain": "tag-input.tsx",
          "layer": "components",
          "size": 5475,
          "lines": 167,
          "complexity": 2,
          "dependencies": [
            "react",
            "lucide-react",
            "@/components/ui/badge",
            "@/components/ui/input",
            "@/features/forum/hooks/useForumQueries",
            "@/types/forum"
          ],
          "exports": [
            "TagInput"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Tag"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/forum/prefix-badge.tsx",
          "domain": "forum-core",
          "subdomain": "prefix-badge.tsx",
          "layer": "components",
          "size": 1102,
          "lines": 33,
          "complexity": 2,
          "dependencies": [
            "@/lib/utils"
          ],
          "exports": [
            "PrefixBadge"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/forum/index.ts",
          "domain": "forum-core",
          "subdomain": "index.ts",
          "layer": "components",
          "size": 226,
          "lines": 5,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "default as ThreadCard ",
            "default as ZoneCard ",
            "default as ForumPage ",
            "default as ForumErrorBoundary "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/forum/forum-guidelines.tsx",
          "domain": "forum-core",
          "subdomain": "forum-guidelines.tsx",
          "layer": "components",
          "size": 2130,
          "lines": 62,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "@/components/ui/card",
            "@/components/ui/button",
            "lucide-react",
            "framer-motion"
          ],
          "exports": [
            "ForumGuidelines"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/forum/forum-filters.tsx",
          "domain": "forum-core",
          "subdomain": "forum-filters.tsx",
          "layer": "components",
          "size": 5402,
          "lines": 178,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "@/components/ui/badge",
            "lucide-react"
          ],
          "exports": [
            "ForumFilters"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/forum/forum-category-card.tsx",
          "domain": "forum-core",
          "subdomain": "forum-category-card.tsx",
          "layer": "components",
          "size": 2880,
          "lines": 92,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "lucide-react",
            "@/components/ui/card",
            "@/components/ui/badge"
          ],
          "exports": [
            "ForumCategoryCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/forum/forum-card.tsx",
          "domain": "forum-core",
          "subdomain": "forum-card.tsx",
          "layer": "components",
          "size": 4654,
          "lines": 138,
          "complexity": 1,
          "dependencies": [
            "wouter",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/badge",
            "lucide-react",
            "date-fns"
          ],
          "exports": [
            "ForumCard"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 9,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 18,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.9
        },
        {
          "path": "client/src/components/forum/category-card.tsx",
          "domain": "forum-core",
          "subdomain": "category-card.tsx",
          "layer": "components",
          "size": 4266,
          "lines": 148,
          "complexity": 1,
          "dependencies": [
            "wouter",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/badge",
            "date-fns"
          ],
          "exports": [
            "CategoryCard"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 18,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.8
        },
        {
          "path": "client/src/components/forum/breadcrumb-nav.tsx",
          "domain": "forum-core",
          "subdomain": "breadcrumb-nav.tsx",
          "layer": "components",
          "size": 1838,
          "lines": 68,
          "complexity": 1,
          "dependencies": [
            "wouter",
            "lucide-react",
            "@/constants/routes"
          ],
          "exports": [
            "BreadcrumbItem",
            "BreadcrumbNav"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/forum/ZoneStats.tsx",
          "domain": "forum-core",
          "subdomain": "ZoneStats.tsx",
          "layer": "components",
          "size": 1089,
          "lines": 40,
          "complexity": 1,
          "dependencies": [
            "react",
            "lucide-react"
          ],
          "exports": [
            "ZoneStats"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/forum/ZoneCard.tsx",
          "domain": "forum-core",
          "subdomain": "ZoneCard.tsx",
          "layer": "components",
          "size": 14026,
          "lines": 437,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "framer-motion",
            "@/components/ui/card",
            "@/components/ui/badge",
            "@/components/ui/button",
            "@/components/ui/avatar",
            "@/lib/utils",
            "@/utils/card-constants",
            "@/hooks/useShowHotRibbon",
            "@/components/ui/safe-image",
            "@/config/animation.config",
            "@shared/config/zoneThemes.config"
          ],
          "exports": [
            "ZoneCardProps",
            "getZoneThemeVars",
            "ZoneCardPure as ZoneCard "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/components/forum/XpBoostBadge.tsx",
          "domain": "forum-core",
          "subdomain": "XpBoostBadge.tsx",
          "layer": "components",
          "size": 574,
          "lines": 23,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/badge"
          ],
          "exports": [
            "XpBoostBadge"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/forum/ThreadStats.tsx",
          "domain": "forum-core",
          "subdomain": "ThreadStats.tsx",
          "layer": "components",
          "size": 851,
          "lines": 27,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/components/icons/iconRenderer"
          ],
          "exports": [
            "ThreadStats"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/forum/ThreadSidebar.tsx",
          "domain": "forum-core",
          "subdomain": "ThreadSidebar.tsx",
          "layer": "components",
          "size": 7566,
          "lines": 272,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/badge",
            "date-fns",
            "@/types/compat/forum"
          ],
          "exports": [
            "ThreadSidebar"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ThreadWithPostsAndUser"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/forum/ThreadRow.tsx",
          "domain": "forum-core",
          "subdomain": "ThreadRow.tsx",
          "layer": "components",
          "size": 1579,
          "lines": 52,
          "complexity": 0,
          "dependencies": [
            "react",
            "wouter",
            "date-fns",
            "@/types/thread.types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ThreadDisplay"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/forum/ThreadPagination.tsx",
          "domain": "forum-core",
          "subdomain": "ThreadPagination.tsx",
          "layer": "components",
          "size": 4253,
          "lines": 169,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "lucide-react"
          ],
          "exports": [
            "ThreadPagination"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/forum/ThreadFilters.tsx",
          "domain": "forum-core",
          "subdomain": "ThreadFilters.tsx",
          "layer": "components",
          "size": 13564,
          "lines": 482,
          "complexity": 1,
          "dependencies": [
            "react",
            "lucide-react",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/input",
            "@/components/ui/popover",
            "@/hooks/use-local-storage",
            "@/lib/utils",
            "@/types/forum",
            "@db/types"
          ],
          "exports": [
            "ThreadSortOption",
            "ThreadFiltersState",
            "ThreadFilters"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 57,
              "context": "availablePrefixes?: Array<{ id: number; name: string; color: string }>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Tag"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.8
        },
        {
          "path": "client/src/components/forum/ThreadCard.tsx",
          "domain": "forum-core",
          "subdomain": "ThreadCard.tsx",
          "layer": "components",
          "size": 11861,
          "lines": 395,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "date-fns",
            "@/components/ui/card",
            "@/components/ui/badge",
            "@/components/ui/button",
            "@/components/ui/avatar",
            "@/lib/utils",
            "@/hooks/useMediaQuery",
            "@/types/thread.types",
            "@shared/config/zoneThemes.config",
            "@/features/forum/contexts/ThreadActionsContext",
            "@/components/forum/QuickReplyInput",
            "@/components/ui/tooltip-utils"
          ],
          "exports": [
            "ThreadCardProps",
            "ThreadCard "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ThreadDisplay"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/components/forum/StickyBackButton.tsx",
          "domain": "forum-core",
          "subdomain": "StickyBackButton.tsx",
          "layer": "components",
          "size": 1739,
          "lines": 73,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "lucide-react",
            "framer-motion",
            "@/components/ui/button",
            "@/lib/utils",
            "@/hooks/useMediaQuery"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/forum/SolveBadge.tsx",
          "domain": "forum-core",
          "subdomain": "SolveBadge.tsx",
          "layer": "components",
          "size": 807,
          "lines": 35,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/badge",
            "lucide-react"
          ],
          "exports": [
            "SolveBadge"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/forum/SignatureRenderer.tsx",
          "domain": "forum-core",
          "subdomain": "SignatureRenderer.tsx",
          "layer": "components",
          "size": 2922,
          "lines": 123,
          "complexity": 2,
          "dependencies": [
            "react",
            "dompurify"
          ],
          "exports": [
            "SignatureRenderer"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/forum/ShopCard.tsx",
          "domain": "forum-core",
          "subdomain": "ShopCard.tsx",
          "layer": "components",
          "size": 3929,
          "lines": 117,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "framer-motion",
            "lucide-react"
          ],
          "exports": [
            "ShopCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/forum/ShareButton.tsx",
          "domain": "forum-core",
          "subdomain": "ShareButton.tsx",
          "layer": "components",
          "size": 1353,
          "lines": 59,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "lucide-react"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 6,
              "context": "threadId: number | string;",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.8
        },
        {
          "path": "client/src/components/forum/RecentActivity.tsx",
          "domain": "forum-core",
          "subdomain": "RecentActivity.tsx",
          "layer": "components",
          "size": 5090,
          "lines": 177,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "lucide-react",
            "@/components/ui/frost-card",
            "@/components/ui/card",
            "@/components/ui/avatar"
          ],
          "exports": [
            "RecentActivity"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 9,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 13,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.9
        },
        {
          "path": "client/src/components/forum/ReactionBar.tsx",
          "domain": "forum-core",
          "subdomain": "ReactionBar.tsx",
          "layer": "components",
          "size": 7716,
          "lines": 289,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "@/components/forum/enhanced/QuickReactions",
            "date-fns"
          ],
          "exports": [
            "ReactionBar"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 29,
              "context": "postId: number;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 41,
              "context": "onLike?: (postId: number, hasLiked: boolean) => void;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 42,
              "context": "onReply?: (postId: number) => void;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 43,
              "context": "onQuote?: (postId: number) => void;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 44,
              "context": "onEdit?: (postId: number) => void;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 45,
              "context": "onDelete?: (postId: number) => void;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 46,
              "context": "onMarkSolution?: (postId: number) => void;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 47,
              "context": "onTip?: (postId: number) => void;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 48,
              "context": "onReport?: (postId: number) => void;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 49,
              "context": "onBookmark?: (postId: number) => void;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 50,
              "context": "onShare?: (postId: number) => void;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 51,
              "context": "onCopyLink?: (postId: number) => void;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 1.9000000000000001
        },
        {
          "path": "client/src/components/forum/QuickStats.tsx",
          "domain": "forum-core",
          "subdomain": "QuickStats.tsx",
          "layer": "components",
          "size": 2439,
          "lines": 94,
          "complexity": 1,
          "dependencies": [
            "react",
            "lucide-react",
            "@/components/ui/frost-card",
            "@/components/ui/card"
          ],
          "exports": [
            "QuickStats"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/forum/QuickReplyInput.tsx",
          "domain": "forum-core",
          "subdomain": "QuickReplyInput.tsx",
          "layer": "components",
          "size": 1692,
          "lines": 69,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "@/components/ui/textarea",
            "@/features/forum/contexts/ThreadActionsContext",
            "@/lib/utils"
          ],
          "exports": [
            "QuickReplyInputProps"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/forum/OriginForumPill.tsx",
          "domain": "forum-core",
          "subdomain": "OriginForumPill.tsx",
          "layer": "components",
          "size": 620,
          "lines": 24,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/badge"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/forum/ModeratorActions.tsx",
          "domain": "forum-core",
          "subdomain": "ModeratorActions.tsx",
          "layer": "components",
          "size": 10108,
          "lines": 393,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "@/components/ui/textarea",
            "@/components/ui/label",
            "@/components/ui/badge",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/hooks/use-toast",
            "@/hooks/use-auth",
            "@/lib/utils",
            "@/features/forum/hooks/useForumQueries",
            "@db/types"
          ],
          "exports": [
            "ModeratorActions"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ItemId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/forum/LegacyForumRedirect.tsx",
          "domain": "forum-core",
          "subdomain": "LegacyForumRedirect.tsx",
          "layer": "components",
          "size": 2516,
          "lines": 79,
          "complexity": 2,
          "dependencies": [
            "react",
            "wouter",
            "@/contexts/ForumStructureContext"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/forum/HotTopics.tsx",
          "domain": "forum-core",
          "subdomain": "HotTopics.tsx",
          "layer": "components",
          "size": 4130,
          "lines": 129,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "lucide-react",
            "@/components/ui/frost-card",
            "@/components/ui/card",
            "@/components/ui/badge"
          ],
          "exports": [
            "HotTopics"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 9,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.8
        },
        {
          "path": "client/src/components/forum/ForumPage.tsx",
          "domain": "forum-core",
          "subdomain": "ForumPage.tsx",
          "layer": "components",
          "size": 5480,
          "lines": 170,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "lucide-react",
            "@/components/ui/button",
            "@/utils/forum-urls",
            "@/contexts/ForumStructureContext",
            "@/hooks/useForumFilters",
            "@/layout/primitives",
            "@/components/forum/ThreadFilters",
            "@/components/navigation/ForumBreadcrumbs",
            "@/features/forum/components/ThreadList",
            "@/components/forum/sidebar",
            "@/components/footer",
            "@/components/forum/ForumHeader"
          ],
          "exports": [
            "ForumPageProps"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/forum/ForumHeader.tsx",
          "domain": "forum-core",
          "subdomain": "ForumHeader.tsx",
          "layer": "components",
          "size": 3511,
          "lines": 122,
          "complexity": 1,
          "dependencies": [
            "react",
            "lucide-react",
            "@/components/ui/button",
            "@/lib/utils",
            "@/contexts/ForumStructureContext"
          ],
          "exports": [
            "ForumHeaderProps",
            "ForumHeader"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "MergedForum"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/forum/ForumErrorBoundary.tsx",
          "domain": "forum-core",
          "subdomain": "ForumErrorBoundary.tsx",
          "layer": "components",
          "size": 1100,
          "lines": 37,
          "complexity": 1,
          "dependencies": [
            "react",
            "react-error-boundary",
            "@/components/ui/card",
            "@/layout/primitives",
            "@/components/ui/button"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/forum/CreateThreadButton.tsx",
          "domain": "forum-core",
          "subdomain": "CreateThreadButton.tsx",
          "layer": "components",
          "size": 2806,
          "lines": 87,
          "complexity": 2,
          "dependencies": [
            "react",
            "wouter",
            "@/components/ui/button",
            "@/components/ui/button",
            "lucide-react",
            "@/hooks/use-auth",
            "@db/types",
            "@/constants/routes"
          ],
          "exports": [
            "CreateThreadButton"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ButtonProps"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/forum/CanonicalZoneGrid.tsx",
          "domain": "forum-core",
          "subdomain": "CanonicalZoneGrid.tsx",
          "layer": "components",
          "size": 2660,
          "lines": 108,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "@/components/forum/ShopCard",
            "framer-motion",
            "@/config/animation.config",
            "@/components/forum/ZoneCard"
          ],
          "exports": [
            "ShopCardData",
            "CanonicalZoneGrid"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/forum/BBCodePostCard.tsx",
          "domain": "forum-core",
          "subdomain": "BBCodePostCard.tsx",
          "layer": "components",
          "size": 6707,
          "lines": 238,
          "complexity": 1,
          "dependencies": [
            "react",
            "framer-motion",
            "lucide-react",
            "@/components/profile/UnifiedProfileCard",
            "@/config/brand.config",
            "@/lib/utils",
            "@/types/compat/forum"
          ],
          "exports": [
            "BBCodePostCard"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 21,
              "context": "onLike?: (id: number, hasLiked: boolean) => void;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 22,
              "context": "onReply?: (id: number) => void;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 23,
              "context": "onQuote?: (id: number) => void;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 24,
              "context": "onEdit?: (id: number) => void;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 25,
              "context": "onDelete?: (id: number) => void;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 26,
              "context": "onMarkSolution?: (id: number) => void;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 27,
              "context": "onTip?: (id: number) => void;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 28,
              "context": "onReport?: (id: number) => void;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 29,
              "context": "onBookmark?: (id: number) => void;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 30,
              "context": "onShare?: (id: number) => void;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 31,
              "context": "onCopyLink?: (id: number) => void;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "PostWithUser"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 3.8
        },
        {
          "path": "client/src/components/errors/ThreadNotFound.tsx",
          "domain": "forum-core",
          "layer": "components",
          "size": 4430,
          "lines": 142,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "lucide-react",
            "@/components/ui/button",
            "@/components/ui/card",
            "@tanstack/react-query",
            "@/lib/queryClient"
          ],
          "exports": [
            "ThreadNotFound"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 16,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.8
        },
        {
          "path": "client/src/components/errors/ForumNotFound.tsx",
          "domain": "forum-core",
          "layer": "components",
          "size": 4348,
          "lines": 127,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "lucide-react",
            "@/components/ui/button",
            "@/components/ui/card",
            "@/contexts/ForumStructureContext"
          ],
          "exports": [
            "ForumNotFound"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/features/forum/services/forumApi.ts",
          "domain": "forum-core",
          "subdomain": "services",
          "layer": "services",
          "size": 11113,
          "lines": 452,
          "complexity": 8,
          "dependencies": [
            "@/lib/api-request",
            "@/types/core.types",
            "@db/types"
          ],
          "exports": [
            "ThreadSearchParams",
            "ThreadSearchResult",
            "forumApi"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 156,
              "context": "threadId: number,",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 174,
              "context": "deleteThread: async (threadId: number): Promise<{ success: true }> => {",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 185,
              "context": "solveThread: async (threadId: number, postId?: number): Promise<ThreadWithUser> => {",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 194,
              "context": "unsolveThread: async (threadId: number): Promise<ThreadWithUser> => {",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 213,
              "context": "addTagToThread: async (threadId: number, tagId: TagId): Promise<ForumTag> => {",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 222,
              "context": "removeTagFromThread: async (threadId: number, tagId: TagId): Promise<void> => {",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 251,
              "context": "threadId: number,",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 290,
              "context": "threadId: number;",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 376,
              "context": "bookmarkThread: async (threadId: number): Promise<{ success: true }> => {",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 385,
              "context": "removeBookmark: async (threadId: number): Promise<{ success: true }> => {",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 304,
              "context": "postId: number,",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 324,
              "context": "deletePost: async (postId: number): Promise<{ success: true }> => {",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 336,
              "context": "postId: number,",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 348,
              "context": "postId: number,",
              "suggestedFix": "PostId",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "ThreadWithUser",
              "PostWithUser",
              "ForumTag",
              "ThreadPrefix",
              "ThreadWithPostsAndUser"
            ]
          },
          "riskLevel": "critical",
          "migrationEffort": 2.7
        },
        {
          "path": "client/src/features/forum/contexts/ThreadActionsContext.tsx",
          "domain": "forum-core",
          "subdomain": "contexts",
          "layer": "other",
          "size": 4271,
          "lines": 138,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/hooks/use-toast",
            "@/hooks/use-tip",
            "@/features/forum/hooks/useForumQueries",
            "@/features/forum/hooks/useForumQueries",
            "@/types/thread.types",
            "@tanstack/react-query"
          ],
          "exports": [
            "ThreadActionsProvider",
            "useThreadActions",
            "useThreadActionsOptional"
          ],
          "idPatterns": [
            {
              "type": "conversion",
              "pattern": "Number(thread.user.id)",
              "line": 38,
              "context": "const authorId = Number(thread.user.id);",
              "suggestedFix": "remove Number(), use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "Number(thread.id)",
              "line": 46,
              "context": "const threadId = Number(thread.id);",
              "suggestedFix": "remove Number(), use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "Number(thread.id)",
              "line": 89,
              "context": "const threadIdNum = Number(thread.id);",
              "suggestedFix": "remove Number(), use branded type",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "ThreadDisplay"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4000000000000001
        },
        {
          "path": "client/src/features/forum/hooks/useThreadPermissions.ts",
          "domain": "forum-core",
          "subdomain": "hooks",
          "layer": "hooks",
          "size": 4640,
          "lines": 177,
          "complexity": 3,
          "dependencies": [
            "@/hooks/use-auth",
            "@/contexts/ForumStructureContext",
            "@/types/thread.types"
          ],
          "exports": [
            "MOCK_THREAD",
            "MOCK_POST",
            "useThreadPermissions"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ThreadDisplay"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.1
        },
        {
          "path": "client/src/features/forum/hooks/useForumStats.ts",
          "domain": "forum-core",
          "subdomain": "hooks",
          "layer": "hooks",
          "size": 1491,
          "lines": 63,
          "complexity": 1,
          "dependencies": [
            "@tanstack/react-query",
            "@/lib/queryClient"
          ],
          "exports": [
            "ForumMetrics",
            "useForumMetrics",
            "HotThread",
            "useHotThreads"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 30,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.8
        },
        {
          "path": "client/src/features/forum/hooks/useForumQueries.ts",
          "domain": "forum-core",
          "subdomain": "hooks",
          "layer": "hooks",
          "size": 13275,
          "lines": 454,
          "complexity": 3,
          "dependencies": [
            "@tanstack/react-query",
            "sonner",
            "@/types/forum",
            "@/types/compat/forum",
            "react",
            "@db/types"
          ],
          "exports": [
            "ThreadSearchParams",
            "useThreads",
            "useThread",
            "CreateThreadParams",
            "useCreateThread",
            "useUpdateThread",
            "useDeleteThread",
            "useSolveThread",
            "useUnsolveThread",
            "usePosts",
            "useCreatePost",
            "useUpdatePost",
            "useDeletePost",
            "useReactToPost",
            "useLikePost",
            "useUnlikePost",
            "useTipPost",
            "useBookmarkThread",
            "useRemoveBookmark",
            "useUserBookmarks"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 135,
              "context": "export const useUpdateThread = (threadId: number | undefined) => {",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 173,
              "context": "mutationFn: ({ threadId, postId }: { threadId: number; postId?: number }) =>",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 188,
              "context": "mutationFn: (threadId: number) => forumApi.unsolveThread(threadId),",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 202,
              "context": "threadId: number | undefined,",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 355,
              "context": "return useMutation<Tag, Error, { threadId: number; tagId: TagId }>({",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 368,
              "context": "return useMutation<void, Error, { threadId: number; tagId: TagId }>({",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 229,
              "context": "export const useUpdatePost = (postId: number | undefined) => {",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 263,
              "context": "mutationFn: ({ postId, reactionType }: { postId: number; reactionType: 'like' | 'dislike' }) =>",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 277,
              "context": "mutate: (postId: number) => reactToPost.mutate({ postId, reactionType: 'like' })",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 285,
              "context": "mutate: (postId: number) => reactToPost.mutate({ postId, reactionType: 'dislike' })",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 293,
              "context": "mutationFn: ({ postId, amount }: { postId: number; amount: number }) =>",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 419,
              "context": "postId: number;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ThreadSearchParams as OriginalThreadSearchParams"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 3.3000000000000003
        },
        {
          "path": "client/src/features/forum/hooks/useForumMutations.ts",
          "domain": "forum-core",
          "subdomain": "hooks",
          "layer": "hooks",
          "size": 4241,
          "lines": 176,
          "complexity": 2,
          "dependencies": [
            "@tanstack/react-query",
            "sonner",
            "@/lib/api-request",
            "@/types/compat/forum",
            "@db/types"
          ],
          "exports": [
            "useQuotePost",
            "useReportContent",
            "useAwardForumXP",
            "useAwardForumDGT",
            "useLikePost",
            "useUnlikePost",
            "useTipPost",
            "useCreatePost",
            "useUpdatePost",
            "useDeletePost",
            "useSolveThread",
            "useUnsolveThread",
            "useBookmarkThread",
            "useRemoveBookmark"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 92,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 133,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 36,
              "context": "threadId: number;",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "PostWithUser"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.2000000000000002
        },
        {
          "path": "client/src/features/forum/components/index.ts",
          "domain": "forum-core",
          "subdomain": "components",
          "layer": "components",
          "size": 2239,
          "lines": 57,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "default as HierarchicalZoneNav ",
            "ForumListItem ",
            "ForumHeader ",
            "default as ThreadList ",
            "ThreadForm ",
            "default as PostCard ",
            "default as ReplyForm ",
            "default as CreatePostForm ",
            "default as LikeButton ",
            "default as ReactionTray ",
            "EditPostDialog ",
            "ReportPostDialog ",
            "default as HotThreads "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/features/forum/components/ThreadList.tsx",
          "domain": "forum-core",
          "subdomain": "components",
          "layer": "components",
          "size": 6116,
          "lines": 203,
          "complexity": 4,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/components/forum/ThreadCard",
            "@/lib/queryClient",
            "@/components/ui/pagination",
            "@/components/ui/thread-skeleton",
            "@/components/forum/ThreadFilters",
            "@/types/thread.types",
            "@/config/pagination.config",
            "@/features/forum/contexts/ThreadActionsContext",
            "@/components/forum/ThreadRow",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 19,
              "context": "availableTags?: Array<{ id: number; name: string; slug: string }>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ThreadFiltersState"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.4
        },
        {
          "path": "client/src/features/forum/components/ThreadForm.tsx",
          "domain": "forum-core",
          "subdomain": "components",
          "layer": "components",
          "size": 8422,
          "lines": 273,
          "complexity": 1,
          "dependencies": [
            "react",
            "react-hook-form",
            "@hookform/resolvers/zod",
            "zod",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/editor/rich-text-editor",
            "@/components/ui/label",
            "@/components/ui/card",
            "@/components/ui/tabs",
            "lucide-react",
            "@/components/ui/alert",
            "@/lib/utils",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/hooks/use-toast",
            "wouter",
            "@/contexts/ForumStructureContext",
            "dompurify"
          ],
          "exports": [
            "ThreadForm"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "MergedRules"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "client/src/features/forum/components/ReportPostDialog.tsx",
          "domain": "forum-core",
          "subdomain": "components",
          "layer": "components",
          "size": 4803,
          "lines": 157,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "@/components/ui/label",
            "@/components/ui/textarea",
            "@/features/forum/hooks/useForumQueries",
            "lucide-react",
            "@/types/compat/forum"
          ],
          "exports": [
            "ReportPostDialog"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "PostWithUser"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/features/forum/components/ReplyForm.tsx",
          "domain": "forum-core",
          "subdomain": "components",
          "layer": "components",
          "size": 7161,
          "lines": 251,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "@/components/ui/textarea",
            "@/components/ui/card",
            "@/components/editor/rich-text-editor",
            "@/components/ui/loader",
            "@/hooks/use-auth",
            "wouter",
            "lucide-react",
            "@/lib/utils",
            "@/hooks/useMediaQuery",
            "@/utils/adaptiveSpacing",
            "@/types/compat/forum"
          ],
          "exports": [
            "ReplyForm"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 16,
              "context": "threadId: number;",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "PostWithUser"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1
        },
        {
          "path": "client/src/features/forum/components/ReactionTray.tsx",
          "domain": "forum-core",
          "subdomain": "components",
          "layer": "components",
          "size": 2177,
          "lines": 69,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/lib/utils",
            "@/components/ui/button"
          ],
          "exports": [
            "ReactionTray"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 6,
              "context": "postId: number; // postId might be used for keys or future data fetching within this component",
              "suggestedFix": "PostId",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1
        },
        {
          "path": "client/src/features/forum/components/PostCard.tsx",
          "domain": "forum-core",
          "subdomain": "components",
          "layer": "components",
          "size": 12949,
          "lines": 422,
          "complexity": 1,
          "dependencies": [
            "react",
            "dompurify",
            "wouter",
            "@/components/ui/card",
            "@/components/profile/UnifiedProfileCard",
            "@/components/ui/button",
            "@/components/ui/badge",
            "date-fns",
            "@/types/compat/forum",
            "@/components/forum/SolveBadge",
            "@/components/forum/SignatureRenderer",
            "@/hooks/use-auth",
            "@/components/ui/tooltip-utils",
            "@/components/forum/ModeratorActions",
            "@/components/economy/wallet/tip-button",
            "@/lib/utils",
            "@/hooks/useMediaQuery",
            "@/utils/adaptiveSpacing"
          ],
          "exports": [
            "PostCard"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 42,
              "context": "onLike?: (id: number, hasLiked: boolean) => void;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 43,
              "context": "onReply?: (id: number) => void;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 44,
              "context": "onEdit?: (id: number) => void;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 45,
              "context": "onDelete?: (id: number) => void;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 46,
              "context": "onMarkAsSolution?: (id: number) => void;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 47,
              "context": "onReport?: (id: number) => void; // New prop",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "PostWithUser"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 3.3
        },
        {
          "path": "client/src/features/forum/components/LikeButton.tsx",
          "domain": "forum-core",
          "subdomain": "components",
          "layer": "components",
          "size": 1919,
          "lines": 74,
          "complexity": 1,
          "dependencies": [
            "react",
            "lucide-react",
            "@/lib/utils"
          ],
          "exports": [
            "LikeButton"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 6,
              "context": "postId: number; // Retained for context, though not directly used in this simplified version",
              "suggestedFix": "PostId",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.8
        },
        {
          "path": "client/src/features/forum/components/HotThreads.tsx",
          "domain": "forum-core",
          "subdomain": "components",
          "layer": "components",
          "size": 8792,
          "lines": 247,
          "complexity": 2,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/components/ui/card",
            "wouter",
            "lucide-react",
            "date-fns",
            "@/components/ui/badge",
            "@/components/ui/avatar",
            "@/components/ui/thread-skeleton",
            "@/constants/apiRoutes"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/features/forum/components/HierarchicalZoneNav.tsx",
          "domain": "forum-core",
          "subdomain": "components",
          "layer": "components",
          "size": 17516,
          "lines": 551,
          "complexity": 5,
          "dependencies": [
            "react",
            "wouter",
            "@/contexts/ForumStructureContext",
            "@/components/ui/badge",
            "framer-motion",
            "@/lib/utils",
            "@/navigation/forumNav",
            "@/contexts/ForumThemeProvider"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.5
        },
        {
          "path": "client/src/features/forum/components/ForumListItem.tsx",
          "domain": "forum-core",
          "subdomain": "components",
          "layer": "components",
          "size": 6452,
          "lines": 215,
          "complexity": 2,
          "dependencies": [
            "wouter",
            "lucide-react",
            "@/contexts/ForumStructureContext",
            "react",
            "@/components/ui/stat-chip",
            "@/components/ui/badge",
            "@/hooks/usePermission",
            "@/utils/card-constants",
            "@/hooks/use-auth"
          ],
          "exports": [
            "ForumListItem"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "MergedForum"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/features/forum/components/ForumHeader.tsx",
          "domain": "forum-core",
          "subdomain": "components",
          "layer": "components",
          "size": 3916,
          "lines": 108,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/card",
            "@/components/ui/badge",
            "lucide-react",
            "@/features/forum/hooks/useForumStructure",
            "@/contexts/ForumStructureContext"
          ],
          "exports": [
            "ForumHeader"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "MergedForum",
              "MergedZone"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/features/forum/components/EditPostDialog.tsx",
          "domain": "forum-core",
          "subdomain": "components",
          "layer": "components",
          "size": 2729,
          "lines": 102,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "@/components/editor/rich-text-editor",
            "@/features/forum/hooks/useForumQueries",
            "sonner",
            "lucide-react",
            "@/types/compat/forum"
          ],
          "exports": [
            "EditPostDialog"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "PostWithUser"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/features/forum/components/CreateThreadForm.tsx",
          "domain": "forum-core",
          "subdomain": "components",
          "layer": "components",
          "size": 22259,
          "lines": 715,
          "complexity": 6,
          "dependencies": [
            "react",
            "react",
            "react-hook-form",
            "@hookform/resolvers/zod",
            "zod",
            "wouter",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/hooks/use-toast",
            "@/components/editor/rich-text-editor",
            "@/hooks/use-auth.tsx",
            "@/features/forum/hooks/useForumQueries",
            "@/features/forum/hooks/useForumQueries",
            "@/components/forum/prefix-badge",
            "@/hooks/use-draft",
            "lucide-react",
            "@/components/ui/button",
            "@/components/ui/input",
            "lucide-react",
            "@/components/ui/alert"
          ],
          "exports": [
            "CreateThreadForm"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 56,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "CreateThreadParams"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 3.500000000000001
        },
        {
          "path": "client/src/features/forum/components/CreatePostForm.tsx",
          "domain": "forum-core",
          "subdomain": "components",
          "layer": "components",
          "size": 3016,
          "lines": 127,
          "complexity": 2,
          "dependencies": [
            "@hookform/resolvers/zod",
            "react-hook-form",
            "zod",
            "@/components/ui/textarea",
            "@/components/ui/button",
            "@/lib/queryClient",
            "@/hooks/use-auth",
            "@/hooks/use-toast",
            "@tanstack/react-query"
          ],
          "exports": [
            "CreatePostForm"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 25,
              "context": "threadId: number;",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.5
        },
        {
          "path": "client/src/components/platform-energy/recent-posts/recent-posts-feed.tsx",
          "domain": "forum-core",
          "subdomain": "recent-posts-feed.tsx",
          "layer": "components",
          "size": 6273,
          "lines": 228,
          "complexity": 2,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "wouter",
            "@/components/ui/avatar",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/skeleton",
            "date-fns",
            "lucide-react",
            "@/lib/utils"
          ],
          "exports": [
            "RecentPost",
            "RecentPostsFeed"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 64,
              "context": "const toggleExpand = (postId: number) => {",
              "suggestedFix": "PostId",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1
        },
        {
          "path": "client/src/components/platform-energy/featured-threads/featured-threads-slider.tsx",
          "domain": "forum-core",
          "subdomain": "featured-threads-slider.tsx",
          "layer": "components",
          "size": 5631,
          "lines": 192,
          "complexity": 2,
          "dependencies": [
            "@tanstack/react-query",
            "wouter",
            "@/components/ui/avatar",
            "@/components/ui/skeleton",
            "@/components/ui/badge",
            "date-fns",
            "lucide-react",
            "@/lib/utils"
          ],
          "exports": [
            "FeaturedThread",
            "FeaturedThreadsSlider"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/forum/layouts/index.ts",
          "domain": "forum-core",
          "subdomain": "layouts",
          "layer": "components",
          "size": 484,
          "lines": 10,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "default as ResponsiveForumLayout ",
            "default as MagicForumBuilder ",
            "default as AdaptiveForumGrid "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/forum/layouts/ResponsiveForumLayout.tsx",
          "domain": "forum-core",
          "subdomain": "layouts",
          "layer": "components",
          "size": 9795,
          "lines": 333,
          "complexity": 1,
          "dependencies": [
            "react",
            "framer-motion",
            "@/components/ui/button",
            "@/components/ui/sheet",
            "@/lib/utils",
            "@/hooks/useMediaQuery",
            "@/components/forum/enhanced/MobileForumNavigation",
            "@/features/forum/components/HierarchicalZoneNav"
          ],
          "exports": [
            "ResponsiveForumLayoutProps"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/components/forum/layouts/MagicForumBuilder.tsx",
          "domain": "forum-core",
          "subdomain": "layouts",
          "layer": "components",
          "size": 20897,
          "lines": 688,
          "complexity": 2,
          "dependencies": [
            "react",
            "framer-motion",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/slider",
            "@/components/ui/input",
            "@/components/ui/label",
            "@/components/ui/tabs",
            "@/components/ui/card",
            "@/lib/utils",
            "@/components/forum/ThreadCard",
            "@/components/forum/ZoneCard",
            "@/components/forum/enhanced/CryptoEngagementBar",
            "@/components/forum/enhanced/QuickReactions"
          ],
          "exports": [
            "MagicForumBuilderProps",
            "ForumLayoutConfig"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/components/forum/layouts/AdaptiveForumGrid.tsx",
          "domain": "forum-core",
          "subdomain": "layouts",
          "layer": "components",
          "size": 12843,
          "lines": 429,
          "complexity": 2,
          "dependencies": [
            "react",
            "framer-motion",
            "@tanstack/react-virtual",
            "lucide-react",
            "@/components/ui/button",
            "@/lib/utils",
            "@/hooks/useMediaQuery"
          ],
          "exports": [
            "AdaptiveForumGridProps"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.0999999999999999
        },
        {
          "path": "client/src/components/forum/enhanced/QuickReactions.tsx",
          "domain": "forum-core",
          "subdomain": "enhanced",
          "layer": "components",
          "size": 8117,
          "lines": 308,
          "complexity": 1,
          "dependencies": [
            "react",
            "framer-motion",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/lib/utils"
          ],
          "exports": [
            "Reaction",
            "QuickReactionsProps",
            "QuickReactions "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/forum/enhanced/MobileForumNavigation.tsx",
          "domain": "forum-core",
          "subdomain": "enhanced",
          "layer": "components",
          "size": 11799,
          "lines": 387,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "framer-motion",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/input",
            "@/lib/utils",
            "@/contexts/ForumStructureContext"
          ],
          "exports": [
            "MobileForumNavigationProps"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/components/forum/enhanced/CryptoEngagementBar.tsx",
          "domain": "forum-core",
          "subdomain": "enhanced",
          "layer": "components",
          "size": 9304,
          "lines": 313,
          "complexity": 1,
          "dependencies": [
            "react",
            "framer-motion",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/lib/utils"
          ],
          "exports": [
            "CryptoEngagementBarProps",
            "CryptoEngagementBar "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/forum/sidebar/index.ts",
          "domain": "forum-core",
          "subdomain": "sidebar",
          "layer": "components",
          "size": 316,
          "lines": 7,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "SidebarWidgetCard ",
            "WidgetSkeleton ",
            "StatsWidget ",
            "HotTopicsWidget ",
            "ActivityFeedWidget ",
            "DynamicSidebar "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/forum/sidebar/WidgetSkeleton.tsx",
          "domain": "forum-core",
          "subdomain": "sidebar",
          "layer": "components",
          "size": 875,
          "lines": 30,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/lib/utils"
          ],
          "exports": [
            "WidgetSkeleton"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/forum/sidebar/StatsWidget.tsx",
          "domain": "forum-core",
          "subdomain": "sidebar",
          "layer": "components",
          "size": 2056,
          "lines": 85,
          "complexity": 1,
          "dependencies": [
            "react",
            "lucide-react",
            "@/features/forum/hooks/useForumStats",
            "@/lib/utils"
          ],
          "exports": [
            "StatsWidget"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/forum/sidebar/SidebarWidgetCard.tsx",
          "domain": "forum-core",
          "subdomain": "sidebar",
          "layer": "components",
          "size": 1421,
          "lines": 55,
          "complexity": 1,
          "dependencies": [
            "react",
            "lucide-react",
            "@/contexts/ForumThemeProvider",
            "@/lib/utils"
          ],
          "exports": [
            "SidebarWidgetCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/forum/sidebar/SidebarIntegrationExample.tsx",
          "domain": "forum-core",
          "subdomain": "sidebar",
          "layer": "components",
          "size": 2221,
          "lines": 68,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/components/forum/QuickStats",
            "@/components/forum/HotTopics",
            "@/components/forum/RecentActivity"
          ],
          "exports": [
            "ForumSidebar",
            "ZonePageSidebar",
            "ForumPageSidebar",
            "ThreadPageSidebar"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.5
        },
        {
          "path": "client/src/components/forum/sidebar/HotTopicsWidget.tsx",
          "domain": "forum-core",
          "subdomain": "sidebar",
          "layer": "components",
          "size": 3386,
          "lines": 114,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "lucide-react",
            "@/features/forum/hooks/useForumStats",
            "date-fns",
            "@/lib/utils"
          ],
          "exports": [
            "HotTopicsWidget"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/forum/sidebar/DynamicSidebar.tsx",
          "domain": "forum-core",
          "subdomain": "sidebar",
          "layer": "components",
          "size": 2019,
          "lines": 77,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/lib/forum/sidebarUtils",
            "@/lib/utils"
          ],
          "exports": [
            "DynamicSidebar"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/forum/sidebar/ActivityFeedWidget.tsx",
          "domain": "forum-core",
          "subdomain": "sidebar",
          "layer": "components",
          "size": 3697,
          "lines": 136,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "lucide-react",
            "@/features/activity/hooks/useActivityFeed",
            "date-fns",
            "@/features/activity/services/activityApi"
          ],
          "exports": [
            "ActivityFeedWidget"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "EventLog"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/forum/bbcode/index.ts",
          "domain": "forum-core",
          "subdomain": "bbcode",
          "layer": "components",
          "size": 215,
          "lines": 6,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "PostHeader ",
            "PostSidebar ",
            "PostBody ",
            "PostActions ",
            "PostFooter "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/forum/bbcode/QuickReplyBox.tsx",
          "domain": "forum-core",
          "subdomain": "bbcode",
          "layer": "components",
          "size": 4229,
          "lines": 152,
          "complexity": 1,
          "dependencies": [
            "react",
            "framer-motion",
            "lucide-react",
            "@/components/ui/button",
            "@/components/ui/textarea",
            "@/components/identity/AvatarFrame",
            "@/lib/utils"
          ],
          "exports": [
            "QuickReplyBox"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 10,
              "context": "threadId: number;",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.8
        },
        {
          "path": "client/src/components/forum/bbcode/PostSidebar.tsx",
          "domain": "forum-core",
          "subdomain": "bbcode",
          "layer": "components",
          "size": 6153,
          "lines": 214,
          "complexity": 1,
          "dependencies": [
            "react",
            "lucide-react",
            "@/components/ui/badge",
            "@/components/identity/AvatarFrame",
            "@/components/users/Username",
            "@/components/economy/xp/LevelBadge",
            "@tanstack/react-query",
            "date-fns",
            "@/config/brand.config",
            "@/lib/utils",
            "@/types/profile"
          ],
          "exports": [
            "PostSidebar"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ProfileData"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/components/forum/bbcode/PostHeader.tsx",
          "domain": "forum-core",
          "subdomain": "bbcode",
          "layer": "components",
          "size": 3018,
          "lines": 111,
          "complexity": 1,
          "dependencies": [
            "react",
            "lucide-react",
            "@/components/ui/badge",
            "@/components/ui/button",
            "date-fns",
            "@/config/brand.config",
            "@/lib/utils"
          ],
          "exports": [
            "PostHeader"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 10,
              "context": "postId: number;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.8
        },
        {
          "path": "client/src/components/forum/bbcode/PostFooter.tsx",
          "domain": "forum-core",
          "subdomain": "bbcode",
          "layer": "components",
          "size": 2167,
          "lines": 87,
          "complexity": 1,
          "dependencies": [
            "react",
            "lucide-react",
            "date-fns",
            "@/lib/utils",
            "@/config/brand.config"
          ],
          "exports": [
            "PostFooter"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/forum/bbcode/PostBody.tsx",
          "domain": "forum-core",
          "subdomain": "bbcode",
          "layer": "components",
          "size": 6141,
          "lines": 291,
          "complexity": 2,
          "dependencies": [
            "react",
            "dompurify",
            "@/lib/utils",
            "@/config/brand.config"
          ],
          "exports": [
            "PostBody"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/forum/bbcode/PostActions.tsx",
          "domain": "forum-core",
          "subdomain": "bbcode",
          "layer": "components",
          "size": 7099,
          "lines": 270,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "@/lib/utils",
            "@/config/brand.config"
          ],
          "exports": [
            "PostActions"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 30,
              "context": "postId: number;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 41,
              "context": "onLike?: (postId: number, hasLiked: boolean) => void;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 42,
              "context": "onReply?: (postId: number) => void;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 43,
              "context": "onQuote?: (postId: number) => void;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 44,
              "context": "onEdit?: (postId: number) => void;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 45,
              "context": "onDelete?: (postId: number) => void;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 46,
              "context": "onMarkSolution?: (postId: number) => void;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 47,
              "context": "onTip?: (postId: number) => void;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 48,
              "context": "onReport?: (postId: number) => void;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 49,
              "context": "onBookmark?: (postId: number) => void;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 50,
              "context": "onShare?: (postId: number) => void;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 51,
              "context": "onCopyLink?: (postId: number) => void;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 1.9000000000000001
        },
        {
          "path": "client/src/components/forum/layouts/__tests__/ResponsiveForumLayout.test.tsx",
          "domain": "forum-core",
          "subdomain": "layouts",
          "layer": "components",
          "size": 12087,
          "lines": 384,
          "complexity": 3,
          "dependencies": [
            "react",
            "vitest"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ResponsiveForumLayoutProps"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.1
        },
        {
          "path": "client/src/components/forum/layouts/__tests__/AdaptiveForumGrid.test.tsx",
          "domain": "forum-core",
          "subdomain": "layouts",
          "layer": "components",
          "size": 9446,
          "lines": 347,
          "complexity": 2,
          "dependencies": [
            "react",
            "vitest",
            "@/hooks/useMediaQuery",
            "@tanstack/react-virtual"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "AdaptiveForumGridProps"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/components/forum/enhanced/__tests__/QuickReactions.test.tsx",
          "domain": "forum-core",
          "subdomain": "enhanced",
          "layer": "components",
          "size": 9302,
          "lines": 306,
          "complexity": 1,
          "dependencies": [
            "react",
            "vitest"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Reaction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/components/forum/enhanced/__tests__/EnhancedThreadCard.test.tsx",
          "domain": "forum-core",
          "subdomain": "enhanced",
          "layer": "components",
          "size": 7635,
          "lines": 275,
          "complexity": 2,
          "dependencies": [
            "react",
            "vitest"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ThreadCardProps"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/components/forum/enhanced/__tests__/CryptoEngagementBar.test.tsx",
          "domain": "forum-core",
          "subdomain": "enhanced",
          "layer": "components",
          "size": 9824,
          "lines": 300,
          "complexity": 2,
          "dependencies": [
            "react",
            "vitest"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "CryptoEngagementBarProps"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9
        }
      ],
      "totalIssues": 117,
      "avgComplexity": 1.4301075268817205,
      "migrationEffort": 197.30000000000007,
      "dependencies": [
        "@playwright/test",
        "@db/types",
        "@paralleldrive/cuid2",
        "@/db",
        "@/schema/forum/structure",
        "@/client/src/config/forumMap.config",
        "@db",
        "@schema",
        "@neondatabase/serverless",
        "@server/src/lib/db",
        "@/contexts/ForumStructureContext",
        "@/client/src/types/canonical.types",
        "@db/types/id.types",
        "@db/schema/core/enums",
        "@/lib/db",
        "@db/schema",
        "@/types/compat/forum",
        "@tanstack/react-query",
        "@/components/ui/tabs",
        "@/components/ui/button",
        "@/components/ui/checkbox",
        "@/components/ui/badge",
        "@/components/ui/alert",
        "@/components/ui/separator",
        "@/hooks/use-toast",
        "@/hooks/use-auth.tsx",
        "@/lib/queryClient",
        "@/components/ui/loader",
        "@/utils/forum-urls",
        "@/features/forum/services/forumApi",
        "@/types/canonical.types",
        "@/components/forum/ThreadFilters",
        "@/styles/cssVariables",
        "@/config/forumMap.config",
        "@/config/featureFlags",
        "@/features/forum/components/ThreadForm",
        "@/components/ui/card",
        "@/hooks/use-auth",
        "@/lib/utils",
        "@/components/footer/SiteFooter",
        "@/components/ui/Container",
        "@/features/forum/hooks/useForumQueries",
        "@/components/forum/BBCodePostCard",
        "@/components/forum/ThreadSidebar",
        "@/components/forum/ThreadPagination",
        "@/components/forum/bbcode/QuickReplyBox",
        "@/components/footer",
        "@/components/ui/skeleton",
        "@/layout/primitives",
        "@/hooks/useSearchParams",
        "@/lib/forum/breadcrumbs",
        "@/components/forum/sidebar",
        "@/features/forum/contexts/ThreadActionsContext",
        "@/components/ui/input",
        "@/components/ui/error-display",
        "@/components/forum/forum-guidelines",
        "@/components/users",
        "@/features/users/hooks",
        "@/utils/spacing-constants",
        "@/contexts/ForumThemeProvider",
        "@/components/forum/ForumPage",
        "@/components/forum/ForumErrorBoundary",
        "@/components/ui/dialog",
        "@/components/admin/layout/AdminPageShell",
        "@/components/admin/common/AdminDataTable",
        "@/components/admin/layout/EntityTable",
        "@hookform/resolvers/zod",
        "@/components/admin/inputs/AdminAccessSelector",
        "@/components/admin/inputs/AdminToggle",
        "@/constants/routes",
        "@/config/sidebarWidgets.config",
        "@/components/navigation/ForumBreadcrumbs",
        "@/components/ui/label",
        "@/components/ui/switch",
        "@/components/ui/slider",
        "@/components/ui/popover",
        "@/hooks/useMediaQuery",
        "@/hooks/use-local-storage",
        "@/components/ui/tooltip",
        "@/components/ui/avatar",
        "@/types/thread.types",
        "@/components/ui/scroll-area",
        "@/components/ui/textarea",
        "@/types/forum",
        "@/utils/card-constants",
        "@/hooks/useShowHotRibbon",
        "@/components/ui/safe-image",
        "@/config/animation.config",
        "@shared/config/zoneThemes.config",
        "@/components/icons/iconRenderer",
        "@/components/forum/QuickReplyInput",
        "@/components/ui/tooltip-utils",
        "@/components/ui/frost-card",
        "@/components/forum/enhanced/QuickReactions",
        "@/hooks/useForumFilters",
        "@/features/forum/components/ThreadList",
        "@/components/forum/ForumHeader",
        "@/components/forum/ShopCard",
        "@/components/forum/ZoneCard",
        "@/components/profile/UnifiedProfileCard",
        "@/config/brand.config",
        "@/lib/api-request",
        "@/types/core.types",
        "@/hooks/use-tip",
        "@/components/forum/ThreadCard",
        "@/components/ui/pagination",
        "@/components/ui/thread-skeleton",
        "@/config/pagination.config",
        "@/components/forum/ThreadRow",
        "@/components/editor/rich-text-editor",
        "@/utils/adaptiveSpacing",
        "@/components/forum/SolveBadge",
        "@/components/forum/SignatureRenderer",
        "@/components/forum/ModeratorActions",
        "@/components/economy/wallet/tip-button",
        "@/constants/apiRoutes",
        "@/navigation/forumNav",
        "@/components/ui/stat-chip",
        "@/hooks/usePermission",
        "@/features/forum/hooks/useForumStructure",
        "@/components/forum/prefix-badge",
        "@/hooks/use-draft",
        "@/components/ui/sheet",
        "@/components/forum/enhanced/MobileForumNavigation",
        "@/features/forum/components/HierarchicalZoneNav",
        "@/components/forum/enhanced/CryptoEngagementBar",
        "@tanstack/react-virtual",
        "@/features/forum/hooks/useForumStats",
        "@/components/forum/QuickStats",
        "@/components/forum/HotTopics",
        "@/components/forum/RecentActivity",
        "@/lib/forum/sidebarUtils",
        "@/features/activity/hooks/useActivityFeed",
        "@/features/activity/services/activityApi",
        "@/components/identity/AvatarFrame",
        "@/components/users/Username",
        "@/components/economy/xp/LevelBadge",
        "@/types/profile"
      ],
      "dependents": [],
      "criticalPath": true,
      "riskAssessment": {
        "runtime": "critical",
        "testing": "high",
        "integration": "low"
      },
      "migrationStrategy": {
        "priority": 1,
        "approach": "incremental",
        "estimatedDays": 40,
        "blockers": [],
        "prerequisites": []
      }
    },
    {
      "name": "gamification",
      "files": [
        {
          "path": "server/services/xp-level-service.ts",
          "domain": "gamification",
          "layer": "services",
          "size": 17227,
          "lines": 610,
          "complexity": 10,
          "dependencies": [
            "@db",
            "drizzle-orm",
            "@shared/economy/reward-calculator",
            "@shared/economy/economy.config"
          ],
          "exports": [
            "XP_ACTIONS",
            "XpLevelService",
            "xpLevelService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 61,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 231,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 297,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 328,
              "context": "private async distributeRewards(tx: any, userId: number, level: number): Promise<void> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 475,
              "context": "async getUserXpInfo(userId: number): Promise<{",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 556,
              "context": "private async getUserXpMultiplier(userId: number, forumId?: number): Promise<number> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "critical",
          "migrationEffort": 2.8000000000000003
        },
        {
          "path": "server/services/xp-clout-service.ts",
          "domain": "gamification",
          "layer": "services",
          "size": 3578,
          "lines": 113,
          "complexity": 4,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [
            "XpCloutService",
            "xpCloutService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 44,
              "context": "async awardPoints(userId: number, actionKey: string, multiplier: number = 1): Promise<boolean> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 95,
              "context": "async checkLevelUp(userId: number): Promise<void> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 1
        },
        {
          "path": "server/migrations/xp-clout-levels-migration.ts",
          "domain": "gamification",
          "layer": "other",
          "size": 7151,
          "lines": 159,
          "complexity": 3,
          "dependencies": [
            "drizzle-orm/node-postgres",
            "pg",
            "drizzle-orm",
            "dotenv",
            "url"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.1
        },
        {
          "path": "server/migrations/add-daily-xp-tracking.ts",
          "domain": "gamification",
          "layer": "other",
          "size": 2924,
          "lines": 83,
          "complexity": 2,
          "dependencies": [
            "drizzle-orm/node-postgres",
            "pg",
            "drizzle-orm",
            "url",
            "dotenv"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "server/migrations/20250624_add_visual_fields_to_levels.ts",
          "domain": "gamification",
          "layer": "other",
          "size": 3360,
          "lines": 83,
          "complexity": 2,
          "dependencies": [
            "drizzle-orm/node-postgres",
            "pg",
            "drizzle-orm",
            "dotenv"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "server/migrations/20250618_add_clout_achievements.ts",
          "domain": "gamification",
          "layer": "other",
          "size": 3480,
          "lines": 90,
          "complexity": 2,
          "dependencies": [
            "drizzle-orm/node-postgres",
            "pg",
            "drizzle-orm",
            "dotenv"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "server/migrations/20250512_create_xp_action_logs.ts",
          "domain": "gamification",
          "layer": "other",
          "size": 2027,
          "lines": 51,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm",
            "@db"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "server/migrations/20250510_create_xp_adjustment_logs.ts",
          "domain": "gamification",
          "layer": "other",
          "size": 1214,
          "lines": 34,
          "complexity": 1,
          "dependencies": [
            "@db",
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "scripts/testing/test-xp-system.ts",
          "domain": "gamification",
          "layer": "other",
          "size": 8452,
          "lines": 212,
          "complexity": 3,
          "dependencies": [
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types"
          ],
          "exports": [
            "testXpSystem "
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 85,
              "context": "let userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "HeatEventId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7000000000000002
        },
        {
          "path": "scripts/db/seed-xp-actions.ts",
          "domain": "gamification",
          "layer": "other",
          "size": 3261,
          "lines": 54,
          "complexity": 2,
          "dependencies": [
            "@/db",
            "@/schema/economy/xpActionSettings",
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        },
        {
          "path": "scripts/db/seed-default-levels.ts",
          "domain": "gamification",
          "layer": "other",
          "size": 5715,
          "lines": 149,
          "complexity": 3,
          "dependencies": [
            "node:crypto",
            "@paralleldrive/cuid2",
            "@/db",
            "@/schema",
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.6000000000000001
        },
        {
          "path": "scripts/db/seed-badges.ts",
          "domain": "gamification",
          "layer": "other",
          "size": 1850,
          "lines": 60,
          "complexity": 1,
          "dependencies": [
            "@db",
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "scripts/db/seed-achievements.ts",
          "domain": "gamification",
          "layer": "other",
          "size": 2070,
          "lines": 67,
          "complexity": 2,
          "dependencies": [
            "@db",
            "@schema"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        },
        {
          "path": "scripts/db/initialize-xp-system.ts",
          "domain": "gamification",
          "layer": "other",
          "size": 2369,
          "lines": 73,
          "complexity": 1,
          "dependencies": [
            "@db",
            "drizzle-orm",
            "url",
            "dotenv"
          ],
          "exports": [
            "initializeXpSystem "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "scripts/db/check-levels-table.ts",
          "domain": "gamification",
          "layer": "other",
          "size": 1573,
          "lines": 53,
          "complexity": 2,
          "dependencies": [
            "pg",
            "dotenv"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        },
        {
          "path": "shared/types/config/xp.schema.ts",
          "domain": "gamification",
          "layer": "types",
          "size": 7678,
          "lines": 248,
          "complexity": 1,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "XpActionSchema",
            "XpMultiplierSchema",
            "LevelFormulaSchema",
            "LevelMilestoneSchema",
            "XpConfigSchema",
            "XpConfig",
            "XpAction",
            "XpMultiplier",
            "LevelFormula",
            "LevelMilestone",
            "validateXpConfig",
            "validatePartialXpConfig",
            "defaultXpConfig"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "server/src/middleware/subscription-permissions.ts",
          "domain": "gamification",
          "layer": "middleware",
          "size": 4221,
          "lines": 166,
          "complexity": 3,
          "dependencies": [
            "express"
          ],
          "exports": [
            "requireVipAccess",
            "requireDegenAccess",
            "requirePremiumAccess",
            "requireSubscriptionBenefit"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.1
        },
        {
          "path": "server/src/middleware/mission-progress.ts",
          "domain": "gamification",
          "layer": "middleware",
          "size": 2650,
          "lines": 94,
          "complexity": 3,
          "dependencies": [
            "express",
            "@schema"
          ],
          "exports": [
            "trackMissionProgress"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 55,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 1.7000000000000002
        },
        {
          "path": "server/src/cron/mission-reset.ts",
          "domain": "gamification",
          "layer": "other",
          "size": 1322,
          "lines": 43,
          "complexity": 1,
          "dependencies": [
            "node-cron"
          ],
          "exports": [
            "initializeMissionResetJobs"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "db/schema/gamification/missions.ts",
          "domain": "gamification",
          "layer": "other",
          "size": 1577,
          "lines": 28,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "missions",
            "Mission",
            "InsertMission"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "db/schema/gamification/leaderboards.ts",
          "domain": "gamification",
          "layer": "other",
          "size": 907,
          "lines": 18,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "leaderboardHistory",
            "LeaderboardHistoryItem"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/gamification/achievements.ts",
          "domain": "gamification",
          "layer": "other",
          "size": 2411,
          "lines": 88,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "achievements",
            "Achievement",
            "InsertAchievement",
            "AchievementCategory",
            "AchievementTier",
            "AchievementTriggerType"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/gamification/achievementEvents.ts",
          "domain": "gamification",
          "layer": "other",
          "size": 1391,
          "lines": 45,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "achievementEvents",
            "AchievementEvent",
            "InsertAchievementEvent",
            "AchievementEventType",
            "ProcessingStatus"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/pages/leaderboard.tsx",
          "domain": "gamification",
          "layer": "pages",
          "size": 7615,
          "lines": 236,
          "complexity": 1,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/components/ui/loader",
            "@/components/ui/error-display",
            "@/lib/utils",
            "@/hooks/use-toast",
            "@/components/ui/card",
            "lucide-react",
            "@/components/ui/avatar",
            "framer-motion",
            "@/components/common/BackToHomeButton"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 23,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.8
        },
        {
          "path": "client/src/hooks/useXP.ts",
          "domain": "gamification",
          "layer": "hooks",
          "size": 4793,
          "lines": 188,
          "complexity": 3,
          "dependencies": [
            "@tanstack/react-query",
            "@/lib/queryClient",
            "sonner",
            "react",
            "@/lib/safeWebSocket"
          ],
          "exports": [
            "Level",
            "UserXP",
            "UserTitle",
            "UserBadge",
            "XpAdjustmentEntry",
            "useXP"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 37,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 47,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 56,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 4.4
        },
        {
          "path": "client/src/hooks/usePermission.ts",
          "domain": "gamification",
          "layer": "hooks",
          "size": 2261,
          "lines": 69,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/hooks/use-auth.tsx",
            "@/contexts/ForumStructureContext"
          ],
          "exports": [
            "PermissionResult",
            "usePermission"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "MergedForum"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/hooks/useMissions.ts",
          "domain": "gamification",
          "layer": "hooks",
          "size": 5991,
          "lines": 222,
          "complexity": 3,
          "dependencies": [
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/hooks/use-auth",
            "@/hooks/use-toast"
          ],
          "exports": [
            "Mission",
            "MissionProgress",
            "MissionReward",
            "useMissions"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 8,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 27,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 28,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 3.6000000000000005
        },
        {
          "path": "client/src/hooks/use-achievements.ts",
          "domain": "gamification",
          "layer": "hooks",
          "size": 6412,
          "lines": 230,
          "complexity": 3,
          "dependencies": [
            "@tanstack/react-query",
            "@/lib/api/achievements",
            "sonner",
            "@/types/core.types"
          ],
          "exports": [
            "useUserAchievements",
            "useAchievements",
            "useAchievementStats",
            "useAchievement",
            "useAchievementCompletions",
            "useAchievementTemplates",
            "useCreateAchievement",
            "useUpdateAchievement",
            "useDeleteAchievement",
            "useBulkUpdateAchievements",
            "useManuallyAwardAchievement",
            "useCreateFromTemplate",
            "useEmitAchievementEvent"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 55,
              "context": "export function useAchievement(id: number) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 68,
              "context": "export function useAchievementCompletions(id: number, page = 1, limit = 50) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 115,
              "context": "mutationFn: ({ id, data }: { id: number; data: Partial<Achievement> }) =>",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 135,
              "context": "mutationFn: (id: number) => achievementApi.deleteAchievement(id),",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 172,
              "context": "mutationFn: ({ id, userIds, reason }: { id: number; userIds: string[]; reason?: string }) =>",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ApiErrorData"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 3.6
        },
        {
          "path": "client/src/contexts/XpToastContext.tsx",
          "domain": "gamification",
          "layer": "other",
          "size": 2449,
          "lines": 96,
          "complexity": 1,
          "dependencies": [
            "framer-motion",
            "@/components/xp/XpToast",
            "@/lib/queryClient"
          ],
          "exports": [
            "useXpToast",
            "XpToastProvider"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/contexts/LevelUpContext.tsx",
          "domain": "gamification",
          "layer": "other",
          "size": 1794,
          "lines": 80,
          "complexity": 0,
          "dependencies": [
            "@/components/xp/LevelUpModal",
            "@/lib/queryClient"
          ],
          "exports": [
            "useLevelUp",
            "LevelUpProvider"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/gamification/mission.routes.ts",
          "domain": "gamification",
          "subdomain": "mission.routes.ts",
          "layer": "routes",
          "size": 2783,
          "lines": 123,
          "complexity": 1,
          "dependencies": [
            "express",
            "express-rate-limit"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "server/src/domains/gamification/mission.controller.ts",
          "domain": "gamification",
          "subdomain": "mission.controller.ts",
          "layer": "controllers",
          "size": 14460,
          "lines": 549,
          "complexity": 8,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "zod"
          ],
          "exports": [
            "MissionController",
            "missionController"
          ],
          "idPatterns": [
            {
              "type": "conversion",
              "pattern": "Number(req.params.id)",
              "line": 350,
              "context": "const missionId = Number(req.params.id);",
              "suggestedFix": "remove Number(), use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "Number(req.params.id)",
              "line": 419,
              "context": "const missionId = Number(req.params.id);",
              "suggestedFix": "remove Number(), use branded type",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 1.9999999999999998
        },
        {
          "path": "server/src/domains/gamification/leveling.service.ts",
          "domain": "gamification",
          "subdomain": "leveling.service.ts",
          "layer": "other",
          "size": 17037,
          "lines": 687,
          "complexity": 7,
          "dependencies": [
            "@db",
            "drizzle-orm",
            "@db/types"
          ],
          "exports": [
            "LevelInfo",
            "UserProgression",
            "LeaderboardEntry",
            "ProgressionAnalytics",
            "LevelingService",
            "levelingService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "UserId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.4000000000000004
        },
        {
          "path": "server/src/domains/gamification/leveling.routes.ts",
          "domain": "gamification",
          "subdomain": "leveling.routes.ts",
          "layer": "routes",
          "size": 2124,
          "lines": 96,
          "complexity": 0,
          "dependencies": [
            "express",
            "express-rate-limit"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/gamification/leveling.controller.ts",
          "domain": "gamification",
          "subdomain": "leveling.controller.ts",
          "layer": "controllers",
          "size": 10351,
          "lines": 409,
          "complexity": 7,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "zod"
          ],
          "exports": [
            "LevelingController",
            "levelingController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 2.4000000000000004
        },
        {
          "path": "server/src/domains/gamification/index.ts",
          "domain": "gamification",
          "subdomain": "index.ts",
          "layer": "other",
          "size": 922,
          "lines": 34,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "LevelingService",
            "levelingService",
            "AchievementService",
            "achievementService",
            "LevelingController",
            "levelingController",
            "AchievementController",
            "achievementController",
            "default as levelingRoutes ",
            "default as achievementRoutes "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/gamification/gamification.routes.ts",
          "domain": "gamification",
          "subdomain": "gamification.routes.ts",
          "layer": "routes",
          "size": 1706,
          "lines": 65,
          "complexity": 1,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "server/src/domains/gamification/analytics.service.ts",
          "domain": "gamification",
          "subdomain": "analytics.service.ts",
          "layer": "other",
          "size": 14947,
          "lines": 582,
          "complexity": 4,
          "dependencies": [
            "@db",
            "drizzle-orm",
            "@/db/types"
          ],
          "exports": [
            "ProgressionMetrics",
            "AchievementMetrics",
            "MissionMetrics",
            "EngagementMetrics",
            "SystemHealth",
            "GamificationDashboard",
            "GamificationAnalyticsService",
            "gamificationAnalyticsService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "UserId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7999999999999998
        },
        {
          "path": "server/src/domains/gamification/analytics.routes.ts",
          "domain": "gamification",
          "subdomain": "analytics.routes.ts",
          "layer": "routes",
          "size": 3121,
          "lines": 132,
          "complexity": 1,
          "dependencies": [
            "express",
            "express-rate-limit"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "server/src/domains/gamification/analytics.controller.ts",
          "domain": "gamification",
          "subdomain": "analytics.controller.ts",
          "layer": "controllers",
          "size": 11349,
          "lines": 435,
          "complexity": 7,
          "dependencies": [
            "express",
            "zod"
          ],
          "exports": [
            "GamificationAnalyticsController",
            "gamificationAnalyticsController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 1.4000000000000001
        },
        {
          "path": "server/src/domains/gamification/admin.routes.ts",
          "domain": "gamification",
          "subdomain": "admin.routes.ts",
          "layer": "routes",
          "size": 2747,
          "lines": 110,
          "complexity": 1,
          "dependencies": [
            "express",
            "express-rate-limit"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "server/src/domains/gamification/admin.controller.ts",
          "domain": "gamification",
          "subdomain": "admin.controller.ts",
          "layer": "controllers",
          "size": 16234,
          "lines": 595,
          "complexity": 7,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "zod"
          ],
          "exports": [
            "GamificationAdminController",
            "gamificationAdminController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 2.4000000000000004
        },
        {
          "path": "server/src/domains/gamification/achievement.service.ts",
          "domain": "gamification",
          "subdomain": "achievement.service.ts",
          "layer": "other",
          "size": 20587,
          "lines": 766,
          "complexity": 9,
          "dependencies": [
            "@db",
            "drizzle-orm",
            "@/db/types"
          ],
          "exports": [
            "AchievementDefinition",
            "AchievementRequirement",
            "UserAchievementProgress",
            "AchievementStats",
            "AchievementService",
            "achievementService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 28,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 639,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "UserId",
              "AchievementId"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 3
        },
        {
          "path": "server/src/domains/gamification/achievement.routes.ts",
          "domain": "gamification",
          "subdomain": "achievement.routes.ts",
          "layer": "routes",
          "size": 2692,
          "lines": 119,
          "complexity": 1,
          "dependencies": [
            "express",
            "express-rate-limit"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "server/src/domains/gamification/achievement.controller.ts",
          "domain": "gamification",
          "subdomain": "achievement.controller.ts",
          "layer": "controllers",
          "size": 12747,
          "lines": 483,
          "complexity": 7,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "zod"
          ],
          "exports": [
            "AchievementController",
            "achievementController"
          ],
          "idPatterns": [
            {
              "type": "conversion",
              "pattern": "Number(req.params.id)",
              "line": 449,
              "context": "const achievementId = Number(req.params.id);",
              "suggestedFix": "remove Number(), use branded type",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 1.7
        },
        {
          "path": "server/src/core/events/achievement-events.service.ts",
          "domain": "gamification",
          "layer": "other",
          "size": 7497,
          "lines": 265,
          "complexity": 5,
          "dependencies": [
            "@db",
            "@schema",
            "@schema"
          ],
          "exports": [
            "AchievementEventEmitter"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "AchievementEventType"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2
        },
        {
          "path": "client/src/pages/missions/index.tsx",
          "domain": "gamification",
          "subdomain": "index.tsx",
          "layer": "pages",
          "size": 3721,
          "lines": 114,
          "complexity": 1,
          "dependencies": [
            "react",
            "react-helmet",
            "wouter",
            "@/hooks/use-auth",
            "@/hooks/use-gamification",
            "@/components/gamification",
            "@/components/ui/button",
            "@/components/ui/card",
            "@/components/ui/alert",
            "lucide-react"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/pages/admin/xp-system.tsx",
          "domain": "gamification",
          "layer": "pages",
          "size": 22583,
          "lines": 705,
          "complexity": 3,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/hooks/use-toast",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/card",
            "@/components/ui/tabs",
            "@/lib/queryClient",
            "@/components/admin/layout/AdminPageShell",
            "@/components/admin/common/AdminDataTable",
            "@/components/admin/forms/xp/LevelFormDialogs",
            "@/components/admin/protected-admin-route",
            "@/hooks/use-admin-modules",
            "@/features/admin/services/xpActionsService"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 136,
              "context": "mutationFn: ({ id, data }: { id: number; data: LevelFormData }) =>",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 150,
              "context": "mutationFn: (id: number) => apiRequest({ url: `/api/admin/xp/levels/${id}`, method: 'DELETE' }),",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "Level",
              "LevelFormData"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 3.5
        },
        {
          "path": "client/src/lib/api/achievements.ts",
          "domain": "gamification",
          "layer": "utils",
          "size": 4678,
          "lines": 207,
          "complexity": 0,
          "dependencies": [
            "@/lib/queryClient"
          ],
          "exports": [
            "UserAchievement",
            "Achievement",
            "AchievementStats",
            "AchievementFilters",
            "PaginatedResponse",
            "achievementApi"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 11,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 18,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 35,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 115,
              "context": "getAchievementById: (id: number) =>",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 123,
              "context": "getAchievementCompletions: (id: number, page = 1, limit = 50) =>",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 142,
              "context": "updateAchievement: (id: number, achievementData: Partial<Achievement>) =>",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 152,
              "context": "deleteAchievement: (id: number) =>",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 171,
              "context": "manuallyAwardAchievement: (id: number, userIds: string[], reason?: string) =>",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 4.3
        },
        {
          "path": "client/src/components/xp/tracks.ts",
          "domain": "gamification",
          "subdomain": "tracks.ts",
          "layer": "components",
          "size": 334,
          "lines": 19,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "XPTrack",
            "xpTracks"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/xp/XpToast.tsx",
          "domain": "gamification",
          "subdomain": "XpToast.tsx",
          "layer": "components",
          "size": 4507,
          "lines": 154,
          "complexity": 1,
          "dependencies": [
            "react",
            "framer-motion",
            "lucide-react"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/xp/XPBarsContainer.tsx",
          "domain": "gamification",
          "subdomain": "XPBarsContainer.tsx",
          "layer": "components",
          "size": 639,
          "lines": 26,
          "complexity": 0,
          "dependencies": [
            "react"
          ],
          "exports": [
            "UserXP",
            "XPBarsContainerProps"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/xp/XPBarTrack.tsx",
          "domain": "gamification",
          "subdomain": "XPBarTrack.tsx",
          "layer": "components",
          "size": 1620,
          "lines": 59,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/shared/economy/reward-calculator"
          ],
          "exports": [
            "XPBarTrackProps"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "XPTrack"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/xp/LevelUpModal.tsx",
          "domain": "gamification",
          "subdomain": "LevelUpModal.tsx",
          "layer": "components",
          "size": 5380,
          "lines": 186,
          "complexity": 1,
          "dependencies": [
            "react",
            "framer-motion",
            "canvas-confetti",
            "lucide-react",
            "@/components/ui/button"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/ui/tag-badge.tsx",
          "domain": "gamification",
          "layer": "components",
          "size": 667,
          "lines": 26,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "@/components/ui/badge",
            "@/types/forum"
          ],
          "exports": [
            "TagBadge"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Tag"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/ui/badge.tsx",
          "domain": "gamification",
          "layer": "components",
          "size": 1138,
          "lines": 34,
          "complexity": 1,
          "dependencies": [
            "react",
            "class-variance-authority",
            "@/lib/utils"
          ],
          "exports": [
            "BadgeProps",
            "Badge",
            "badgeVariants"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/sidebar/leaderboard-widget.tsx",
          "domain": "gamification",
          "layer": "components",
          "size": 6900,
          "lines": 198,
          "complexity": 2,
          "dependencies": [
            "react",
            "wouter",
            "lucide-react",
            "@/components/ui/card",
            "@/components/ui/avatar",
            "@/components/ui/button",
            "@/components/ui/skeleton",
            "@/components/ui/badge",
            "@/contexts/content-feed-context",
            "@/lib/utils",
            "@/types/compat/user"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "User"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.10000000000000003
        },
        {
          "path": "client/src/components/missions/MissionsWidget.tsx",
          "domain": "gamification",
          "subdomain": "MissionsWidget.tsx",
          "layer": "components",
          "size": 5059,
          "lines": 161,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "@/hooks/useMissions",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/progress",
            "lucide-react",
            "framer-motion",
            "@/lib/utils"
          ],
          "exports": [
            "MissionsWidget"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/missions/DailyMissions.tsx",
          "domain": "gamification",
          "subdomain": "DailyMissions.tsx",
          "layer": "components",
          "size": 10478,
          "lines": 379,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/hooks/useMissions",
            "@/components/ui/tabs",
            "@/components/ui/button",
            "@/components/ui/progress",
            "@/components/ui/badge",
            "@/components/ui/scroll-area",
            "@/components/ui/skeleton",
            "framer-motion",
            "@/hooks/use-auth",
            "@/lib/utils"
          ],
          "exports": [
            "DailyMissions"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 37,
              "context": "onClaim: (id: number) => void;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 3
        },
        {
          "path": "client/src/components/identity/RoleBadge.tsx",
          "domain": "gamification",
          "layer": "components",
          "size": 487,
          "lines": 21,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/components/ui/badge",
            "@/lib/utils"
          ],
          "exports": [
            "Role",
            "RoleBadge"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/identity/LevelBadge.tsx",
          "domain": "gamification",
          "layer": "components",
          "size": 111,
          "lines": 3,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "LevelBadge "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/gamification/mission-dashboard.tsx",
          "domain": "gamification",
          "layer": "components",
          "size": 10251,
          "lines": 347,
          "complexity": 1,
          "dependencies": [
            "@/lib/utils",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/tabs",
            "@/components/ui/progress",
            "@/components/ui/alert",
            "framer-motion"
          ],
          "exports": [
            "MissionDashboard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "MissionProgress",
              "Mission"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/gamification/mission-card.tsx",
          "domain": "gamification",
          "layer": "components",
          "size": 7463,
          "lines": 276,
          "complexity": 2,
          "dependencies": [
            "@/lib/utils",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/progress",
            "framer-motion",
            "@/features/gamification/services/gamification-api.service"
          ],
          "exports": [
            "MissionCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "MissionProgress"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/gamification/level-up-modal.tsx",
          "domain": "gamification",
          "layer": "components",
          "size": 6406,
          "lines": 229,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/lib/utils",
            "@/components/ui/dialog",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/lib/utils",
            "lucide-react",
            "framer-motion",
            "canvas-confetti",
            "@/features/gamification/services/gamification-api.service"
          ],
          "exports": [
            "LevelUpModal"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "LevelInfo"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/gamification/level-display.tsx",
          "domain": "gamification",
          "layer": "components",
          "size": 5744,
          "lines": 236,
          "complexity": 2,
          "dependencies": [
            "@/lib/utils",
            "@/components/ui/badge",
            "@/components/ui/tooltip",
            "lucide-react",
            "framer-motion"
          ],
          "exports": [
            "LevelDisplay",
            "LevelBadge"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/gamification/leaderboard.tsx",
          "domain": "gamification",
          "layer": "components",
          "size": 10775,
          "lines": 335,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/lib/utils",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/avatar",
            "@/components/ui/tabs",
            "@/lib/utils",
            "framer-motion",
            "wouter",
            "@/features/gamification/services/gamification-api.service"
          ],
          "exports": [
            "Leaderboard"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 101,
              "context": "const toggleRowExpansion = (userId: number) => {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "LeaderboardEntry"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.8
        },
        {
          "path": "client/src/components/gamification/achievement-unlock-modal.tsx",
          "domain": "gamification",
          "layer": "components",
          "size": 7538,
          "lines": 274,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/lib/utils",
            "@/components/ui/dialog",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/lib/utils",
            "lucide-react",
            "framer-motion",
            "canvas-confetti",
            "@/features/gamification/services/gamification-api.service"
          ],
          "exports": [
            "AchievementUnlockModal"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Achievement"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/gamification/achievement-grid.tsx",
          "domain": "gamification",
          "layer": "components",
          "size": 8195,
          "lines": 245,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/lib/utils",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/tabs",
            "@/components/ui/progress",
            "lucide-react",
            "@/features/gamification/services/gamification-api.service"
          ],
          "exports": [
            "AchievementGrid"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "UserAchievement"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/components/gamification/achievement-card.tsx",
          "domain": "gamification",
          "layer": "components",
          "size": 8143,
          "lines": 279,
          "complexity": 1,
          "dependencies": [
            "@/lib/utils",
            "@/components/ui/card",
            "@/components/ui/progress",
            "@/components/ui/badge",
            "@/components/ui/tooltip",
            "lucide-react",
            "framer-motion",
            "@/features/gamification/services/gamification-api.service"
          ],
          "exports": [
            "AchievementCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "UserAchievement"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/admin/XpActionRow.tsx",
          "domain": "gamification",
          "layer": "components",
          "size": 1166,
          "lines": 49,
          "complexity": 1,
          "dependencies": [
            "@/components/ui/input",
            "@/components/ui/switch",
            "react",
            "@/features/admin/services/xpActionsService"
          ],
          "exports": [
            "XpAction",
            "XpActionRow"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "server/src/domains/gamification/achievements/index.ts",
          "domain": "gamification",
          "subdomain": "achievements",
          "layer": "other",
          "size": 1185,
          "lines": 40,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "AchievementProcessorService ",
            "AchievementAdminService ",
            "AchievementEventEmitter ",
            "DegenAchievementEvaluators ",
            "getAllAchievementTemplates",
            "getTemplateById",
            "getTemplatesByTags",
            "getTemplatesByCategory",
            "CORE_ACHIEVEMENT_TEMPLATES",
            "CULTURAL_ACHIEVEMENT_TEMPLATES",
            "AchievementController ",
            "achievementRoutes "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/gamification/achievements/achievement.routes.ts",
          "domain": "gamification",
          "subdomain": "achievements",
          "layer": "routes",
          "size": 2965,
          "lines": 129,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [
            "router as achievementRoutes "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/gamification/achievements/achievement.controller.ts",
          "domain": "gamification",
          "subdomain": "achievements",
          "layer": "controllers",
          "size": 13718,
          "lines": 512,
          "complexity": 7,
          "dependencies": [
            "express",
            "@db",
            "drizzle-orm",
            "@schema",
            "@schema"
          ],
          "exports": [
            "AchievementController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 2.4000000000000004
        },
        {
          "path": "server/src/domains/gamification/achievements/achievement-processor.service.ts",
          "domain": "gamification",
          "subdomain": "achievements",
          "layer": "other",
          "size": 15529,
          "lines": 575,
          "complexity": 8,
          "dependencies": [
            "@db",
            "drizzle-orm",
            "@schema",
            "@schema",
            "@schema",
            "@schema",
            "@/db/types"
          ],
          "exports": [
            "AchievementProgress",
            "AchievementProcessorService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Achievement",
              "UserAchievement"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.6
        },
        {
          "path": "server/src/domains/gamification/achievements/achievement-admin.service.ts",
          "domain": "gamification",
          "subdomain": "achievements",
          "layer": "other",
          "size": 15929,
          "lines": 616,
          "complexity": 7,
          "dependencies": [
            "@db",
            "drizzle-orm",
            "@schema",
            "@/db/types"
          ],
          "exports": [
            "AchievementFilters",
            "AchievementStats",
            "AchievementWithStats",
            "AchievementAdminService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "Achievement",
              "InsertAchievement",
              "AchievementCategory",
              "AchievementTier",
              "AchievementTriggerType"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.6000000000000003
        },
        {
          "path": "client/src/pages/ui-playground/sections/AvatarBadgesSection.tsx",
          "domain": "gamification",
          "layer": "pages",
          "size": 1874,
          "lines": 54,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/pages/dev",
            "lucide-react",
            "@/components/ui/badge",
            "@/config/frames.config"
          ],
          "exports": [
            "AvatarBadgesSection"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/pages/admin/permissions/index.tsx",
          "domain": "gamification",
          "subdomain": "index.tsx",
          "layer": "pages",
          "size": 290,
          "lines": 11,
          "complexity": 0,
          "dependencies": [
            "react"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/pages/admin/missions/index.tsx",
          "domain": "gamification",
          "subdomain": "index.tsx",
          "layer": "pages",
          "size": 19103,
          "lines": 649,
          "complexity": 3,
          "dependencies": [
            "react",
            "react-query",
            "@/lib/queryClient",
            "lucide-react",
            "@/hooks/use-toast",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/badge",
            "@/components/ui/separator",
            "@/components/ui/switch",
            "@/components/ui/label",
            "@/components/ui/tabs"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 48,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 4.2
        },
        {
          "path": "client/src/pages/admin/config/xp.tsx",
          "domain": "gamification",
          "layer": "pages",
          "size": 1915,
          "lines": 65,
          "complexity": 1,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "lucide-react",
            "@/components/ui/textarea.tsx",
            "@/components/ui/button.tsx",
            "@/hooks/use-toast.ts",
            "@/lib/queryClient.ts"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/pages/admin/xp/titles.tsx",
          "domain": "gamification",
          "subdomain": "titles.tsx",
          "layer": "pages",
          "size": 24568,
          "lines": 817,
          "complexity": 2,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "lucide-react",
            "@/hooks/use-toast",
            "@/components/ui/input",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/label",
            "@/components/ui/textarea",
            "@/components/ui/card",
            "@/components/ui/tabs",
            "@/hooks/use-debounce",
            "@/lib/queryClient",
            "@/components/admin/layout/AdminPageShell",
            "@/components/admin/forms/xp/TitleMediaInput",
            "@/components/media/MediaAsset"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 43,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 174,
              "context": "mutationFn: async ({ id, data }: { id: number; data: TitleFormData }) => {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 196,
              "context": "mutationFn: async (id: number) => {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 3.2
        },
        {
          "path": "client/src/pages/admin/xp/badges.tsx",
          "domain": "gamification",
          "subdomain": "badges.tsx",
          "layer": "pages",
          "size": 10807,
          "lines": 339,
          "complexity": 1,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "lucide-react",
            "@/components/ui/input",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/card",
            "@/hooks/use-debounce",
            "@/lib/queryClient",
            "@/hooks/useCrudMutation",
            "@/components/admin/layout/AdminPageShell",
            "@/components/admin/common/AdminDataTable",
            "@/components/admin/forms/xp/BadgeFormDialogs"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 97,
              "context": "const updateBadgeMutation = useCrudMutation<unknown, Error, { id: number; data: BadgeFormData }>({",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Badge",
              "BadgeFormData"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.8
        },
        {
          "path": "client/src/pages/admin/xp/adjust.tsx",
          "domain": "gamification",
          "subdomain": "adjust.tsx",
          "layer": "pages",
          "size": 27324,
          "lines": 887,
          "complexity": 6,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/hooks/use-toast",
            "@/components/ui/input",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/tabs",
            "@/components/ui/label",
            "@/components/ui/textarea",
            "@/components/ui/radio-group",
            "@/components/ui/checkbox",
            "@/components/ui/avatar",
            "@/hooks/use-debounce",
            "@/lib/queryClient",
            "@shared/economy/reward-calculator",
            "@/config/easter-eggs.config",
            "@/components/admin/effects/BankruptcyEffect"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 70,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 3.8000000000000003
        },
        {
          "path": "client/src/pages/admin/xp/actions.tsx",
          "domain": "gamification",
          "subdomain": "actions.tsx",
          "layer": "pages",
          "size": 1276,
          "lines": 41,
          "complexity": 1,
          "dependencies": [
            "@/features/admin/services/xpActionsService",
            "@/components/admin/XpActionRow",
            "@/components/ui/table",
            "@/components/ui/card"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/pages/admin/clout/achievements.tsx",
          "domain": "gamification",
          "layer": "pages",
          "size": 2032,
          "lines": 57,
          "complexity": 1,
          "dependencies": [
            "@/features/admin/services/cloutAchievementsService",
            "@/components/ui/table",
            "@/components/ui/card",
            "@/components/ui/switch",
            "@/features/admin/services/cloutAchievementsService"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/features/admin/services/xpCloutService.ts",
          "domain": "gamification",
          "layer": "services",
          "size": 670,
          "lines": 23,
          "complexity": 1,
          "dependencies": [
            "@tanstack/react-query",
            "@/lib/adminApi",
            "@/types/compat/economy"
          ],
          "exports": [
            "useXpCloutSettings",
            "useUpdateXpCloutSettings"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "InsertXpCloutSettings"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/features/admin/services/xpActionsService.ts",
          "domain": "gamification",
          "layer": "services",
          "size": 716,
          "lines": 29,
          "complexity": 1,
          "dependencies": [
            "@tanstack/react-query",
            "@/lib/adminApi",
            "@/types/compat/economy"
          ],
          "exports": [
            "useXpActions",
            "useUpdateXpAction"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "InsertXpActionSetting"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/features/admin/services/cloutAchievementsService.ts",
          "domain": "gamification",
          "layer": "services",
          "size": 1394,
          "lines": 45,
          "complexity": 1,
          "dependencies": [
            "@tanstack/react-query",
            "@/lib/adminApi"
          ],
          "exports": [
            "ACHIEVEMENTS_KEY",
            "useCloutAchievements",
            "useCreateAchievement",
            "useUpdateAchievement",
            "useToggleAchievement",
            "useDeleteAchievement"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 24,
              "context": "mutationFn: ({ id, payload }: { id: number; payload: any }) =>",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 33,
              "context": "mutationFn: (id: number) => adminApi.post(`/clout/achievements/${id}/toggle`, {}),",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 41,
              "context": "mutationFn: (id: number) => adminApi.delete(`/clout/achievements/${id}`),",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 4
        },
        {
          "path": "client/src/components/platform-energy/leaderboards/weekly-leaderboard.tsx",
          "domain": "gamification",
          "subdomain": "weekly-leaderboard.tsx",
          "layer": "components",
          "size": 7085,
          "lines": 242,
          "complexity": 2,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "wouter",
            "@/components/ui/card",
            "@/components/ui/tabs",
            "@/components/ui/avatar",
            "@/components/ui/skeleton",
            "@/components/ui/badge",
            "@/lib/utils",
            "lucide-react"
          ],
          "exports": [
            "LeaderboardUser",
            "WeeklyLeaderboard"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 13,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 3
        },
        {
          "path": "client/src/components/admin/permissions/PermissionsOverview.tsx",
          "domain": "gamification",
          "subdomain": "PermissionsOverview.tsx",
          "layer": "components",
          "size": 819,
          "lines": 39,
          "complexity": 1,
          "dependencies": [
            "@/components/ui/card"
          ],
          "exports": [
            "PermissionsOverview"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/admin/permissions/PermissionsEditor.tsx",
          "domain": "gamification",
          "subdomain": "PermissionsEditor.tsx",
          "layer": "components",
          "size": 2973,
          "lines": 108,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/card",
            "@/components/ui/checkbox",
            "@/components/ui/button"
          ],
          "exports": [
            "PermissionsEditor"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/admin/clout/AchievementsSection.tsx",
          "domain": "gamification",
          "layer": "components",
          "size": 25083,
          "lines": 838,
          "complexity": 2,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/input",
            "@/components/ui/textarea",
            "@/components/ui/switch",
            "react-hook-form",
            "@hookform/resolvers/zod",
            "zod",
            "@/hooks/use-toast",
            "@/lib/queryClient",
            "@/pages/admin/clout"
          ],
          "exports": [
            "AchievementsSection"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 164,
              "context": "mutationFn: async (data: AchievementForm & { id: number }) => {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 192,
              "context": "mutationFn: async (id: number) => {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 218,
              "context": "mutationFn: async (id: number) => {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "CloutAchievement"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 3.7
        },
        {
          "path": "server/src/domains/gamification/achievements/templates/achievement-templates.ts",
          "domain": "gamification",
          "subdomain": "achievements",
          "layer": "other",
          "size": 14406,
          "lines": 623,
          "complexity": 2,
          "dependencies": [
            "@schema/gamification/achievements"
          ],
          "exports": [
            "AchievementTemplate",
            "CORE_ACHIEVEMENT_TEMPLATES",
            "CULTURAL_ACHIEVEMENT_TEMPLATES",
            "getAllAchievementTemplates",
            "getTemplateById",
            "getTemplatesByTags",
            "getTemplatesByCategory"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "InsertAchievement"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        },
        {
          "path": "server/src/domains/gamification/achievements/evaluators/degen-evaluators.ts",
          "domain": "gamification",
          "subdomain": "achievements",
          "layer": "other",
          "size": 16124,
          "lines": 569,
          "complexity": 8,
          "dependencies": [
            "@db",
            "drizzle-orm",
            "@schema",
            "@schema"
          ],
          "exports": [
            "EvaluatorConfig",
            "DegenAchievementEvaluators"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "AchievementEventType"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.6
        },
        {
          "path": "client/src/components/admin/forms/xp/TitleMediaInput.tsx",
          "domain": "gamification",
          "subdomain": "TitleMediaInput.tsx",
          "layer": "components",
          "size": 1121,
          "lines": 40,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "lucide-react",
            "@/components/media/MediaAsset",
            "@/components/admin/media/MediaPickerModal"
          ],
          "exports": [
            "TitleMediaInput"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/admin/forms/xp/LevelFormDialogs.tsx",
          "domain": "gamification",
          "subdomain": "LevelFormDialogs.tsx",
          "layer": "components",
          "size": 10637,
          "lines": 360,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/input",
            "@/components/ui/button",
            "@/components/ui/label",
            "@/components/ui/tabs",
            "@/components/ui/textarea",
            "@/components/admin/forms/xp/TitleMediaInput",
            "@/components/admin/inputs/UnlockMultiSelect"
          ],
          "exports": [
            "LevelFormData",
            "Level",
            "LevelFormDialogComponent",
            "DeleteLevelConfirmationDialog"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 49,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 3.8
        },
        {
          "path": "client/src/components/admin/forms/xp/BadgeFormDialogs.tsx",
          "domain": "gamification",
          "subdomain": "BadgeFormDialogs.tsx",
          "layer": "components",
          "size": 6948,
          "lines": 238,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/input",
            "@/components/ui/button",
            "@/components/ui/label",
            "@/components/ui/textarea",
            "lucide-react",
            "@/components/admin/media/MediaPickerModal",
            "@/components/media/MediaAsset"
          ],
          "exports": [
            "BadgeFormData",
            "Badge",
            "RARITIES",
            "getBadgeRarityDisplay",
            "BadgeFormDialogComponent",
            "DeleteBadgeConfirmationDialog"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 37,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.8
        }
      ],
      "totalIssues": 54,
      "avgComplexity": 2.1770833333333335,
      "migrationEffort": 137.70000000000007,
      "dependencies": [
        "@db",
        "@shared/economy/reward-calculator",
        "@shared/economy/economy.config",
        "@schema",
        "@db/types",
        "@/db",
        "@/schema/economy/xpActionSettings",
        "@paralleldrive/cuid2",
        "@/schema",
        "@tanstack/react-query",
        "@/components/ui/loader",
        "@/components/ui/error-display",
        "@/lib/utils",
        "@/hooks/use-toast",
        "@/components/ui/card",
        "@/components/ui/avatar",
        "@/components/common/BackToHomeButton",
        "@/lib/queryClient",
        "@/lib/safeWebSocket",
        "@/hooks/use-auth.tsx",
        "@/contexts/ForumStructureContext",
        "@/hooks/use-auth",
        "@/lib/api/achievements",
        "@/types/core.types",
        "@/components/xp/XpToast",
        "@/components/xp/LevelUpModal",
        "@server/src/core/services/user.service",
        "@/db/types",
        "@/hooks/use-gamification",
        "@/components/gamification",
        "@/components/ui/button",
        "@/components/ui/alert",
        "@/components/ui/badge",
        "@/components/ui/tabs",
        "@/components/admin/layout/AdminPageShell",
        "@/components/admin/common/AdminDataTable",
        "@/components/admin/forms/xp/LevelFormDialogs",
        "@/components/admin/protected-admin-route",
        "@/hooks/use-admin-modules",
        "@/features/admin/services/xpActionsService",
        "@/shared/economy/reward-calculator",
        "@/types/forum",
        "@/components/ui/skeleton",
        "@/contexts/content-feed-context",
        "@/types/compat/user",
        "@/hooks/useMissions",
        "@/components/ui/progress",
        "@/components/ui/scroll-area",
        "@/features/gamification/services/gamification-api.service",
        "@/components/ui/dialog",
        "@/components/ui/tooltip",
        "@/components/ui/input",
        "@/components/ui/switch",
        "@/pages/dev",
        "@/config/frames.config",
        "@/components/ui/separator",
        "@/components/ui/label",
        "@/components/ui/textarea.tsx",
        "@/components/ui/button.tsx",
        "@/hooks/use-toast.ts",
        "@/lib/queryClient.ts",
        "@/components/ui/textarea",
        "@/hooks/use-debounce",
        "@/components/admin/forms/xp/TitleMediaInput",
        "@/components/media/MediaAsset",
        "@/hooks/useCrudMutation",
        "@/components/admin/forms/xp/BadgeFormDialogs",
        "@/components/ui/radio-group",
        "@/components/ui/checkbox",
        "@/config/easter-eggs.config",
        "@/components/admin/effects/BankruptcyEffect",
        "@/components/admin/XpActionRow",
        "@/components/ui/table",
        "@/features/admin/services/cloutAchievementsService",
        "@/lib/adminApi",
        "@/types/compat/economy",
        "@hookform/resolvers/zod",
        "@/pages/admin/clout",
        "@schema/gamification/achievements",
        "@/components/admin/media/MediaPickerModal",
        "@/components/admin/inputs/UnlockMultiSelect"
      ],
      "dependents": [
        "other",
        "user-management"
      ],
      "criticalPath": false,
      "riskAssessment": {
        "runtime": "critical",
        "testing": "high",
        "integration": "medium"
      },
      "migrationStrategy": {
        "priority": 2,
        "approach": "incremental",
        "estimatedDays": 28,
        "blockers": [
          "Dependencies from: other, user-management"
        ],
        "prerequisites": []
      }
    },
    {
      "name": "other",
      "files": [
        {
          "path": "playwright.config.ts",
          "domain": "other",
          "layer": "other",
          "size": 4794,
          "lines": 192,
          "complexity": 3,
          "dependencies": [
            "@playwright/test"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.3
        },
        {
          "path": "drizzle.config.ts",
          "domain": "other",
          "layer": "other",
          "size": 637,
          "lines": 18,
          "complexity": 0,
          "dependencies": [
            "drizzle-kit"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Config"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "shared/types.ts",
          "domain": "other",
          "layer": "other",
          "size": 62,
          "lines": 2,
          "complexity": 0,
          "dependencies": [],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "shared/paths.config.ts",
          "domain": "other",
          "layer": "other",
          "size": 1660,
          "lines": 51,
          "complexity": 0,
          "dependencies": [
            "path",
            "url"
          ],
          "exports": [
            "paths",
            "pathMapping"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "shared/path-config.ts",
          "domain": "other",
          "layer": "other",
          "size": 3777,
          "lines": 142,
          "complexity": 2,
          "dependencies": [
            "@degentalk/db/types"
          ],
          "exports": [
            "PathDefinition",
            "availablePaths",
            "categoryPathMappings",
            "xpRewards",
            "getPathForCategory",
            "getPathDefinition",
            "getDominantPath"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "CategoryId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.9
        },
        {
          "path": "shared/index.ts",
          "domain": "other",
          "layer": "other",
          "size": 352,
          "lines": 11,
          "complexity": 0,
          "dependencies": [],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "shared/constants.ts",
          "domain": "other",
          "layer": "other",
          "size": 571,
          "lines": 14,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "CONTENT_STATUS_CONFIG",
            "ContentStatusKey"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "server/vite.ts",
          "domain": "other",
          "layer": "other",
          "size": 3821,
          "lines": 117,
          "complexity": 3,
          "dependencies": [
            "express",
            "fs",
            "path",
            "url",
            "vite",
            "http",
            "nanoid",
            "crypto"
          ],
          "exports": [
            "log",
            "serveStatic"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.6
        },
        {
          "path": "server/storage.ts",
          "domain": "other",
          "layer": "other",
          "size": 65679,
          "lines": 2346,
          "complexity": 10,
          "dependencies": [
            "@db",
            "drizzle-orm",
            "express-session",
            "connect-pg-simple",
            "crypto",
            "util",
            "drizzle-orm/pg-core",
            "multer-s3",
            "@aws-sdk/client-s3"
          ],
          "exports": [
            "IStorage",
            "DatabaseStorage",
            "storage"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 84,
              "context": "getUser(id: number | string): Promise<User | undefined>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 88,
              "context": "updateUser(id: number, userData: Partial<User>): Promise<User>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 94,
              "context": "getUserGroup(id: number): Promise<typeof userGroups.$inferSelect | undefined>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 97,
              "context": "id: number,",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 100,
              "context": "deleteUserGroup(id: number): Promise<void>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 104,
              "context": "getForumRule(id: number): Promise<ForumRule | undefined>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 107,
              "context": "id: number,",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 110,
              "context": "deleteForumRule(id: number): Promise<void>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 116,
              "context": "getStructure(id: number): Promise<ForumStructureWithStats | undefined>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 127,
              "context": "getThread(id: number): Promise<ThreadWithUser | undefined>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 130,
              "context": "incrementThreadViewCount(id: number): Promise<void>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 133,
              "context": "getDraft(id: number): Promise<ThreadDraft | undefined>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 136,
              "context": "updateDraft(id: number, data: Partial<ThreadDraft>): Promise<ThreadDraft>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 137,
              "context": "deleteDraft(id: number): Promise<void>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 138,
              "context": "publishDraft(id: number): Promise<Thread>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 146,
              "context": "getPost(id: number): Promise<PostWithUser | undefined>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 148,
              "context": "updatePost(id: number, postData: Partial<Post> & { editorId: number }): Promise<Post>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 149,
              "context": "deletePost(id: number): Promise<void>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 157,
              "context": "markNotificationAsRead(id: number): Promise<void>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 161,
              "context": "getEmoji(id: number): Promise<CustomEmoji | undefined>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 163,
              "context": "updateEmoji(id: number, emoji: Partial<CustomEmoji>): Promise<CustomEmoji>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 164,
              "context": "deleteEmoji(id: number): Promise<void>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 170,
              "context": "getProduct(id: number): Promise<Product | undefined>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 172,
              "context": "updateProduct(id: number, data: Partial<Product>): Promise<Product>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 173,
              "context": "deleteProduct(id: number): Promise<void>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 180,
              "context": "getConversation(id: number): Promise<Conversation | undefined>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 259,
              "context": "async getUser(id: number | string): Promise<User | undefined> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 491,
              "context": "async updateUser(id: number, userData: Partial<User>): Promise<User> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 556,
              "context": "async getStructure(id: number): Promise<ForumStructureWithStats | undefined> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 667,
              "context": "async getThread(id: number): Promise<ThreadWithUser | undefined> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 745,
              "context": "async incrementThreadViewCount(id: number): Promise<void> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 755,
              "context": "async getDraft(id: number): Promise<ThreadDraft | undefined> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 790,
              "context": "async updateDraft(id: number, data: Partial<ThreadDraft>): Promise<ThreadDraft> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 804,
              "context": "async deleteDraft(id: number): Promise<void> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 808,
              "context": "async publishDraft(id: number): Promise<Thread> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 923,
              "context": "async getPost(id: number): Promise<PostWithUser | undefined> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 968,
              "context": "async updatePost(id: number, postData: Partial<Post> & { editorId: number }): Promise<Post> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 1010,
              "context": "async deletePost(id: number): Promise<void> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 1177,
              "context": "async markNotificationAsRead(id: number): Promise<void> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 1198,
              "context": "async getEmoji(id: number): Promise<CustomEmoji | undefined> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 1219,
              "context": "async updateEmoji(id: number, emoji: Partial<CustomEmoji>): Promise<CustomEmoji> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 1232,
              "context": "async deleteEmoji(id: number): Promise<void> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 1324,
              "context": "async getUserGroup(id: number): Promise<typeof userGroups.$inferSelect | undefined> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 1348,
              "context": "async getForumRule(id: number): Promise<ForumRule | undefined> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 1371,
              "context": "id: number,",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 1393,
              "context": "async deleteForumRule(id: number): Promise<void> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 1536,
              "context": "id: number,",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 1551,
              "context": "async deleteUserGroup(id: number): Promise<void> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 1607,
              "context": "async getProduct(id: number): Promise<Product | undefined> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 1644,
              "context": "async updateProduct(id: number, data: Partial<Product>): Promise<Product> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 1657,
              "context": "async deleteProduct(id: number): Promise<void> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 1854,
              "context": "async getConversation(id: number): Promise<Conversation | undefined> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 111,
              "context": "getUserRuleAgreements(userId: number): Promise<UserRulesAgreement[]>;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 112,
              "context": "agreeToRule(userId: number, ruleId: number, versionHash: string): Promise<void>;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 129,
              "context": "createThread(thread: InsertThread & { userId: number }): Promise<Thread>;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 134,
              "context": "getDraftsByUser(userId: number, structureId?: number): Promise<ThreadDraft[]>;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 142,
              "context": "getThreadFeaturePermissionsForUser(userId: number): Promise<Record<string, boolean>>;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 147,
              "context": "createPost(post: InsertPost & { userId: number; isFirstPost?: boolean }): Promise<Post>;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 152,
              "context": "addReaction(userId: number, postId: number, reaction: string): Promise<void>;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 153,
              "context": "removeReaction(userId: number, postId: number, reaction: string): Promise<void>;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 156,
              "context": "getNotifications(userId: number, limit?: number, offset?: number): Promise<Notification[]>;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 165,
              "context": "getAvailableEmojisForUser(userId: number): Promise<EmojiWithAvailability[]>;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 166,
              "context": "unlockEmojiForUser(userId: number, emojiId: number): Promise<void>;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 174,
              "context": "purchaseProduct(userId: number, productId: number, quantity?: number): Promise<Order>;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 178,
              "context": "userId: number",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 199,
              "context": "markMessagesAsRead(conversationId: number, userId: number): Promise<void>;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 202,
              "context": "addUserXp(userId: number, amount: number, path?: string): Promise<void>;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 203,
              "context": "getUserPathXp(userId: number, path?: string): Promise<Record<string, number>>;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 204,
              "context": "recalculateUserPathMultipliers(userId: number): Promise<Record<string, number>>;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 207,
              "context": "getUserInventory(userId: number): Promise<UserInventoryItem[]>;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 208,
              "context": "checkUserOwnsProduct(userId: number, productId: number): Promise<boolean>;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 211,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 216,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 387,
              "context": "async storeVerificationToken(userId: number, token: string): Promise<void> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 695,
              "context": "async createThread(thread: InsertThread & { userId: number }): Promise<Thread> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 761,
              "context": "async getDraftsByUser(userId: number, structureId?: number): Promise<ThreadDraft[]> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 880,
              "context": "async getThreadFeaturePermissionsForUser(userId: number): Promise<Record<string, boolean>> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 936,
              "context": "async createPost(post: InsertPost & { userId: number; isFirstPost?: boolean }): Promise<Post> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 1070,
              "context": "async addReaction(userId: number, postId: number, reaction: string): Promise<void> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 1108,
              "context": "async removeReaction(userId: number, postId: number, reaction: string): Promise<void> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 1167,
              "context": "async getNotifications(userId: number, limit = 20, offset = 0): Promise<Notification[]> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 1242,
              "context": "async getAvailableEmojisForUser(userId: number): Promise<EmojiWithAvailability[]> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 1286,
              "context": "async unlockEmojiForUser(userId: number, emojiId: number): Promise<void> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 1397,
              "context": "async getUserRuleAgreements(userId: number): Promise<UserRulesAgreement[]> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 1405,
              "context": "async agreeToRule(userId: number, ruleId: number, versionHash: string): Promise<void> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 1667,
              "context": "async purchaseProduct(userId: number, productId: number, quantity: number = 1): Promise<Order> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 1795,
              "context": "userId: number",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 1997,
              "context": "async markMessagesAsRead(conversationId: number, userId: number): Promise<void> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 2036,
              "context": "async addUserXp(userId: number, amount: number, path?: string): Promise<void> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 2123,
              "context": "async getUserPathXp(userId: number, path?: string): Promise<Record<string, number>> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 2144,
              "context": "async recalculateUserPathMultipliers(userId: number): Promise<Record<string, number>> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 2203,
              "context": "async getUserInventory(userId: number): Promise<UserInventoryItem[]> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 2225,
              "context": "async checkUserOwnsProduct(userId: number, productId: number): Promise<boolean> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 2293,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 2307,
              "context": "userId: number",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 2317,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 145,
              "context": "getPosts(threadId: number, limit?: number, offset?: number): Promise<PostWithUser[]>;",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 909,
              "context": "async getPosts(threadId: number, limit = 20, offset = 0): Promise<PostWithUser[]> {",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 152,
              "context": "addReaction(userId: number, postId: number, reaction: string): Promise<void>;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 153,
              "context": "removeReaction(userId: number, postId: number, reaction: string): Promise<void>;",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 1070,
              "context": "async addReaction(userId: number, postId: number, reaction: string): Promise<void> {",
              "suggestedFix": "PostId",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "postId: number",
              "line": 1108,
              "context": "async removeReaction(userId: number, postId: number, reaction: string): Promise<void> {",
              "suggestedFix": "PostId",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": true,
            "hasNumericIds": true,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "ForumStructureWithStats",
              "ThreadWithUser",
              "PostWithUser"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 10
        },
        {
          "path": "server/routes.ts",
          "domain": "other",
          "layer": "other",
          "size": 19595,
          "lines": 540,
          "complexity": 6,
          "dependencies": [
            "src/domains/",
            "express",
            "http",
            "ws",
            "@schema",
            "zod",
            "@shared/path-config",
            "crypto",
            "drizzle-orm",
            "passport",
            "express-session",
            "express-rate-limit",
            "crypto",
            "@schema/system/analyticsEvents"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.2
        },
        {
          "path": "server/index.ts",
          "domain": "other",
          "layer": "other",
          "size": 6714,
          "lines": 187,
          "complexity": 3,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 2.1
        },
        {
          "path": "scripts/validate-imports.ts",
          "domain": "other",
          "layer": "other",
          "size": 8205,
          "lines": 274,
          "complexity": 6,
          "dependencies": [
            "path",
            "fs",
            "glob",
            "chalk"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7000000000000002
        },
        {
          "path": "scripts/validate-everything.ts",
          "domain": "other",
          "layer": "other",
          "size": 6954,
          "lines": 253,
          "complexity": 4,
          "dependencies": [
            "node:child_process",
            "node:util",
            "chalk",
            "path"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 2.3
        },
        {
          "path": "scripts/test-ci-readiness.ts",
          "domain": "other",
          "layer": "other",
          "size": 4385,
          "lines": 150,
          "complexity": 2,
          "dependencies": [
            "@db/types",
            "fs",
            "fs",
            "chalk"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        },
        {
          "path": "scripts/reset-db-clean.ts",
          "domain": "other",
          "layer": "other",
          "size": 1235,
          "lines": 44,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.2
        },
        {
          "path": "scripts/fix-table-references.ts",
          "domain": "other",
          "layer": "other",
          "size": 1746,
          "lines": 50,
          "complexity": 2,
          "dependencies": [
            "@db/types",
            "fs",
            "glob",
            "path"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        },
        {
          "path": "scripts/fix-missing-uuid-imports.ts",
          "domain": "other",
          "layer": "other",
          "size": 2255,
          "lines": 64,
          "complexity": 2,
          "dependencies": [
            "fs",
            "glob",
            "path",
            ",\\n\\t",
            "drizzle-orm/pg-core"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        },
        {
          "path": "scripts/fix-integer-imports.ts",
          "domain": "other",
          "layer": "other",
          "size": 2107,
          "lines": 65,
          "complexity": 2,
          "dependencies": [
            "fs",
            "glob",
            "path",
            ",\\n\\t"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.4
        },
        {
          "path": "scripts/fix-all-schema-issues.ts",
          "domain": "other",
          "layer": "other",
          "size": 2895,
          "lines": 82,
          "complexity": 2,
          "dependencies": [
            "@db/types",
            "fs",
            "glob",
            "path",
            ",\\n\\t",
            "drizzle-orm/pg-core"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        },
        {
          "path": "db/index.ts",
          "domain": "other",
          "layer": "other",
          "size": 1155,
          "lines": 36,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm/neon-http",
            "@neondatabase/serverless",
            "drizzle-orm/node-postgres",
            "pg",
            "dotenv",
            "ws",
            "pg"
          ],
          "exports": [
            "pool",
            "db"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Pool as PgPool"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 1.2
        },
        {
          "path": "config/vite.config.ts",
          "domain": "other",
          "layer": "other",
          "size": 3965,
          "lines": 101,
          "complexity": 2,
          "dependencies": [
            "vite",
            "@vitejs/plugin-react",
            "path",
            "url",
            "@replit/vite-plugin-runtime-error-modal",
            "vite-tsconfig-paths"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        },
        {
          "path": "config/tailwind.config.ts",
          "domain": "other",
          "layer": "other",
          "size": 6689,
          "lines": 231,
          "complexity": 1,
          "dependencies": [
            "tailwindcss",
            "tailwindcss-animate",
            "@tailwindcss/typography",
            "@tailwindcss/container-queries"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Config"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/vitest.config.ts",
          "domain": "other",
          "layer": "other",
          "size": 509,
          "lines": 21,
          "complexity": 0,
          "dependencies": [
            "vitest/config",
            "@vitejs/plugin-react",
            "path"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/vite.config.ts",
          "domain": "other",
          "layer": "other",
          "size": 3848,
          "lines": 97,
          "complexity": 2,
          "dependencies": [
            "vite",
            "@vitejs/plugin-react",
            "path",
            "url",
            "@replit/vite-plugin-runtime-error-modal",
            "vite-tsconfig-paths"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        },
        {
          "path": "client/tailwind.config.ts",
          "domain": "other",
          "layer": "other",
          "size": 6675,
          "lines": 231,
          "complexity": 1,
          "dependencies": [
            "tailwindcss",
            "tailwindcss-animate",
            "@tailwindcss/typography",
            "@tailwindcss/container-queries"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Config"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "shared/validators/index.ts",
          "domain": "other",
          "layer": "other",
          "size": 28,
          "lines": 2,
          "complexity": 0,
          "dependencies": [],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "shared/utils/id.ts",
          "domain": "other",
          "layer": "utils",
          "size": 2249,
          "lines": 90,
          "complexity": 3,
          "dependencies": [
            "@db/types"
          ],
          "exports": [
            "toId",
            "isValidId",
            "validateUuid",
            "parseId",
            "generateId",
            "idsEqual",
            "filterValidIds"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "Id"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.3000000000000001
        },
        {
          "path": "shared/types/index.ts",
          "domain": "other",
          "layer": "types",
          "size": 5657,
          "lines": 328,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "Nullable",
            "Optional",
            "PartialExcept",
            "DeepPartial",
            "Timestamped",
            "SoftDeletable",
            "Auditable",
            "WithPagination",
            "SearchResult",
            "isUser",
            "isUserProfile",
            "isForum",
            "isThread",
            "isPost",
            "isWallet",
            "isTransaction",
            "isShopItem",
            "isFrame",
            "isBadge",
            "isTitle"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "shared/types/config.types.ts",
          "domain": "other",
          "layer": "types",
          "size": 4441,
          "lines": 227,
          "complexity": 0,
          "dependencies": [
            "@db/types/id.types"
          ],
          "exports": [
            "BaseConfig",
            "FeatureGate",
            "ModuleConfig",
            "ApiConfig",
            "DatabaseConfig",
            "CacheConfig",
            "SecurityConfig",
            "NotificationConfig",
            "UIConfig",
            "EconomyConfig",
            "GamificationConfig",
            "ForumConfig",
            "SocialConfig",
            "ConfigValidation",
            "ConfigStore",
            "EnvironmentConfig",
            "ConfigChange",
            "ConfigAuditLog",
            "ConfigService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "UserId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "shared/types/api.types.ts",
          "domain": "other",
          "layer": "types",
          "size": 2530,
          "lines": 114,
          "complexity": 1,
          "dependencies": [
            "@db/types/id.types"
          ],
          "exports": [
            "ApiSuccess",
            "ApiError",
            "ApiResponse",
            "PaginationMeta",
            "FilterMeta",
            "PaginatedRequest",
            "FilteredRequest",
            "PaginatedFilteredRequest",
            "ControllerResponse",
            "TypedRequest",
            "TypedResponse",
            "ExtractApiData"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "UserId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "shared/signature/SignatureTierConfig.ts",
          "domain": "other",
          "layer": "other",
          "size": 2330,
          "lines": 102,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "SignatureTierLevel",
            "SignatureTierConfig",
            "getSignatureTierForLevel"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "shared/lib/index.ts",
          "domain": "other",
          "layer": "utils",
          "size": 647,
          "lines": 25,
          "complexity": 0,
          "dependencies": [],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "shared/fixtures/index.ts",
          "domain": "other",
          "layer": "other",
          "size": 4028,
          "lines": 150,
          "complexity": 1,
          "dependencies": [
            "@fixtures",
            "@fixtures"
          ],
          "exports": [
            "FIXTURES_VERSION",
            "SUPPORTED_ENTITIES",
            "SupportedEntity",
            "FixturesConfig",
            "initializeFixtures",
            "FixtureUser",
            "FixtureThread",
            "FixturePost",
            "FixtureForum",
            "BaseFactory",
            "FactoryBuilder",
            "FactoryRegistry",
            "Factory",
            "UserFactory",
            "AdminUserFactory",
            "CryptoWhaleFactory",
            "NewbieUserFactory",
            "ThreadFactory",
            "PostFactory",
            "ForumCategoryFactory"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "shared/enums/index.ts",
          "domain": "other",
          "layer": "other",
          "size": 27,
          "lines": 2,
          "complexity": 0,
          "dependencies": [],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "shared/config/zoneThemes.config.ts",
          "domain": "other",
          "layer": "other",
          "size": 3202,
          "lines": 99,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "GlowIntensity",
            "RarityOverlay",
            "ZoneTheme",
            "ZONE_THEMES",
            "ZoneThemeKey",
            "getZoneTheme"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "shared/config/social.config.ts",
          "domain": "other",
          "layer": "other",
          "size": 6986,
          "lines": 315,
          "complexity": 2,
          "dependencies": [],
          "exports": [
            "SocialFeatureConfig",
            "MentionsConfig",
            "WhaleWatchConfig",
            "FriendsConfig",
            "SocialConfig",
            "defaultSocialConfig",
            "SocialConfigHelper",
            "isMentionsConfig",
            "isWhaleWatchConfig",
            "isFriendsConfig"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.0999999999999999
        },
        {
          "path": "shared/config/index.ts",
          "domain": "other",
          "layer": "other",
          "size": 111,
          "lines": 4,
          "complexity": 0,
          "dependencies": [],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "server/utils/task-scheduler.ts",
          "domain": "other",
          "layer": "utils",
          "size": 983,
          "lines": 38,
          "complexity": 2,
          "dependencies": [],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.9
        },
        {
          "path": "server/utils/slugify.ts",
          "domain": "other",
          "layer": "utils",
          "size": 177,
          "lines": 9,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "slugify"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "server/utils/platform-energy.ts",
          "domain": "other",
          "layer": "utils",
          "size": 5356,
          "lines": 215,
          "complexity": 9,
          "dependencies": [
            "drizzle-orm",
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 193,
              "context": "export async function featureThread(threadId: number, userId: number, expiresAt?: Date) {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 193,
              "context": "export async function featureThread(threadId: number, userId: number, expiresAt?: Date) {",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 206,
              "context": "export async function unfeatureThread(threadId: number) {",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.1
        },
        {
          "path": "server/utils/path-utils.ts",
          "domain": "other",
          "layer": "utils",
          "size": 5187,
          "lines": 202,
          "complexity": 5,
          "dependencies": [
            "@shared/path-config"
          ],
          "exports": [
            "UserPaths",
            "awardPathXp",
            "getUserPaths",
            "addPathToUser",
            "removePathFromUser",
            "setPathXp",
            "getPathMultipliers",
            "getPathMultiplier"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.5
        },
        {
          "path": "server/src/app.ts",
          "domain": "other",
          "layer": "other",
          "size": 249,
          "lines": 8,
          "complexity": 0,
          "dependencies": [],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "server/services/path-service.ts",
          "domain": "other",
          "layer": "services",
          "size": 7920,
          "lines": 327,
          "complexity": 7,
          "dependencies": [
            "@db",
            "drizzle-orm"
          ],
          "exports": [
            "PathService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 68,
              "context": "static async getUserPaths(userId: number): Promise<Array<UserPath & { path: XpPath }>> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 103,
              "context": "static async getUserPrimaryPath(userId: number): Promise<(UserPath & { path: XpPath }) | null> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 143,
              "context": "static async setUserPrimaryPath(userId: number, pathId: string): Promise<boolean> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 196,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 308,
              "context": "static async getUserPathRank(userId: number, pathId: string): Promise<number | null> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 2.4000000000000004
        },
        {
          "path": "server/migrations/20250626_extend_ui_themes.ts",
          "domain": "other",
          "layer": "other",
          "size": 987,
          "lines": 29,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm",
            "drizzle-orm/node-postgres/migrator"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "server/migrations/20250618_add_rollout_percentage_to_feature_flags.ts",
          "domain": "other",
          "layer": "other",
          "size": 599,
          "lines": 15,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm",
            "drizzle-orm/node-postgres/migrator"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "server/config/loadEnv.ts",
          "domain": "other",
          "layer": "other",
          "size": 2662,
          "lines": 71,
          "complexity": 1,
          "dependencies": [
            "dotenv",
            "path",
            "url"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.7
        },
        {
          "path": "scripts/tools/icon-scan.ts",
          "domain": "other",
          "layer": "other",
          "size": 5923,
          "lines": 131,
          "complexity": 2,
          "dependencies": [
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "HeatEventId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.10000000000000003
        },
        {
          "path": "scripts/testing/test-repository-implementation.ts",
          "domain": "other",
          "layer": "other",
          "size": 4232,
          "lines": 111,
          "complexity": 2,
          "dependencies": [
            "@server/src/core/repository",
            "@server/src/core/logger"
          ],
          "exports": [
            "testRepositoryImplementation "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.9
        },
        {
          "path": "scripts/seed/seed-all-comprehensive.ts",
          "domain": "other",
          "layer": "other",
          "size": 26934,
          "lines": 672,
          "complexity": 8,
          "dependencies": [
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types"
          ],
          "exports": [
            "UserRow",
            "ForumRow",
            "ThreadPrefixRow",
            "TagRow",
            "PostRow"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 483,
              "context": "const [new_post]: [{ id: number; depth: number; likeCount: number; createdAt: Date }] = await tx.insert(posts).values({",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": true,
            "hasNumericIds": true,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "HeatEventId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9000000000000001
        },
        {
          "path": "scripts/seed/dictionary.ts",
          "domain": "other",
          "layer": "other",
          "size": 1489,
          "lines": 42,
          "complexity": 1,
          "dependencies": [
            "@db",
            "@schema",
            "@server/src/utils/slugify"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "scripts/quality/quality-metrics.ts",
          "domain": "other",
          "layer": "other",
          "size": 14837,
          "lines": 375,
          "complexity": 5,
          "dependencies": [
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types"
          ],
          "exports": [
            "QualityAnalyzer",
            "type QualityReport",
            "type QualityMetrics"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "HeatEventId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.5
        },
        {
          "path": "scripts/ops/validate-safe-migrations.ts",
          "domain": "other",
          "layer": "other",
          "size": 10489,
          "lines": 335,
          "complexity": 6,
          "dependencies": [
            "fs/promises",
            "path",
            "chalk"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7000000000000002
        },
        {
          "path": "scripts/ops/neon-sync-agent.ts",
          "domain": "other",
          "layer": "other",
          "size": 14447,
          "lines": 382,
          "complexity": 6,
          "dependencies": [
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types"
          ],
          "exports": [
            "NeonSyncAgent "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "HeatEventId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.2
        },
        {
          "path": "scripts/migration/identify-numeric-ids.ts",
          "domain": "other",
          "layer": "other",
          "size": 9802,
          "lines": 357,
          "complexity": 4,
          "dependencies": [
            "glob",
            "fs",
            "path"
          ],
          "exports": [
            "detectNumericIds",
            "NUMERIC_ID_PATTERNS",
            "MIGRATION_BATCHES"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "scripts/migration/generated-id-aliases.ts",
          "domain": "other",
          "layer": "other",
          "size": 3138,
          "lines": 77,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "ActiveBadgeId",
            "ActiveFrameId",
            "ActiveTitleId",
            "AdminUserId",
            "AirdropId",
            "AnimationFrameId",
            "BackupId",
            "CategoryId",
            "CoinId",
            "ContentAuthorId",
            "CosmeticId",
            "DbId",
            "EditorId",
            "EmojiPackId",
            "EntityId",
            "EntryId",
            "ExcludeUserId",
            "ExpectedParentId",
            "FindByAuthorId",
            "FindByCategoryId"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Id"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "scripts/migration/generate-uuid-audit.ts",
          "domain": "other",
          "layer": "other",
          "size": 6190,
          "lines": 139,
          "complexity": 1,
          "dependencies": [
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "HeatEventId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "scripts/migration/generate-id-aliases.ts",
          "domain": "other",
          "layer": "other",
          "size": 2320,
          "lines": 79,
          "complexity": 1,
          "dependencies": [
            "@db/types",
            "node:fs",
            "node:path",
            "node:url"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "scripts/migration/cleanup-old-category-schema.ts",
          "domain": "other",
          "layer": "other",
          "size": 7254,
          "lines": 240,
          "complexity": 3,
          "dependencies": [
            "@db/types",
            "drizzle-orm",
            "chalk"
          ],
          "exports": [
            "runCleanup",
            "validateCleanup"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.6000000000000001
        },
        {
          "path": "scripts/migration/analyze-codebase.ts",
          "domain": "other",
          "layer": "other",
          "size": 26782,
          "lines": 834,
          "complexity": 10,
          "dependencies": [
            "glob",
            "fs",
            "path"
          ],
          "exports": [
            "analyzeCodebase",
            "CodebaseAnalysis",
            "DomainAnalysis"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 346,
              "context": "if (pattern === 'id: number' && !context.includes('interface')) confidence -= 0.2;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.7
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.1
        },
        {
          "path": "scripts/dev/generate-scope-guide.ts",
          "domain": "other",
          "layer": "other",
          "size": 5996,
          "lines": 180,
          "complexity": 2,
          "dependencies": [
            "@db/types",
            "fs/promises",
            "path",
            "glob",
            "url"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        },
        {
          "path": "scripts/db/verify-neon-connection.ts",
          "domain": "other",
          "layer": "other",
          "size": 2372,
          "lines": 83,
          "complexity": 2,
          "dependencies": [
            "@neondatabase/serverless",
            "ws"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        },
        {
          "path": "scripts/db/seed-ui-config-quotes.ts",
          "domain": "other",
          "layer": "other",
          "size": 21038,
          "lines": 566,
          "complexity": 3,
          "dependencies": [
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types"
          ],
          "exports": [
            "seedUiConfigQuotes "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "HeatEventId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.6000000000000001
        },
        {
          "path": "scripts/db/seed-treasury.ts",
          "domain": "other",
          "layer": "other",
          "size": 2635,
          "lines": 68,
          "complexity": 2,
          "dependencies": [
            "@db",
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        },
        {
          "path": "scripts/db/seed-promotion-pricing.ts",
          "domain": "other",
          "layer": "other",
          "size": 11219,
          "lines": 422,
          "complexity": 3,
          "dependencies": [
            "@db/types",
            "drizzle-orm"
          ],
          "exports": [
            "seedPromotionPricing "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.6000000000000001
        },
        {
          "path": "scripts/db/seed-chat.ts",
          "domain": "other",
          "layer": "other",
          "size": 2230,
          "lines": 68,
          "complexity": 1,
          "dependencies": [
            "@db",
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "scripts/db/reset-and-seed.ts",
          "domain": "other",
          "layer": "other",
          "size": 8273,
          "lines": 164,
          "complexity": 2,
          "dependencies": [
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "HeatEventId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        },
        {
          "path": "scripts/db/generate-performance-migration.ts",
          "domain": "other",
          "layer": "other",
          "size": 7912,
          "lines": 186,
          "complexity": 1,
          "dependencies": [
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "HeatEventId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "scripts/db/diff-schema-snapshot.ts",
          "domain": "other",
          "layer": "other",
          "size": 7388,
          "lines": 144,
          "complexity": 2,
          "dependencies": [
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "HeatEventId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "scripts/db/create-missing-tables.ts",
          "domain": "other",
          "layer": "other",
          "size": 10146,
          "lines": 263,
          "complexity": 5,
          "dependencies": [
            "@db",
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1
        },
        {
          "path": "scripts/db/check-reward-tables.ts",
          "domain": "other",
          "layer": "other",
          "size": 2551,
          "lines": 75,
          "complexity": 2,
          "dependencies": [
            "pg",
            "dotenv"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        },
        {
          "path": "scripts/db/check-indices.ts",
          "domain": "other",
          "layer": "other",
          "size": 1670,
          "lines": 68,
          "complexity": 2,
          "dependencies": [
            "@db",
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        },
        {
          "path": "scripts/db/backfill-configZoneType.ts",
          "domain": "other",
          "layer": "other",
          "size": 11415,
          "lines": 160,
          "complexity": 3,
          "dependencies": [
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "HeatEventId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.8
        },
        {
          "path": "scripts/db/apply-migration.ts",
          "domain": "other",
          "layer": "other",
          "size": 2339,
          "lines": 71,
          "complexity": 2,
          "dependencies": [
            "@db/types",
            "pg",
            "dotenv",
            "fs",
            "path"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.9
        },
        {
          "path": "scripts/db/add-critical-indices.ts",
          "domain": "other",
          "layer": "other",
          "size": 2059,
          "lines": 65,
          "complexity": 2,
          "dependencies": [
            "@db",
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.9
        },
        {
          "path": "scripts/db/add-color-theme-field.ts",
          "domain": "other",
          "layer": "other",
          "size": 1649,
          "lines": 52,
          "complexity": 2,
          "dependencies": [
            "@db",
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.9
        },
        {
          "path": "migrations/archive/canonical-zones-schema-update.ts",
          "domain": "other",
          "layer": "other",
          "size": 3216,
          "lines": 101,
          "complexity": 2,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        },
        {
          "path": "lib/emoji/unlockEmojiPack.ts",
          "domain": "other",
          "layer": "other",
          "size": 1069,
          "lines": 43,
          "complexity": 1,
          "dependencies": [
            "@server/src/lib/db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 6,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.30000000000000004
        },
        {
          "path": "db/types/utils.ts",
          "domain": "other",
          "layer": "types",
          "size": 5183,
          "lines": 197,
          "complexity": 6,
          "dependencies": [
            "utility-types"
          ],
          "exports": [
            "isValidUuid",
            "toId",
            "toIdSafe",
            "generateId",
            "validateIds",
            "createIdMapper",
            "isSameId",
            "unwrapId",
            "IdBatch",
            "IdValidators",
            "createMockId",
            "parseIdParam",
            "InvalidIdError",
            "MissingIdError",
            "ID_CONSTANTS"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "Brand"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9000000000000001
        },
        {
          "path": "db/types/system.types.ts",
          "domain": "other",
          "layer": "types",
          "size": 521,
          "lines": 26,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "EventLogWithUser",
            "EventLogFilters",
            "EventLogPagination",
            "__ensureModule"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "EventLog"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/types/index.ts",
          "domain": "other",
          "layer": "types",
          "size": 53,
          "lines": 3,
          "complexity": 0,
          "dependencies": [],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/types/id.types.ts",
          "domain": "other",
          "layer": "types",
          "size": 3760,
          "lines": 106,
          "complexity": 0,
          "dependencies": [
            "utility-types"
          ],
          "exports": [
            "UserId",
            "ThreadId",
            "PostId",
            "StructureId",
            "WalletId",
            "TransactionId",
            "MissionId",
            "AchievementId",
            "ProductId",
            "BadgeId",
            "TitleId",
            "FrameId",
            "PathId",
            "__ensureModule",
            "Id",
            "AdminId",
            "ReporterId",
            "ReportId",
            "ConversationId",
            "RoomId"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Brand"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/types/emoji.types.ts",
          "domain": "other",
          "layer": "types",
          "size": 176,
          "lines": 7,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "EmojiWithAvailability"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/types/brand.types.ts",
          "domain": "other",
          "layer": "types",
          "size": 744,
          "lines": 29,
          "complexity": 0,
          "dependencies": [
            "@/config/brand.config"
          ],
          "exports": [
            "RuntimeBrandConfig",
            "BrandConfigUpdate"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "BrandConfig"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/types/announcement.types.ts",
          "domain": "other",
          "layer": "types",
          "size": 256,
          "lines": 15,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "Announcement"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 2,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.6
        },
        {
          "path": "db/schema/index.ts",
          "domain": "other",
          "layer": "other",
          "size": 7545,
          "lines": 204,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "notifications ",
            "notifications as systemNotifications "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "client/src/main.tsx",
          "domain": "other",
          "layer": "other",
          "size": 1508,
          "lines": 40,
          "complexity": 0,
          "dependencies": [
            "react",
            "react-dom/client",
            "wouter",
            "@/core/constants"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/App.tsx",
          "domain": "other",
          "layer": "other",
          "size": 16722,
          "lines": 551,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "@/components/ui/toaster",
            "@/components/header",
            "@/components/auth/protected-route",
            "@/components/dev/dev-role-switcher",
            "@/components/dev/dev-playground-shortcut",
            "@/components/forum/LegacyForumRedirect"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "tests/e2e/helpers/behavior-analyzer.ts",
          "domain": "other",
          "layer": "other",
          "size": 14014,
          "lines": 476,
          "complexity": 5,
          "dependencies": [
            "@playwright/test"
          ],
          "exports": [
            "BehaviorMetrics",
            "ActionEvent",
            "ClickEvent",
            "ConversionEvent",
            "EngagementMetrics",
            "BehaviorAnalyzer"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "tests/e2e/fixtures/test-setup.ts",
          "domain": "other",
          "layer": "other",
          "size": 16345,
          "lines": 568,
          "complexity": 10,
          "dependencies": [
            "@playwright/test"
          ],
          "exports": [
            "TestEnvironment",
            "TestSetupOptions",
            "AuthenticationHelper",
            "DataValidationHelper"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 3.5
        },
        {
          "path": "tests/e2e/cross-domain/data-consistency.spec.ts",
          "domain": "other",
          "layer": "other",
          "size": 18569,
          "lines": 487,
          "complexity": 7,
          "dependencies": [
            "@playwright/test"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.1000000000000005
        },
        {
          "path": "shared/types/core/index.ts",
          "domain": "other",
          "layer": "types",
          "size": 2686,
          "lines": 160,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "isUser",
            "isUserProfile",
            "isUserAchievement",
            "isInventoryItem",
            "isUserInventory",
            "isForum",
            "isThread",
            "isPost",
            "isThreadSubscription",
            "isThreadView",
            "isPostReaction",
            "isWallet",
            "isTransaction",
            "isPendingTransaction",
            "isTip",
            "isWithdrawal",
            "toDGTAmount",
            "fromDGTAmount",
            "DGT_DECIMALS",
            "DGT_PRECISION"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "shared/types/config/index.ts",
          "domain": "other",
          "layer": "types",
          "size": 2196,
          "lines": 114,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "XpConfigSchema",
            "XpActionSchema",
            "XpMultiplierSchema",
            "LevelFormulaSchema",
            "LevelMilestoneSchema",
            "validateXpConfig",
            "validatePartialXpConfig",
            "defaultXpConfig",
            "EconomyConfigSchema",
            "CurrencyConfigSchema",
            "FeeConfigSchema",
            "WalletLimitsSchema",
            "DistributionConfigSchema",
            "StakingConfigSchema",
            "ShopPricingSchema",
            "validateEconomyConfig",
            "validatePartialEconomyConfig",
            "FeaturesConfigSchema",
            "FeatureFlagSchema",
            "RolloutStrategySchema"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "shared/types/config/features.schema.ts",
          "domain": "other",
          "layer": "types",
          "size": 9366,
          "lines": 301,
          "complexity": 1,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "RolloutStrategySchema",
            "FeatureFlagSchema",
            "PermissionSchema",
            "RoleSchema",
            "AccessRuleSchema",
            "ForumAccessSchema",
            "FeaturesConfigSchema",
            "FeaturesConfig",
            "FeatureFlag",
            "RolloutStrategy",
            "Permission",
            "Role",
            "AccessRule",
            "ForumAccess",
            "validateFeaturesConfig",
            "validatePartialFeaturesConfig",
            "evaluateFeatureFlag"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "shared/types/config/core-entities.schema.ts",
          "domain": "other",
          "layer": "types",
          "size": 11760,
          "lines": 383,
          "complexity": 2,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "UserSettingsSchema",
            "UserStatsSchema",
            "UserSchema",
            "ForumSettingsSchema",
            "ForumStatsSchema",
            "ForumSchema",
            "ThreadMetadataSchema",
            "ThreadSchema",
            "PostMetadataSchema",
            "PostSchema",
            "WalletFeaturesSchema",
            "WalletLimitsSchema",
            "WalletSchema",
            "TransactionMetadataSchema",
            "TransactionSchema",
            "ItemPriceSchema",
            "ItemRequirementsSchema",
            "ItemMetadataSchema",
            "ItemStockSchema",
            "ShopItemSchema"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        },
        {
          "path": "shared/lib/emoji/unlockEmojiPack.ts",
          "domain": "other",
          "layer": "utils",
          "size": 1129,
          "lines": 44,
          "complexity": 1,
          "dependencies": [
            "@server/src/lib/db",
            "@schema",
            "drizzle-orm",
            "@/db/types"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 7,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "EmojiPackId",
              "PackId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.30000000000000004
        },
        {
          "path": "shared/fixtures/utilities/test-helpers.ts",
          "domain": "other",
          "layer": "other",
          "size": 12968,
          "lines": 430,
          "complexity": 4,
          "dependencies": [
            "@/db/types"
          ],
          "exports": [
            "TestDataManager",
            "testDataManager",
            "createTestUser",
            "createTestAdmin",
            "createTestWhale",
            "createTestThread",
            "createTestPost",
            "setupQuickScenario",
            "expectValidUser",
            "expectValidThread",
            "expectValidPost"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 260,
              "context": "generateRealisticPosts(threadId: number, userIds: number[], count: number = 10): any[] {",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.4
        },
        {
          "path": "shared/fixtures/utilities/scenario-generator.ts",
          "domain": "other",
          "layer": "other",
          "size": 21629,
          "lines": 705,
          "complexity": 4,
          "dependencies": [
            "@/db/types"
          ],
          "exports": [
            "ScenarioConfig",
            "ScenarioResult",
            "ScenarioGenerator",
            "scenarioGenerator",
            "availableScenarios",
            "AvailableScenario"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 553,
              "context": "private generateOnboardingProgression(userId: number): any[] {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 624,
              "context": "private generateMarketReactionData(users: any[], threadId: number): any {",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "AdminId",
              "WhaleId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "shared/fixtures/core/factory.ts",
          "domain": "other",
          "layer": "other",
          "size": 5241,
          "lines": 215,
          "complexity": 4,
          "dependencies": [
            "@faker-js/faker",
            "@schema"
          ],
          "exports": [
            "FactoryOptions",
            "BuildOptions",
            "FactoryBuilder",
            "RelationshipManager",
            "ScenarioDefinition",
            "ScenarioResult",
            "FactoryRegistry",
            "Factory"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "User",
              "Thread",
              "Post",
              "ForumCategory",
              "WalletTransaction"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 1.7999999999999998
        },
        {
          "path": "server/src/utils/environment.ts",
          "domain": "other",
          "layer": "utils",
          "size": 1315,
          "lines": 45,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "isDevMode",
            "isProdMode",
            "shouldBypassAuth",
            "getEnvironment"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "server/src/utils/db-utils.ts",
          "domain": "other",
          "layer": "utils",
          "size": 2067,
          "lines": 86,
          "complexity": 4,
          "dependencies": [
            "@db",
            "drizzle-orm"
          ],
          "exports": [
            "createDbError"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 2.3
        },
        {
          "path": "server/src/routes/dev.routes.ts",
          "domain": "other",
          "layer": "routes",
          "size": 4335,
          "lines": 177,
          "complexity": 2,
          "dependencies": [
            "express",
            "@server/src/core/cache.service",
            "@server/src/core/logger",
            "@server/src/utils/environment",
            "@server/src/middleware/dev-security.middleware"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.10000000000000003
        },
        {
          "path": "server/src/lib/db.ts",
          "domain": "other",
          "layer": "utils",
          "size": 227,
          "lines": 12,
          "complexity": 0,
          "dependencies": [
            "pg",
            "drizzle-orm/node-postgres"
          ],
          "exports": [
            "db"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/core/storage.service.ts",
          "domain": "other",
          "layer": "other",
          "size": 14252,
          "lines": 353,
          "complexity": 10,
          "dependencies": [
            "@supabase/supabase-js"
          ],
          "exports": [
            "AVATARS_BUCKET",
            "BANNERS_BUCKET",
            "STICKERS_BUCKET",
            "PresignedUploadOptions",
            "PresignedUrlInfo",
            "GetPresignedUploadUrlParams",
            "IStorageService",
            "storageService",
            "storageService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.5
        },
        {
          "path": "server/src/core/rate-limiter.ts",
          "domain": "other",
          "layer": "other",
          "size": 2795,
          "lines": 105,
          "complexity": 2,
          "dependencies": [
            "express",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [
            "rateLimiter",
            "createRateLimiter"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        },
        {
          "path": "server/src/core/logger.ts",
          "domain": "other",
          "layer": "other",
          "size": 5609,
          "lines": 265,
          "complexity": 4,
          "dependencies": [
            "fs",
            "path",
            "fs"
          ],
          "exports": [
            "initLogger",
            "log",
            "debug",
            "info",
            "warn",
            "error",
            "critical",
            "logger"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 2.3
        },
        {
          "path": "server/src/core/errors.ts",
          "domain": "other",
          "layer": "other",
          "size": 10400,
          "lines": 375,
          "complexity": 7,
          "dependencies": [
            "express"
          ],
          "exports": [
            "ErrorContext",
            "ErrorResponse",
            "AppError",
            "BadRequestError",
            "UnauthorizedError",
            "ForbiddenError",
            "NotFoundError",
            "ConflictError",
            "ValidationError",
            "RateLimitError",
            "InsufficientPermissionsError",
            "BusinessRuleViolationError",
            "DatabaseError",
            "WalletError",
            "InsufficientFundsError",
            "createErrorContext",
            "asyncHandler",
            "globalErrorHandler",
            "ErrorFactory"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.9000000000000004
        },
        {
          "path": "server/src/core/db.ts",
          "domain": "other",
          "layer": "other",
          "size": 1824,
          "lines": 60,
          "complexity": 2,
          "dependencies": [
            "@neondatabase/serverless",
            "drizzle-orm/neon-serverless",
            "ws",
            "@schema"
          ],
          "exports": [
            "db",
            "pool",
            "withRetry"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.4
        },
        {
          "path": "server/src/core/database.ts",
          "domain": "other",
          "layer": "other",
          "size": 291,
          "lines": 6,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "db "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/core/config.service.ts",
          "domain": "other",
          "layer": "other",
          "size": 879,
          "lines": 29,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "getConfigValue",
            "mergeConfig"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.7
        },
        {
          "path": "server/src/core/base-controller.ts",
          "domain": "other",
          "layer": "other",
          "size": 2603,
          "lines": 110,
          "complexity": 1,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "Response"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.8999999999999999
        },
        {
          "path": "server/src/core/background-processor.ts",
          "domain": "other",
          "layer": "other",
          "size": 4542,
          "lines": 167,
          "complexity": 2,
          "dependencies": [
            "@db",
            "drizzle-orm",
            "@schema",
            "@schema"
          ],
          "exports": [
            "BackgroundProcessor",
            "backgroundProcessor"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "AchievementEventType"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        },
        {
          "path": "scripts/db/utils/seedUtils.ts",
          "domain": "other",
          "layer": "utils",
          "size": 1763,
          "lines": 43,
          "complexity": 2,
          "dependencies": [
            "@db/types",
            "drizzle-orm/pg-core"
          ],
          "exports": [
            "logSeed",
            "slugify"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 1.9
        },
        {
          "path": "scripts/db/utils/schema.ts",
          "domain": "other",
          "layer": "utils",
          "size": 25,
          "lines": 1,
          "complexity": 0,
          "dependencies": [],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/system/referralSources.ts",
          "domain": "other",
          "layer": "other",
          "size": 923,
          "lines": 37,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "referralSources",
            "ReferralSource"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/system/rateLimits.ts",
          "domain": "other",
          "layer": "other",
          "size": 950,
          "lines": 20,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "rateLimits",
            "RateLimit"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "db/schema/system/event_logs.ts",
          "domain": "other",
          "layer": "other",
          "size": 1453,
          "lines": 46,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "eventTypeEnum",
            "eventLogs",
            "EventLog",
            "InsertEventLog"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/system/cooldownState.ts",
          "domain": "other",
          "layer": "other",
          "size": 684,
          "lines": 21,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "cooldownState",
            "CooldownState"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/system/analyticsEvents.ts",
          "domain": "other",
          "layer": "other",
          "size": 1267,
          "lines": 38,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "analyticsEvents",
            "AnalyticsEvent"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/system/activityFeed.ts",
          "domain": "other",
          "layer": "other",
          "size": 969,
          "lines": 29,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "activityFeed",
            "ActivityFeedItem"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/migrations/performance-indices.ts",
          "domain": "other",
          "layer": "other",
          "size": 5516,
          "lines": 171,
          "complexity": 2,
          "dependencies": [
            "drizzle-orm",
            "drizzle-orm/pg-core"
          ],
          "exports": [
            "performanceIndicesMigration",
            "performanceIndicesMetadata"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        },
        {
          "path": "db/schema/messaging/conversations.ts",
          "domain": "other",
          "layer": "other",
          "size": 1450,
          "lines": 37,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm",
            "drizzle-zod"
          ],
          "exports": [
            "conversations",
            "Conversation",
            "insertConversationSchema",
            "InsertConversation"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/messaging/conversationParticipants.ts",
          "domain": "other",
          "layer": "other",
          "size": 1410,
          "lines": 47,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "conversationParticipants",
            "ConversationParticipant"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/messaging/chatRooms.ts",
          "domain": "other",
          "layer": "other",
          "size": 1763,
          "lines": 58,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm",
            "drizzle-zod",
            "zod"
          ],
          "exports": [
            "chatRooms",
            "insertChatRoomSchema",
            "ChatRoom",
            "InsertChatRoom"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/gamification/platformStats.ts",
          "domain": "other",
          "layer": "other",
          "size": 709,
          "lines": 15,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "platformStatistics",
            "PlatformStatistic"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "db/schema/dictionary/upvotes.ts",
          "domain": "other",
          "layer": "other",
          "size": 865,
          "lines": 27,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "dictionaryUpvotes",
            "DictionaryUpvote",
            "NewDictionaryUpvote"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/dictionary/entries.ts",
          "domain": "other",
          "layer": "other",
          "size": 1882,
          "lines": 55,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm",
            "drizzle-zod",
            "zod"
          ],
          "exports": [
            "dictionaryEntries",
            "insertDictionaryEntrySchema",
            "DictionaryEntry",
            "NewDictionaryEntry"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/core/enums.ts",
          "domain": "other",
          "layer": "other",
          "size": 2099,
          "lines": 94,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core"
          ],
          "exports": [
            "shoutboxPositionEnum",
            "ticketStatusEnum",
            "transactionStatusEnum",
            "notificationTypeEnum",
            "reactionTypeEnum",
            "transactionTypeEnum",
            "withdrawalStatusEnum",
            "vaultStatusEnum",
            "contentEditStatusEnum",
            "contentVisibilityStatusEnum",
            "mentionSourceTypeEnum",
            "subscriptionTypeEnum",
            "subscriptionStatusEnum",
            "cosmeticTypeEnum",
            "userRoleEnum "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/advertising/targeting.ts",
          "domain": "other",
          "layer": "other",
          "size": 1465,
          "lines": 40,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "campaignRules",
            "CampaignRule",
            "InsertCampaignRule"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/advertising/placements.ts",
          "domain": "other",
          "layer": "other",
          "size": 2527,
          "lines": 88,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "placementPositionEnum",
            "adFormatEnum",
            "adPlacements",
            "AdPlacement",
            "InsertAdPlacement"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/advertising/performance.ts",
          "domain": "other",
          "layer": "other",
          "size": 4596,
          "lines": 146,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "interactionTypeEnum",
            "adImpressions",
            "campaignMetrics",
            "AdImpression",
            "InsertAdImpression",
            "CampaignMetrics"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/advertising/campaigns.ts",
          "domain": "other",
          "layer": "other",
          "size": 2541,
          "lines": 95,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "campaignStatusEnum",
            "paymentMethodEnum",
            "campaignTypeEnum",
            "campaigns",
            "Campaign",
            "InsertCampaign"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/utils/spacing-constants.ts",
          "domain": "other",
          "layer": "utils",
          "size": 1456,
          "lines": 60,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "FORUM_SPACING",
            "FORUM_LAYOUTS",
            "getForumSpacing",
            "getForumLayout"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/utils/card-constants.ts",
          "domain": "other",
          "layer": "utils",
          "size": 2996,
          "lines": 100,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "CARD_STYLES",
            "CARD_VARIANTS",
            "getCardStyle",
            "createCardStyle"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/utils/avatar.ts",
          "domain": "other",
          "layer": "utils",
          "size": 750,
          "lines": 30,
          "complexity": 1,
          "dependencies": [
            "blueimp-md5"
          ],
          "exports": [
            "getAvatarUrl"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/utils/adaptiveSpacing.ts",
          "domain": "other",
          "layer": "utils",
          "size": 5896,
          "lines": 191,
          "complexity": 1,
          "dependencies": [
            "clsx"
          ],
          "exports": [
            "SpacingSize",
            "ContentDensity",
            "getAdaptiveSpacing",
            "getAdaptivePadding",
            "getAdaptiveTypography",
            "getTouchTargetSize",
            "combineResponsiveClasses",
            "AdaptiveSpacingResult",
            "getAdaptiveConfig"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/types/preferences.types.ts",
          "domain": "other",
          "layer": "types",
          "size": 85,
          "lines": 2,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "PreferenceSection"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/types/gamification.types.ts",
          "domain": "other",
          "layer": "types",
          "size": 5942,
          "lines": 252,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "Achievement",
            "AchievementRequirement",
            "AchievementReward",
            "UserAchievement",
            "AchievementProgress",
            "XPAction",
            "XPCondition",
            "XPLog",
            "UserLevel",
            "LevelUnlocks",
            "Mission",
            "MissionObjective",
            "MissionProgress",
            "ObjectiveProgress",
            "MissionReward",
            "LeaderboardEntry",
            "Leaderboard",
            "GamificationOverview",
            "UserGamificationStats",
            "AchievementListResponse"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 88,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "StandardApiResponse"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.6
        },
        {
          "path": "client/src/types/core.types.ts",
          "domain": "other",
          "layer": "types",
          "size": 2483,
          "lines": 137,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "ApiErrorResponse",
            "ApiErrorData",
            "TimingMetadata",
            "StandardApiResponse",
            "TestUser",
            "MockComponentProps",
            "UnknownApiData",
            "UnknownEventData",
            "UploadedFile",
            "FormValidationError",
            "SelectOption",
            "PaginationParams",
            "PaginatedResponse",
            "SearchParams",
            "DateRange",
            "EntityReference"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/types/canonical.types.ts",
          "domain": "other",
          "layer": "types",
          "size": 9704,
          "lines": 458,
          "complexity": 1,
          "dependencies": [
            "@db/types"
          ],
          "exports": [
            "CanonicalZone",
            "CanonicalForum",
            "CanonicalSubforum",
            "CanonicalThread",
            "CanonicalPost",
            "CanonicalUser",
            "CanonicalTag",
            "StandardApiResponse",
            "PaginatedResponse",
            "CanonicalThreadSearchParams",
            "CanonicalThreadCreateParams",
            "CanonicalPostCreateParams",
            "ForumStructureContext",
            "NavigationBreadcrumb",
            "ForumThemeContext",
            "MergedZone",
            "MergedForum",
            "ThreadWithUser",
            "ThreadWithUserAndCategory",
            "PostWithUser"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 23,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 60,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 110,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 149,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 178,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 206,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 275,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 400,
              "context": "getStructureById: (id: number) => CanonicalForum | CanonicalSubforum | undefined;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 208,
              "context": "threadId: number;",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 378,
              "context": "threadId: number;",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ForumId",
              "ParentZoneId",
              "ZoneId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.7
        },
        {
          "path": "client/src/test/setup.ts",
          "domain": "other",
          "layer": "other",
          "size": 2644,
          "lines": 87,
          "complexity": 3,
          "dependencies": [
            "vitest",
            "react"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 2.1
        },
        {
          "path": "client/src/styles/cssVariables.ts",
          "domain": "other",
          "layer": "other",
          "size": 1671,
          "lines": 56,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "setZoneAccentVariables",
            "getZoneAccent",
            "hexToRgb"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/stores/usePlaygroundControls.ts",
          "domain": "other",
          "layer": "other",
          "size": 894,
          "lines": 25,
          "complexity": 0,
          "dependencies": [
            "zustand"
          ],
          "exports": [
            "usePlaygroundControls"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.5
        },
        {
          "path": "client/src/stores/useLayoutStore.ts",
          "domain": "other",
          "layer": "other",
          "size": 5939,
          "lines": 186,
          "complexity": 1,
          "dependencies": [
            "zustand",
            "zustand/middleware",
            "immer"
          ],
          "exports": [
            "SlotId",
            "LayoutComponentInstance",
            "LayoutStateV1",
            "LayoutStoreState",
            "useLayoutStore"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/services/error.service.ts",
          "domain": "other",
          "layer": "services",
          "size": 8287,
          "lines": 352,
          "complexity": 5,
          "dependencies": [
            "sonner"
          ],
          "exports": [
            "ErrorSeverity",
            "ErrorCategory",
            "AppError",
            "ErrorHandler",
            "errorService",
            "useErrorHandler"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.5
        },
        {
          "path": "client/src/schemas/uiQuotes.schema.ts",
          "domain": "other",
          "layer": "other",
          "size": 447,
          "lines": 15,
          "complexity": 0,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "quoteSchema",
            "uiQuotesSchema",
            "UIQuote",
            "UIQuotes"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "client/src/schemas/featureFlags.schema.ts",
          "domain": "other",
          "layer": "other",
          "size": 388,
          "lines": 13,
          "complexity": 0,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "featureFlagSchema",
            "featureFlagsSchema",
            "FeatureFlag",
            "FeatureFlags"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "client/src/schemas/brand.schema.ts",
          "domain": "other",
          "layer": "other",
          "size": 216,
          "lines": 6,
          "complexity": 0,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "brandSchema",
            "BrandConfig"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1
        },
        {
          "path": "client/src/schemas/assertValid.ts",
          "domain": "other",
          "layer": "other",
          "size": 330,
          "lines": 12,
          "complexity": 1,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "assertValid"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "client/src/providers/root-provider.tsx",
          "domain": "other",
          "layer": "other",
          "size": 2394,
          "lines": 64,
          "complexity": 1,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/hooks/use-auth",
            "@/hooks/use-purchase-modal",
            "@/contexts/shoutbox-context",
            "@/contexts/ForumStructureContext",
            "@/contexts/ForumThemeProvider",
            "@/components/ui/tooltip",
            "@/contexts/ProfileCardContext",
            "@/contexts/MotionContext",
            "@/lib/queryClient",
            "@/contexts/ForumOrderingContext"
          ],
          "exports": [
            "RootProvider"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/providers/app-provider.tsx",
          "domain": "other",
          "layer": "other",
          "size": 668,
          "lines": 21,
          "complexity": 1,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "next-themes",
            "@/contexts/XpToastContext",
            "@/contexts/LevelUpContext"
          ],
          "exports": [
            "AppProviders"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/pages/whispers.tsx",
          "domain": "other",
          "layer": "pages",
          "size": 3858,
          "lines": 120,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/messages/WhispersInbox",
            "@/components/messages/WhisperButton",
            "@/hooks/use-messages",
            "@/components/ui/card",
            "@/components/ui/badge",
            "@/components/messages/icons/MessageSquareWave"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/pages/ui-playground.tsx",
          "domain": "other",
          "layer": "pages",
          "size": 3266,
          "lines": 101,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/pages/dev",
            "@/pages/not-found",
            "@/layout/primitives",
            "@/pages/ui-playground/sections/ButtonsSection",
            "@/pages/ui-playground/sections/CardsSection",
            "@/pages/ui-playground/sections/ColorsSection",
            "@/pages/ui-playground/sections/AvatarBadgesSection",
            "@/pages/ui-playground/sections/AnimationsSection",
            "@/pages/ui-playground/sections/FontsSection"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/pages/progress.tsx",
          "domain": "other",
          "layer": "pages",
          "size": 8736,
          "lines": 275,
          "complexity": 1,
          "dependencies": [
            "react",
            "react-helmet",
            "@/lib/utils",
            "@/components/ui/button",
            "@/components/ui/tabs",
            "@/components/ui/alert",
            "@/hooks/use-gamification",
            "lucide-react",
            "framer-motion",
            "@/hooks/use-auth",
            "@/features/gamification/services/gamification-api.service"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/pages/not-found.tsx",
          "domain": "other",
          "layer": "pages",
          "size": 1569,
          "lines": 46,
          "complexity": 1,
          "dependencies": [
            "wouter",
            "lucide-react",
            "@/components/ui/button",
            "@/components/header"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/pages/home.tsx",
          "domain": "other",
          "layer": "pages",
          "size": 4020,
          "lines": 117,
          "complexity": 1,
          "dependencies": [
            "@/contexts/ForumStructureContext",
            "@/contexts/ForumStructureContext",
            "@/components/layout/hero-section",
            "@/components/layout/announcement-ticker",
            "@/components/footer",
            "@/components/layout/ResponsiveLayoutWrapper",
            "@/components/zone/PrimaryZoneCarousel",
            "@/layout/primitives/Wide",
            "@/components/ui/content-area",
            "@/contexts/content-feed-context",
            "@/utils/spacing-constants",
            "@/features/users/hooks",
            "@/hooks/useZoneStats",
            "@/utils/forumStats",
            "@/components/skeletons/HomePageSkeleton",
            "@/components/forum/ZoneCard",
            "@/components/forum/ForumErrorBoundary"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "MergedZone"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "client/src/pages/fixtures-dashboard.tsx",
          "domain": "other",
          "layer": "pages",
          "size": 11005,
          "lines": 370,
          "complexity": 1,
          "dependencies": [
            "react",
            "react",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/badge",
            "@/components/ui/tabs",
            "@/components/fixtures/fixture-builder",
            "@/components/fixtures/fixture-preview",
            "sonner"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/pages/degen-index.tsx",
          "domain": "other",
          "layer": "pages",
          "size": 14818,
          "lines": 548,
          "complexity": 2,
          "dependencies": [
            "react",
            "react",
            "@tanstack/react-query",
            "@/components/ui/loader",
            "@/components/ui/error-display",
            "@/components/ui/input",
            "@/components/ui/button",
            "@/components/ui/card",
            "lucide-react",
            "@/components/users/UserDirectoryTable",
            "@/components/users/UserFilters",
            "framer-motion"
          ],
          "exports": [
            "DegenUser"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 15,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 4
        },
        {
          "path": "client/src/pages/RouteProtectionDemo.tsx",
          "domain": "other",
          "layer": "pages",
          "size": 6853,
          "lines": 230,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/hooks/use-auth",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/lib/roles",
            "@/lib/roles"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Role"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/lib/utils.ts",
          "domain": "other",
          "layer": "utils",
          "size": 3439,
          "lines": 125,
          "complexity": 4,
          "dependencies": [
            "clsx",
            "tailwind-merge"
          ],
          "exports": [
            "cn",
            "formatNumber",
            "formatCurrency",
            "formatRelativeTime",
            "getInitials",
            "isLightColor",
            "formatDate"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/lib/safeWebSocket.ts",
          "domain": "other",
          "layer": "utils",
          "size": 4166,
          "lines": 156,
          "complexity": 4,
          "dependencies": [
            "@/constants/env",
            "@/constants/websocket-disabled"
          ],
          "exports": [
            "WebSocketMessage",
            "SafeWebSocketOptions",
            "createSafeWebSocket",
            "safeSendMessage",
            "safeCloseWebSocket"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 2.3
        },
        {
          "path": "client/src/lib/routeConfig.ts",
          "domain": "other",
          "layer": "utils",
          "size": 4172,
          "lines": 229,
          "complexity": 2,
          "dependencies": [],
          "exports": [
            "RouteConfig",
            "routeConfig",
            "findRouteConfig",
            "getRouteProtection"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Role"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/lib/queryClient.ts",
          "domain": "other",
          "layer": "utils",
          "size": 4095,
          "lines": 153,
          "complexity": 4,
          "dependencies": [
            "@tanstack/react-query"
          ],
          "exports": [
            "apiRequest",
            "getQueryFn",
            "setupXpGainListener",
            "setupLevelUpListener",
            "apiPost",
            "apiPut",
            "apiPatch",
            "apiDelete",
            "queryClient "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "QueryFunction"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 2.3
        },
        {
          "path": "client/src/lib/formatters.ts",
          "domain": "other",
          "layer": "utils",
          "size": 3266,
          "lines": 117,
          "complexity": 3,
          "dependencies": [],
          "exports": [
            "formatCurrency",
            "formatNumber",
            "truncateText",
            "formatAddress",
            "formatDate",
            "formatForumDate",
            "formatThreadTimestamp",
            "formatTimeAgo",
            "formatTimestamp",
            "formatTime"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.3000000000000001
        },
        {
          "path": "client/src/lib/format-date.ts",
          "domain": "other",
          "layer": "utils",
          "size": 3067,
          "lines": 117,
          "complexity": 3,
          "dependencies": [
            "date-fns"
          ],
          "exports": [
            "formatDate",
            "formatForumDate",
            "formatThreadTimestamp",
            "formatTimeAgo",
            "formatTimestamp",
            "formatTime"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.3000000000000001
        },
        {
          "path": "client/src/lib/api.ts",
          "domain": "other",
          "layer": "utils",
          "size": 210,
          "lines": 9,
          "complexity": 1,
          "dependencies": [],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/lib/api-response.ts",
          "domain": "other",
          "layer": "utils",
          "size": 5778,
          "lines": 240,
          "complexity": 6,
          "dependencies": [
            "@/types/canonical.types"
          ],
          "exports": [
            "isStandardApiResponse",
            "extractApiData",
            "createStandardResponse",
            "createErrorResponse",
            "createPaginatedResponse",
            "createQueryFn",
            "transformLegacyResponse",
            "withTiming"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "StandardApiResponse",
              "PaginatedResponse"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9000000000000001
        },
        {
          "path": "client/src/lib/api-request.ts",
          "domain": "other",
          "layer": "utils",
          "size": 3988,
          "lines": 162,
          "complexity": 5,
          "dependencies": [],
          "exports": [
            "ApiError",
            "ApiRequestConfig"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.5
        },
        {
          "path": "client/src/hooks/widgetData.ts",
          "domain": "other",
          "layer": "hooks",
          "size": 295,
          "lines": 6,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "createWidgetQueryKey"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/hooks/useZoneStats.ts",
          "domain": "other",
          "layer": "hooks",
          "size": 1290,
          "lines": 57,
          "complexity": 1,
          "dependencies": [
            "@tanstack/react-query",
            "@/lib/queryClient"
          ],
          "exports": [
            "ZoneStats",
            "useZoneStatsMap"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/hooks/useShowHotRibbon.ts",
          "domain": "other",
          "layer": "hooks",
          "size": 285,
          "lines": 10,
          "complexity": 0,
          "dependencies": [
            "@/config/featureFlags"
          ],
          "exports": [
            "useShowHotRibbon"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/hooks/useSearchParams.ts",
          "domain": "other",
          "layer": "hooks",
          "size": 678,
          "lines": 22,
          "complexity": 1,
          "dependencies": [
            "wouter",
            "react"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/hooks/useMediaQuery.ts",
          "domain": "other",
          "layer": "hooks",
          "size": 1941,
          "lines": 82,
          "complexity": 1,
          "dependencies": [
            "react"
          ],
          "exports": [
            "useMediaQuery",
            "useMobileDetector",
            "useBreakpoint"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/hooks/useJsonConfig.ts",
          "domain": "other",
          "layer": "hooks",
          "size": 1944,
          "lines": 71,
          "complexity": 2,
          "dependencies": [
            "react",
            "zod",
            "@/lib/api-request",
            "@/hooks/use-toast"
          ],
          "exports": [
            "UseJsonConfigReturn",
            "useJsonConfig"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        },
        {
          "path": "client/src/hooks/useIdentityDisplay.ts",
          "domain": "other",
          "layer": "hooks",
          "size": 1387,
          "lines": 49,
          "complexity": 1,
          "dependencies": [
            "@/hooks/useUserCosmetics",
            "@/hooks/useUserXP"
          ],
          "exports": [
            "IdentityDisplay",
            "useIdentityDisplay"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 7,
              "context": "roles?: Array<{ id: number; name: string; hexColor?: string | null }>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "conversion",
              "pattern": "parseInt(user.id)",
              "line": 34,
              "context": "const { data: xpData } = useUserXP(typeof user?.id === 'string' ? parseInt(user.id) : user?.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.7
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.9
        },
        {
          "path": "client/src/hooks/useFollowing.ts",
          "domain": "other",
          "layer": "hooks",
          "size": 1068,
          "lines": 44,
          "complexity": 1,
          "dependencies": [
            "@tanstack/react-query",
            "@/lib/queryClient"
          ],
          "exports": [
            "FollowUser",
            "useFollowing"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/hooks/useFeatureGates.ts",
          "domain": "other",
          "layer": "hooks",
          "size": 3683,
          "lines": 155,
          "complexity": 2,
          "dependencies": [
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/hooks/use-auth"
          ],
          "exports": [
            "FeatureGate",
            "UserFeatureAccess",
            "useFeatureGates",
            "useFeatureAccess"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.10000000000000003
        },
        {
          "path": "client/src/hooks/useDailyTasks.ts",
          "domain": "other",
          "layer": "hooks",
          "size": 1641,
          "lines": 58,
          "complexity": 1,
          "dependencies": [
            "react"
          ],
          "exports": [
            "DailyTaskStatus",
            "DailyTask",
            "DailyTasksStats",
            "useDailyTasks"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/hooks/useCrudMutation.ts",
          "domain": "other",
          "layer": "hooks",
          "size": 2467,
          "lines": 86,
          "complexity": 1,
          "dependencies": [
            "@tanstack/react-query",
            "@tanstack/react-query",
            "@/hooks/use-toast"
          ],
          "exports": [
            "useCrudMutation"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "QueryKey"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "client/src/hooks/useConfig.ts",
          "domain": "other",
          "layer": "hooks",
          "size": 113,
          "lines": 6,
          "complexity": 0,
          "dependencies": [
            "@/config/publicConfig"
          ],
          "exports": [
            "useConfig"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/hooks/use-toast.ts",
          "domain": "other",
          "layer": "hooks",
          "size": 675,
          "lines": 29,
          "complexity": 1,
          "dependencies": [
            "react"
          ],
          "exports": [
            "useToast"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/hooks/use-mobile.tsx",
          "domain": "other",
          "layer": "hooks",
          "size": 557,
          "lines": 20,
          "complexity": 1,
          "dependencies": [
            "react"
          ],
          "exports": [
            "useIsMobile"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/hooks/use-media-query.ts",
          "domain": "other",
          "layer": "hooks",
          "size": 460,
          "lines": 8,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "useMediaQuery",
            "useBreakpoint",
            "useMobileDetector"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/hooks/use-local-storage.ts",
          "domain": "other",
          "layer": "hooks",
          "size": 2229,
          "lines": 78,
          "complexity": 3,
          "dependencies": [
            "react"
          ],
          "exports": [
            "useLocalStorage"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.1
        },
        {
          "path": "client/src/hooks/use-gamification.tsx",
          "domain": "other",
          "layer": "hooks",
          "size": 6280,
          "lines": 197,
          "complexity": 2,
          "dependencies": [
            "@tanstack/react-query",
            "@/features/gamification/services/gamification-api.service",
            "@/hooks/use-auth",
            "@/hooks/use-toast"
          ],
          "exports": [
            "useGamification"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/hooks/use-draft.ts",
          "domain": "other",
          "layer": "hooks",
          "size": 5081,
          "lines": 202,
          "complexity": 4,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@db/types"
          ],
          "exports": [
            "useDraft"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "CategoryId",
              "PrefixId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 2.3
        },
        {
          "path": "client/src/hooks/use-debounce.ts",
          "domain": "other",
          "layer": "hooks",
          "size": 670,
          "lines": 26,
          "complexity": 1,
          "dependencies": [
            "react"
          ],
          "exports": [
            "useDebounce"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/hooks/use-content.ts",
          "domain": "other",
          "layer": "hooks",
          "size": 2430,
          "lines": 102,
          "complexity": 2,
          "dependencies": [
            "@tanstack/react-query",
            "react",
            "@/types/thread.types",
            "@db/types"
          ],
          "exports": [
            "ContentTab",
            "ContentItem",
            "ContentResponse",
            "UseContentParams",
            "useContent",
            "useHomeContent",
            "useForumContent"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ThreadDisplay"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/hooks/use-async-button.tsx",
          "domain": "other",
          "layer": "hooks",
          "size": 1209,
          "lines": 45,
          "complexity": 2,
          "dependencies": [
            "react"
          ],
          "exports": [
            "AsyncCallback",
            "useAsyncButton"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/hooks/index.ts",
          "domain": "other",
          "layer": "hooks",
          "size": 762,
          "lines": 23,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "useAuth ",
            "useAuthRequired ",
            "useToast ",
            "useMessages ",
            "useInfiniteScroll ",
            "useWebSocketStatus ",
            "useRainNotifications ",
            "useDgtPurchase ",
            "useImageUpload ",
            "useAvatarUpload ",
            "useMediaQuery",
            "useBreakpoint",
            "useMobileDetector"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/core/router.tsx",
          "domain": "other",
          "layer": "other",
          "size": 528,
          "lines": 18,
          "complexity": 0,
          "dependencies": [
            "@/constants/routes"
          ],
          "exports": [
            "ROUTES"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/core/queryClient.ts",
          "domain": "other",
          "layer": "other",
          "size": 2308,
          "lines": 91,
          "complexity": 2,
          "dependencies": [
            "@tanstack/react-query"
          ],
          "exports": [
            "getQueryFn",
            "queryClient"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/core/constants.ts",
          "domain": "other",
          "layer": "other",
          "size": 1038,
          "lines": 32,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "IS_PRODUCTION",
            "IS_DEVELOPMENT",
            "BASE_URL",
            "API_BASE_URL",
            "MODE",
            "DEFAULT_PAGE_SIZE"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/core/api.ts",
          "domain": "other",
          "layer": "other",
          "size": 7549,
          "lines": 312,
          "complexity": 6,
          "dependencies": [
            "@/hooks/use-shop-items",
            "@/hooks/use-vault-items",
            "@/types/notifications",
            "@db/types"
          ],
          "exports": [
            "CryptoBalance",
            "WalletBalance",
            "DgtPurchaseOrder",
            "api"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 224,
              "context": "recipients: { id: number; username: string }[];",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": true,
            "hasNumericIds": true,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "ShopItem"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.0000000000000004
        },
        {
          "path": "client/src/contexts/content-feed-context.tsx",
          "domain": "other",
          "layer": "other",
          "size": 2589,
          "lines": 92,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/hooks/use-content"
          ],
          "exports": [
            "ContentFeedProvider",
            "useContentFeed",
            "useContentFeedState"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ContentTab"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/contexts/MotionContext.tsx",
          "domain": "other",
          "layer": "other",
          "size": 1576,
          "lines": 46,
          "complexity": 1,
          "dependencies": [
            "react"
          ],
          "exports": [
            "MotionProvider",
            "useMotion"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/constants/websocket-disabled.ts",
          "domain": "other",
          "layer": "other",
          "size": 533,
          "lines": 15,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "WEBSOCKET_DISABLED"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/constants/routes.ts",
          "domain": "other",
          "layer": "other",
          "size": 1948,
          "lines": 46,
          "complexity": 0,
          "dependencies": [
            "@/constants/routes"
          ],
          "exports": [
            "ROUTES"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/constants/env.ts",
          "domain": "other",
          "layer": "other",
          "size": 839,
          "lines": 25,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "IS_PRODUCTION",
            "IS_DEVELOPMENT",
            "BASE_URL",
            "MODE"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/constants/apiRoutes.ts",
          "domain": "other",
          "layer": "other",
          "size": 211,
          "lines": 10,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "API_ROUTES"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 4,
              "context": "threadsByForum: (id: number | string) => `/api/forum/forums/${id}/threads`",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.6
        },
        {
          "path": "client/src/config/widgetRegistry.ts",
          "domain": "other",
          "layer": "other",
          "size": 7803,
          "lines": 320,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/stores/useLayoutStore",
            "lucide-react"
          ],
          "exports": [
            "WidgetMetadata",
            "WidgetConfig",
            "widgetRegistry",
            "getWidgetsByCategory",
            "getWidgetsBySupportedSlot",
            "getWidgetMetadata",
            "WidgetId"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "SlotId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/config/ui.config.ts",
          "domain": "other",
          "layer": "other",
          "size": 10336,
          "lines": 354,
          "complexity": 2,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "HeroQuoteSchema",
            "HeroQuote",
            "FooterQuoteSchema",
            "FooterQuote",
            "UiConfigSchema",
            "uiConfig"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        },
        {
          "path": "client/src/config/themeFallbacks.ts",
          "domain": "other",
          "layer": "other",
          "size": 589,
          "lines": 34,
          "complexity": 0,
          "dependencies": [
            "lucide-react"
          ],
          "exports": [
            "DefaultZoneTheme",
            "DEFAULT_ZONE_THEMES"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/config/themeConstants.ts",
          "domain": "other",
          "layer": "other",
          "size": 2378,
          "lines": 80,
          "complexity": 1,
          "dependencies": [
            "lucide-react"
          ],
          "exports": [
            "ZONE_THEMES",
            "THEME_ICONS",
            "THEME_COLORS_BG"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/config/tags.config.ts",
          "domain": "other",
          "layer": "other",
          "size": 831,
          "lines": 31,
          "complexity": 0,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "ForumTagSchema",
            "ForumTag",
            "tagConfig"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "client/src/config/sidebarWidgets.config.ts",
          "domain": "other",
          "layer": "other",
          "size": 1507,
          "lines": 36,
          "complexity": 0,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "WidgetType",
            "SidebarWidgetConfigSchema",
            "SidebarWidgetConfig",
            "sidebarWidgets",
            "validatedConfig as validatedSidebarWidgets "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "client/src/config/rarity.config.ts",
          "domain": "other",
          "layer": "other",
          "size": 661,
          "lines": 20,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "rarityColorMap",
            "rarityBorderMap",
            "Rarity"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/config/publicConfig.ts",
          "domain": "other",
          "layer": "other",
          "size": 122,
          "lines": 11,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "publicConfig"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/config/pagination.config.ts",
          "domain": "other",
          "layer": "other",
          "size": 286,
          "lines": 14,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "PAGINATION_CONFIG",
            "PaginationConfig"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/config/pageSlotMap.ts",
          "domain": "other",
          "layer": "other",
          "size": 637,
          "lines": 20,
          "complexity": 0,
          "dependencies": [
            "@/stores/useLayoutStore"
          ],
          "exports": [
            "pageSlotMap"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "SlotId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/config/navigation.ts",
          "domain": "other",
          "layer": "other",
          "size": 5235,
          "lines": 242,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/icons/iconRenderer"
          ],
          "exports": [
            "NavItemConfig",
            "UserMenuItemConfig",
            "primaryNavigation",
            "createUserMenuItems",
            "filterNavItems",
            "trackNavigation"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/config/footer-navigation.ts",
          "domain": "other",
          "layer": "other",
          "size": 1851,
          "lines": 64,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "FooterLink",
            "FooterNavigationSection",
            "footerNavigation",
            "getNavigationSection",
            "getResourcesSection",
            "getCommunitySection",
            "getLegalSection"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/config/fonts.config.ts",
          "domain": "other",
          "layer": "other",
          "size": 5718,
          "lines": 201,
          "complexity": 2,
          "dependencies": [],
          "exports": [
            "FontConfig",
            "fontConfigs",
            "getAllFontImports",
            "getFontsByCategory",
            "fontCombinations"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/config/featureFlags.ts",
          "domain": "other",
          "layer": "other",
          "size": 268,
          "lines": 13,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "featureFlags",
            "ENABLE_WIDGETS"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/config/easter-eggs.config.ts",
          "domain": "other",
          "layer": "other",
          "size": 2236,
          "lines": 58,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "XP_EASTER_EGGS",
            "BANKRUPTCY_EFFECTS",
            "BankruptcyMessage",
            "CLOUT_EASTER_EGGS",
            "OBLITERATION_EFFECTS",
            "ObliterationMessage"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/config/brand.config.ts",
          "domain": "other",
          "layer": "other",
          "size": 3054,
          "lines": 147,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "brandConfig",
            "BrandConfig",
            "ColorSystem",
            "AnimationSystem"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/config/animation.config.ts",
          "domain": "other",
          "layer": "other",
          "size": 248,
          "lines": 15,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "animationConfig",
            "AnimationConfig"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ErrorBoundary.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1210,
          "lines": 50,
          "complexity": 1,
          "dependencies": [
            "react"
          ],
          "exports": [
            "ErrorBoundary"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "server/src/routes/api/ui.routes.ts",
          "domain": "other",
          "layer": "routes",
          "size": 553,
          "lines": 21,
          "complexity": 1,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "server/src/routes/api/index.ts",
          "domain": "other",
          "layer": "routes",
          "size": 1054,
          "lines": 37,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/core/utils/error-response.util.ts",
          "domain": "other",
          "layer": "utils",
          "size": 6261,
          "lines": 287,
          "complexity": 6,
          "dependencies": [
            "express",
            "zod"
          ],
          "exports": [
            "ErrorResponse",
            "SuccessResponse",
            "ApiResponse",
            "ResponseError",
            "formatErrorResponse",
            "formatSuccessResponse",
            "handleValidationError",
            "createErrorHandler",
            "asyncHandler",
            "requirePermission",
            "requireResource",
            "checkRateLimit",
            "createPaginationMeta",
            "controllerMethod",
            "healthResponse"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.2
        },
        {
          "path": "server/src/core/services/rate-limit.service.ts",
          "domain": "other",
          "layer": "services",
          "size": 6887,
          "lines": 301,
          "complexity": 6,
          "dependencies": [
            "ioredis",
            "express-rate-limit",
            "rate-limit-redis",
            "express"
          ],
          "exports": [
            "rateLimiters",
            "createCustomRateLimiter",
            "bypassRateLimit",
            "redisClient "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9000000000000001
        },
        {
          "path": "server/src/core/repository/repository-factory.ts",
          "domain": "other",
          "layer": "other",
          "size": 6046,
          "lines": 205,
          "complexity": 3,
          "dependencies": [],
          "exports": [
            "RepositoryFactory",
            "repositoryFactory",
            "getUserRepository",
            "getTransactionRepository",
            "getForumRepository",
            "getThreadRepository",
            "getPostRepository",
            "getXPRepository"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "IRepositoryFactory",
              "IUserRepository",
              "IForumRepository",
              "IThreadRepository",
              "IPostRepository",
              "ITransactionRepository",
              "IXPRepository",
              "RepositoryConfig"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 2.1
        },
        {
          "path": "server/src/core/repository/interfaces.ts",
          "domain": "other",
          "layer": "other",
          "size": 6623,
          "lines": 184,
          "complexity": 1,
          "dependencies": [
            "@schema",
            "@/db/types"
          ],
          "exports": [
            "IBaseRepository",
            "IUserRepository",
            "IForumRepository",
            "IThreadRepository",
            "IPostRepository",
            "ITransactionRepository",
            "IXPRepository",
            "IRepositoryFactory",
            "IRepositoryContext",
            "ITransactionContext",
            "RepositoryConfig",
            "RepositoryErrorContext",
            "RepositoryErrorCode",
            "QueryBuilder",
            "IRepositoryCache",
            "IRepositoryMonitor",
            "RepositoryStats"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 14,
              "context": "findById(id: number | string): Promise<T | null>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 18,
              "context": "update(id: number | string, data: Partial<T>): Promise<T>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 19,
              "context": "delete(id: number | string): Promise<void>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 20,
              "context": "exists(id: number | string): Promise<boolean>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 29,
              "context": "updateLastLogin(id: number): Promise<void>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 30,
              "context": "incrementXP(id: number, amount: number): Promise<User>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 52,
              "context": "incrementViewCount(id: number): Promise<void>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 53,
              "context": "updatePostCount(id: number): Promise<void>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 54,
              "context": "markAsSolved(id: number, solvingPostId?: number): Promise<Thread>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 62,
              "context": "incrementLikeCount(id: number): Promise<void>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 63,
              "context": "decrementLikeCount(id: number): Promise<void>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 64,
              "context": "updateTipCount(id: number, amount: number): Promise<void>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 69,
              "context": "findByUserId(userId: number, options?: QueryOptions): Promise<PaginatedResult<Transaction>>;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 72,
              "context": "getTotalByUser(userId: number, type?: string): Promise<number>;",
              "suggestedFix": "UserId",
              "confidence": 1
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 73,
              "context": "getBalanceByUser(userId: number): Promise<number>;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 78,
              "context": "findByUserId(userId: number): Promise<any>;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 79,
              "context": "awardXP(userId: number, amount: number, reason: string): Promise<any>;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 81,
              "context": "getUserRank(userId: number): Promise<number>;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 59,
              "context": "findByThreadId(threadId: number, options?: QueryOptions): Promise<PaginatedResult<Post>>;",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "User",
              "ForumCategory",
              "Thread",
              "Post",
              "Transaction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 3.1
        },
        {
          "path": "server/src/core/repository/index.ts",
          "domain": "other",
          "layer": "other",
          "size": 2024,
          "lines": 82,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "REPOSITORY_VERSION",
            "REPOSITORY_BUILD_DATE",
            "REPOSITORY_STATUS",
            "createRepositoryFactory",
            "isRepositoryError",
            "BaseRepository",
            "RepositoryError",
            "UserRepository ",
            "TransactionRepository ",
            "RepositoryFactory",
            "repositoryFactory",
            "getUserRepository",
            "getTransactionRepository",
            "getForumRepository",
            "getThreadRepository",
            "getPostRepository",
            "getXPRepository"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.5
        },
        {
          "path": "server/src/core/repository/base-repository.ts",
          "domain": "other",
          "layer": "other",
          "size": 9773,
          "lines": 395,
          "complexity": 7,
          "dependencies": [
            "@db",
            "drizzle-orm",
            "drizzle-orm/pg-core"
          ],
          "exports": [
            "PaginationOptions",
            "SortOptions",
            "FilterOptions",
            "QueryOptions",
            "PaginatedResult",
            "RepositoryTransaction",
            "RepositoryError"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 69,
              "context": "async findById(id: number | string): Promise<T | null> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 201,
              "context": "async update(id: number | string, data: Partial<T>): Promise<T> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 233,
              "context": "async delete(id: number | string): Promise<void> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 251,
              "context": "async exists(id: number | string): Promise<boolean> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "AnyPgColumn",
              "AnyPgTable"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 4.500000000000001
        },
        {
          "path": "server/src/core/monitoring/query-performance.ts",
          "domain": "other",
          "layer": "other",
          "size": 5879,
          "lines": 248,
          "complexity": 3,
          "dependencies": [],
          "exports": [
            "QueryMetrics",
            "PerformanceStats",
            "queryMonitor",
            "createQueryMonitoringMiddleware"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 2.1
        },
        {
          "path": "server/src/core/monitoring/health-check.ts",
          "domain": "other",
          "layer": "other",
          "size": 9023,
          "lines": 352,
          "complexity": 4,
          "dependencies": [
            "express",
            "express",
            "@db",
            "drizzle-orm",
            "os"
          ],
          "exports": [
            "HealthStatus",
            "ServiceHealth",
            "SystemMetrics",
            "requestMetricsMiddleware",
            "healthMonitor "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 2.3
        },
        {
          "path": "server/src/core/config/environment.ts",
          "domain": "other",
          "layer": "other",
          "size": 5695,
          "lines": 199,
          "complexity": 2,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "EnvironmentConfig",
            "env",
            "isProduction",
            "isDevelopment",
            "isTest",
            "getDatabaseConfig",
            "getSessionConfig",
            "getCorsConfig",
            "getRateLimitConfig"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "server/src/core/audit/audit-logger.ts",
          "domain": "other",
          "layer": "other",
          "size": 13024,
          "lines": 537,
          "complexity": 6,
          "dependencies": [
            "fs/promises",
            "path"
          ],
          "exports": [
            "AuditEventType",
            "AuditSeverity",
            "AuditEvent",
            "auditLogger",
            "auditMiddleware"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 157,
              "context": "userId: number | undefined,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 189,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 219,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 274,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 3.1
        },
        {
          "path": "client/src/types/compat/brand.ts",
          "domain": "other",
          "layer": "types",
          "size": 576,
          "lines": 23,
          "complexity": 0,
          "dependencies": [
            "@/config/brand.config"
          ],
          "exports": [
            "RuntimeBrandConfig",
            "BrandConfigUpdate"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "BrandConfig"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/types/compat/avatar.ts",
          "domain": "other",
          "layer": "types",
          "size": 365,
          "lines": 14,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "AvatarFrame"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 5,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.1
        },
        {
          "path": "client/src/test/utils/renderWithProviders.tsx",
          "domain": "other",
          "layer": "utils",
          "size": 936,
          "lines": 30,
          "complexity": 1,
          "dependencies": [
            "react",
            "@testing-library/react",
            "@/providers/root-provider"
          ],
          "exports": [
            "renderWithProviders"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/pages/zones/index.tsx",
          "domain": "other",
          "layer": "pages",
          "size": 4511,
          "lines": 130,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/footer",
            "@/components/forum/CanonicalZoneGrid",
            "@/features/forum/components/HierarchicalZoneNav",
            "@/contexts/ForumStructureContext",
            "@/contexts/ForumStructureContext",
            "@/components/ui/loader",
            "@/components/ui/error-display",
            "lucide-react",
            "@/components/forum/ZoneCard",
            "@/components/forum/ForumErrorBoundary"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "MergedZone"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/pages/zones/[slug].tsx",
          "domain": "other",
          "layer": "pages",
          "size": 9876,
          "lines": 305,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "@/contexts/ForumStructureContext",
            "@/contexts/ForumStructureContext",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/skeleton",
            "@/features/forum/components/ForumListItem",
            "@/layout/primitives/Wide",
            "@/components/navigation/ForumBreadcrumbs",
            "@/utils/spacing-constants"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "MergedForum"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/pages/ui-playground/demo-data.ts",
          "domain": "other",
          "layer": "pages",
          "size": 3561,
          "lines": 104,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "usernameTiers",
            "userTitles",
            "avatarFrameRarities",
            "cryptoIcons",
            "sampleAnnouncements",
            "navSections"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/pages/tags/[tagSlug].tsx",
          "domain": "other",
          "layer": "pages",
          "size": 5737,
          "lines": 170,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "@/components/forum/ThreadCard",
            "@/features/forum/hooks/useForumQueries",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/components/header",
            "@/components/footer",
            "@/components/ui/button",
            "@/components/ui/card",
            "@/components/ui/separator",
            "@/components/ui/badge",
            "lucide-react",
            "@/components/ui/skeleton",
            "@/components/ui/pagination",
            "@/types/thread.types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "ThreadDisplay",
              "ThreadsApiResponse"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "client/src/pages/search/index.tsx",
          "domain": "other",
          "layer": "pages",
          "size": 162,
          "lines": 6,
          "complexity": 0,
          "dependencies": [
            "react"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/pages/referrals/index.tsx",
          "domain": "other",
          "layer": "pages",
          "size": 12745,
          "lines": 409,
          "complexity": 2,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/layout/primitives/Wide",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/label",
            "@/components/ui/badge",
            "@/components/ui/skeleton",
            "@/components/ui/alert",
            "@/hooks/use-auth.tsx",
            "@/components/auth/protected-route",
            "lucide-react",
            "sonner"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/pages/preferences/index.tsx",
          "domain": "other",
          "layer": "pages",
          "size": 6169,
          "lines": 187,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/hooks/useSearchParams",
            "@/components/header",
            "@/components/footer",
            "@/hooks/use-auth.tsx",
            "@/components/ui/tabs",
            "@/components/ui/card",
            "@/components/preferences/profile-preferences",
            "@/components/preferences/account-preferences",
            "@/components/preferences/notification-preferences",
            "@/components/preferences/display-preferences",
            "@/components/preferences/session-preferences",
            "@/components/preferences/referral-preferences",
            "@/components/preferences/social-preferences",
            "lucide-react",
            "@/components/auth/protected-route",
            "@/components/ui/container"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/pages/invite/[code].tsx",
          "domain": "other",
          "layer": "pages",
          "size": 8312,
          "lines": 291,
          "complexity": 2,
          "dependencies": [
            "react",
            "wouter",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/layout/primitives/Wide",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/alert",
            "@/hooks/use-auth.tsx",
            "lucide-react",
            "sonner"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/pages/dictionary/index.tsx",
          "domain": "other",
          "layer": "pages",
          "size": 2252,
          "lines": 68,
          "complexity": 1,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "wouter",
            "@/lib/queryClient",
            "@/components/ui/button",
            "@/components/ui/card",
            "@/components/ui/loader",
            "@/components/ui/error-display",
            "@/features/dictionary/components/AddWordModal",
            "@/components/ui/tooltip"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 13,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.8
        },
        {
          "path": "client/src/pages/dictionary/[slug].tsx",
          "domain": "other",
          "layer": "pages",
          "size": 2475,
          "lines": 80,
          "complexity": 2,
          "dependencies": [
            "react",
            "wouter",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/components/ui/loader",
            "@/components/ui/error-display",
            "@/components/ui/button",
            "@/components/ui/tooltip",
            "@/features/dictionary/services/dictionaryApi"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 12,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 34,
              "context": "const upvoteMutation = useMutation((id: number) => dictionaryApi.upvote(id), {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 4.1
        },
        {
          "path": "client/src/pages/dev/index.ts",
          "domain": "other",
          "layer": "pages",
          "size": 80,
          "lines": 2,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "DevPlaygroundLayout",
            "PlaygroundSection"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/pages/dev/DevPlaygroundLayout.tsx",
          "domain": "other",
          "layer": "pages",
          "size": 2975,
          "lines": 97,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/lib/utils",
            "@/stores/usePlaygroundControls"
          ],
          "exports": [
            "DevPlaygroundLayout",
            "PlaygroundSection"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.8999999999999999
        },
        {
          "path": "client/src/pages/dev/DemoCard.tsx",
          "domain": "other",
          "layer": "pages",
          "size": 1136,
          "lines": 39,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/stores/usePlaygroundControls"
          ],
          "exports": [
            "DemoCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/pages/dev/ControlsDrawer.tsx",
          "domain": "other",
          "layer": "pages",
          "size": 1909,
          "lines": 57,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/stores/usePlaygroundControls",
            "lucide-react",
            "@/components/ui/input",
            "@/components/ui/button"
          ],
          "exports": [
            "ControlsDrawer"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.5
        },
        {
          "path": "client/src/pages/announcements/index.tsx",
          "domain": "other",
          "layer": "pages",
          "size": 176,
          "lines": 6,
          "complexity": 0,
          "dependencies": [
            "react"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/lib/utils/generateSlug.ts",
          "domain": "other",
          "layer": "utils",
          "size": 175,
          "lines": 9,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "generateSlug"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/lib/utils/category.ts",
          "domain": "other",
          "layer": "utils",
          "size": 1431,
          "lines": 27,
          "complexity": 2,
          "dependencies": [],
          "exports": [
            "getCategoryIcon",
            "getCategoryColor"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/lib/utils/applyPluginRewards.ts",
          "domain": "other",
          "layer": "utils",
          "size": 4473,
          "lines": 163,
          "complexity": 3,
          "dependencies": [
            "@/types/inventory"
          ],
          "exports": [
            "applyPluginRewards",
            "hasSystemRole",
            "getSystemRoleColor",
            "PluginReward",
            "SYSTEM_ROLE_COLORS "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "UserInventoryWithProduct"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 1.3
        },
        {
          "path": "client/src/lib/utils/api-helpers.ts",
          "domain": "other",
          "layer": "utils",
          "size": 952,
          "lines": 26,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "ensureArray",
            "ensureValue"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "client/src/lib/utils/animateNumber.ts",
          "domain": "other",
          "layer": "utils",
          "size": 3346,
          "lines": 124,
          "complexity": 3,
          "dependencies": [
            "react",
            "@db/types"
          ],
          "exports": [
            "animateNumber",
            "useAnimatedNumber"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "AnimationFrameId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 2.1
        },
        {
          "path": "client/src/layout/primitives/index.ts",
          "domain": "other",
          "layer": "other",
          "size": 260,
          "lines": 7,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "Wide ",
            "Prose ",
            "FullBleedSection ",
            "ClampPadding ",
            "StickyRegion ",
            "PageBackdrop "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/layout/primitives/Wide.tsx",
          "domain": "other",
          "layer": "other",
          "size": 583,
          "lines": 20,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/lib/utils"
          ],
          "exports": [
            "Wide"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/layout/primitives/StickyRegion.tsx",
          "domain": "other",
          "layer": "other",
          "size": 419,
          "lines": 20,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/lib/utils"
          ],
          "exports": [
            "StickyRegion"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/layout/primitives/Prose.tsx",
          "domain": "other",
          "layer": "other",
          "size": 524,
          "lines": 25,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/lib/utils"
          ],
          "exports": [
            "Prose"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/layout/primitives/PageBackdrop.tsx",
          "domain": "other",
          "layer": "other",
          "size": 509,
          "lines": 18,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/lib/utils"
          ],
          "exports": [
            "PageBackdrop"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/layout/primitives/FullBleedSection.tsx",
          "domain": "other",
          "layer": "other",
          "size": 1061,
          "lines": 38,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/lib/utils"
          ],
          "exports": [
            "FullBleedSection"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/layout/primitives/ClampPadding.tsx",
          "domain": "other",
          "layer": "other",
          "size": 628,
          "lines": 31,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/lib/utils"
          ],
          "exports": [
            "ClampPadding"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/hooks/__tests__/useMediaQuery.test.tsx",
          "domain": "other",
          "layer": "hooks",
          "size": 8083,
          "lines": 284,
          "complexity": 2,
          "dependencies": [
            "@testing-library/react",
            "vitest"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/components/social/WhaleWatchDisplay.tsx",
          "domain": "other",
          "layer": "components",
          "size": 11596,
          "lines": 374,
          "complexity": 2,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/components/ui/card",
            "@/components/ui/badge",
            "@/components/ui/button",
            "@/components/ui/avatar",
            "@/components/ui/tabs",
            "@/components/ui/scroll-area",
            "@/components/ui/skeleton",
            "wouter",
            "date-fns",
            "@/lib/utils"
          ],
          "exports": [
            "WhaleWatchDisplay"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/social/WhaleWatchDashboard.tsx",
          "domain": "other",
          "layer": "components",
          "size": 17294,
          "lines": 567,
          "complexity": 3,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/badge",
            "@/components/ui/avatar",
            "@/components/ui/tabs",
            "@/components/ui/scroll-area",
            "@/components/ui/skeleton",
            "date-fns",
            "wouter",
            "@/lib/utils",
            "@/hooks/use-toast"
          ],
          "exports": [
            "WhaleWatchDashboard"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 43,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 3.4000000000000004
        },
        {
          "path": "client/src/components/social/FollowingList.tsx",
          "domain": "other",
          "layer": "components",
          "size": 2183,
          "lines": 67,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/hooks/useFollowing",
            "@/components/ui/avatar",
            "@/components/ui/skeleton",
            "@/components/ui/badge",
            "wouter",
            "@/lib/utils"
          ],
          "exports": [
            "FollowingList"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/social/FollowButton.tsx",
          "domain": "other",
          "layer": "components",
          "size": 4613,
          "lines": 186,
          "complexity": 2,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/components/ui/button",
            "lucide-react",
            "@/hooks/use-toast",
            "@/hooks/use-auth",
            "@/lib/utils"
          ],
          "exports": [
            "FollowButton"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/components/ui/widget-skeleton.tsx",
          "domain": "other",
          "layer": "components",
          "size": 374,
          "lines": 15,
          "complexity": 0,
          "dependencies": [
            "react"
          ],
          "exports": [
            "WidgetSkeleton"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/toggle.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1457,
          "lines": 42,
          "complexity": 1,
          "dependencies": [
            "react",
            "@radix-ui/react-toggle",
            "class-variance-authority",
            "@/lib/utils"
          ],
          "exports": [
            "Toggle",
            "toggleVariants"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/ui/toggle-group.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1682,
          "lines": 58,
          "complexity": 1,
          "dependencies": [
            "react",
            "@radix-ui/react-toggle-group",
            "class-variance-authority",
            "@/lib/utils",
            "@/components/ui/toggle"
          ],
          "exports": [
            "ToggleGroup",
            "ToggleGroupItem"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/ui/toaster.tsx",
          "domain": "other",
          "layer": "components",
          "size": 733,
          "lines": 33,
          "complexity": 1,
          "dependencies": [
            "@/hooks/use-toast"
          ],
          "exports": [
            "Toaster"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "client/src/components/ui/toast.tsx",
          "domain": "other",
          "layer": "components",
          "size": 6009,
          "lines": 178,
          "complexity": 1,
          "dependencies": [
            "react",
            "@radix-ui/react-toast",
            "class-variance-authority",
            "lucide-react",
            "@/lib/utils"
          ],
          "exports": [
            "type ToastProps",
            "type ToastActionElement",
            "ToastProvider",
            "ToastViewport",
            "Toast",
            "ToastTitle",
            "ToastDescription",
            "ToastClose",
            "ToastAction"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/ui/textarea.tsx",
          "domain": "other",
          "layer": "components",
          "size": 2872,
          "lines": 95,
          "complexity": 1,
          "dependencies": [
            "react",
            "class-variance-authority",
            "@/lib/utils",
            "lucide-react"
          ],
          "exports": [
            "TextareaProps",
            "Textarea",
            "textareaVariants"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/ui/tabs.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1840,
          "lines": 54,
          "complexity": 0,
          "dependencies": [
            "react",
            "@radix-ui/react-tabs",
            "@/lib/utils"
          ],
          "exports": [
            "Tabs",
            "TabsList",
            "TabsTrigger",
            "TabsContent"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/table.tsx",
          "domain": "other",
          "layer": "components",
          "size": 2670,
          "lines": 96,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/lib/utils"
          ],
          "exports": [
            "Table",
            "TableHeader",
            "TableBody",
            "TableFooter",
            "TableHead",
            "TableRow",
            "TableCell",
            "TableCaption"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/tab-switcher.tsx",
          "domain": "other",
          "layer": "components",
          "size": 6048,
          "lines": 196,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/lib/utils",
            "lucide-react",
            "lucide-react",
            "@/hooks/use-content"
          ],
          "exports": [
            "TabConfig",
            "TabSwitcherProps",
            "TabSwitcher"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "LucideIcon"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/ui/switch.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1112,
          "lines": 28,
          "complexity": 0,
          "dependencies": [
            "react",
            "@radix-ui/react-switch",
            "@/lib/utils"
          ],
          "exports": [
            "Switch "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/stat-chip.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1766,
          "lines": 67,
          "complexity": 1,
          "dependencies": [
            "react",
            "lucide-react",
            "@/lib/utils/animateNumber",
            "react"
          ],
          "exports": [
            "StatChipProps",
            "StatChip"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "LucideProps"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/ui/slider.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1045,
          "lines": 24,
          "complexity": 0,
          "dependencies": [
            "react",
            "@radix-ui/react-slider",
            "@/lib/utils"
          ],
          "exports": [
            "Slider "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/skeleton.tsx",
          "domain": "other",
          "layer": "components",
          "size": 268,
          "lines": 9,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/lib/utils"
          ],
          "exports": [
            "Skeleton "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/sidebar.tsx",
          "domain": "other",
          "layer": "components",
          "size": 22061,
          "lines": 745,
          "complexity": 2,
          "dependencies": [
            "react",
            "@radix-ui/react-slot",
            "class-variance-authority",
            "lucide-react",
            "@/hooks/use-mobile",
            "@/lib/utils",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/separator",
            "@/components/ui/skeleton",
            "@/components/ui/tooltip"
          ],
          "exports": [
            "Sidebar",
            "SidebarContent",
            "SidebarFooter",
            "SidebarGroup",
            "SidebarGroupAction",
            "SidebarGroupContent",
            "SidebarGroupLabel",
            "SidebarHeader",
            "SidebarInput",
            "SidebarInset",
            "SidebarMenu",
            "SidebarMenuAction",
            "SidebarMenuBadge",
            "SidebarMenuButton",
            "SidebarMenuItem",
            "SidebarMenuSkeleton",
            "SidebarMenuSub",
            "SidebarMenuSubButton",
            "SidebarMenuSubItem",
            "SidebarProvider"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/ui/sheet.tsx",
          "domain": "other",
          "layer": "components",
          "size": 4092,
          "lines": 122,
          "complexity": 1,
          "dependencies": [
            "react",
            "@radix-ui/react-dialog",
            "class-variance-authority",
            "lucide-react",
            "@/lib/utils"
          ],
          "exports": [
            "Sheet",
            "SheetPortal",
            "SheetOverlay",
            "SheetTrigger",
            "SheetClose",
            "SheetContent",
            "SheetHeader",
            "SheetFooter",
            "SheetTitle",
            "SheetDescription"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/ui/separator.tsx",
          "domain": "other",
          "layer": "components",
          "size": 699,
          "lines": 25,
          "complexity": 0,
          "dependencies": [
            "react",
            "@radix-ui/react-separator",
            "@/lib/utils"
          ],
          "exports": [
            "Separator "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/seo-head.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1546,
          "lines": 52,
          "complexity": 1,
          "dependencies": [
            "react",
            "react-helmet"
          ],
          "exports": [
            "SeoHead"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/ui/select.tsx",
          "domain": "other",
          "layer": "components",
          "size": 5522,
          "lines": 154,
          "complexity": 0,
          "dependencies": [
            "react",
            "@radix-ui/react-select",
            "lucide-react",
            "@/lib/utils"
          ],
          "exports": [
            "Select",
            "SelectGroup",
            "SelectValue",
            "SelectTrigger",
            "SelectContent",
            "SelectLabel",
            "SelectItem",
            "SelectSeparator",
            "SelectScrollUpButton",
            "SelectScrollDownButton"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/scroll-area.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1583,
          "lines": 45,
          "complexity": 0,
          "dependencies": [
            "react",
            "@radix-ui/react-scroll-area",
            "@/lib/utils"
          ],
          "exports": [
            "ScrollArea",
            "ScrollBar"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/safe-image.tsx",
          "domain": "other",
          "layer": "components",
          "size": 438,
          "lines": 19,
          "complexity": 0,
          "dependencies": [
            "react"
          ],
          "exports": [
            "SafeImage"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/resizable.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1673,
          "lines": 43,
          "complexity": 0,
          "dependencies": [
            "lucide-react",
            "react-resizable-panels",
            "@/lib/utils"
          ],
          "exports": [
            "ResizablePanelGroup",
            "ResizablePanel",
            "ResizableHandle"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/radio-group.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1403,
          "lines": 37,
          "complexity": 0,
          "dependencies": [
            "react",
            "@radix-ui/react-radio-group",
            "lucide-react",
            "@/lib/utils"
          ],
          "exports": [
            "RadioGroup",
            "RadioGroupItem"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/progress.tsx",
          "domain": "other",
          "layer": "components",
          "size": 746,
          "lines": 24,
          "complexity": 0,
          "dependencies": [
            "react",
            "@radix-ui/react-progress",
            "@/lib/utils"
          ],
          "exports": [
            "Progress "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/popover.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1254,
          "lines": 30,
          "complexity": 0,
          "dependencies": [
            "react",
            "@radix-ui/react-popover",
            "@/lib/utils"
          ],
          "exports": [
            "Popover",
            "PopoverTrigger",
            "PopoverContent"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/pagination.tsx",
          "domain": "other",
          "layer": "components",
          "size": 7414,
          "lines": 269,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "@/lib/utils"
          ],
          "exports": [
            "Pagination",
            "PaginationContent",
            "PaginationItem",
            "PaginationLink",
            "PaginationPrevious",
            "PaginationNext",
            "PaginationEllipsis"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/ui/navigation-menu.tsx",
          "domain": "other",
          "layer": "components",
          "size": 4983,
          "lines": 121,
          "complexity": 0,
          "dependencies": [
            "react",
            "@radix-ui/react-navigation-menu",
            "class-variance-authority",
            "lucide-react",
            "@/lib/utils"
          ],
          "exports": [
            "navigationMenuTriggerStyle",
            "NavigationMenu",
            "NavigationMenuList",
            "NavigationMenuItem",
            "NavigationMenuContent",
            "NavigationMenuTrigger",
            "NavigationMenuLink",
            "NavigationMenuIndicator",
            "NavigationMenuViewport"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/menubar.tsx",
          "domain": "other",
          "layer": "components",
          "size": 8263,
          "lines": 232,
          "complexity": 1,
          "dependencies": [
            "react",
            "@radix-ui/react-menubar",
            "lucide-react",
            "@/lib/utils"
          ],
          "exports": [
            "Menubar",
            "MenubarMenu",
            "MenubarTrigger",
            "MenubarContent",
            "MenubarItem",
            "MenubarSeparator",
            "MenubarLabel",
            "MenubarCheckboxItem",
            "MenubarRadioGroup",
            "MenubarRadioItem",
            "MenubarPortal",
            "MenubarSubContent",
            "MenubarSubTrigger",
            "MenubarGroup",
            "MenubarSub",
            "MenubarShortcut"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/ui/menu.tsx",
          "domain": "other",
          "layer": "components",
          "size": 6672,
          "lines": 186,
          "complexity": 0,
          "dependencies": [
            "react",
            "@radix-ui/react-dropdown-menu",
            "lucide-react",
            "@/lib/utils"
          ],
          "exports": [
            "Menu",
            "MenuTrigger",
            "MenuContent",
            "MenuItem",
            "MenuCheckboxItem",
            "MenuRadioItem",
            "MenuLabel",
            "MenuSeparator",
            "MenuShortcut",
            "MenuGroup",
            "MenuPortal",
            "MenuSub",
            "MenuSubContent",
            "MenuSubTrigger",
            "MenuRadioGroup"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/loader.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1063,
          "lines": 46,
          "complexity": 1,
          "dependencies": [
            "react",
            "lucide-react",
            "@/lib/utils"
          ],
          "exports": [
            "LoadingSpinner"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/ui/label.tsx",
          "domain": "other",
          "layer": "components",
          "size": 696,
          "lines": 20,
          "complexity": 0,
          "dependencies": [
            "react",
            "@radix-ui/react-label",
            "class-variance-authority",
            "@/lib/utils"
          ],
          "exports": [
            "Label "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/input.tsx",
          "domain": "other",
          "layer": "components",
          "size": 3059,
          "lines": 98,
          "complexity": 1,
          "dependencies": [
            "react",
            "class-variance-authority",
            "@/lib/utils",
            "lucide-react"
          ],
          "exports": [
            "InputProps",
            "Input",
            "inputVariants"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/ui/input-otp.tsx",
          "domain": "other",
          "layer": "components",
          "size": 2083,
          "lines": 70,
          "complexity": 0,
          "dependencies": [
            "react",
            "input-otp",
            "lucide-react",
            "@/lib/utils"
          ],
          "exports": [
            "InputOTP",
            "InputOTPGroup",
            "InputOTPSlot",
            "InputOTPSeparator"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/index.ts",
          "domain": "other",
          "layer": "components",
          "size": 644,
          "lines": 25,
          "complexity": 0,
          "dependencies": [],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/hover-card.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1238,
          "lines": 30,
          "complexity": 0,
          "dependencies": [
            "react",
            "@radix-ui/react-hover-card",
            "@/lib/utils"
          ],
          "exports": [
            "HoverCard",
            "HoverCardTrigger",
            "HoverCardContent"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/hamburger.tsx",
          "domain": "other",
          "layer": "components",
          "size": 579,
          "lines": 23,
          "complexity": 0,
          "dependencies": [
            "react"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/frost-card.tsx",
          "domain": "other",
          "layer": "components",
          "size": 914,
          "lines": 32,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/components/ui/card",
            "@/lib/utils"
          ],
          "exports": [
            "FrostCardProps",
            "FrostCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/form.tsx",
          "domain": "other",
          "layer": "components",
          "size": 3964,
          "lines": 170,
          "complexity": 1,
          "dependencies": [
            "react",
            "@radix-ui/react-label",
            "@radix-ui/react-slot",
            "@/lib/utils",
            "@/components/ui/label"
          ],
          "exports": [
            "useFormField",
            "Form",
            "FormItem",
            "FormLabel",
            "FormControl",
            "FormDescription",
            "FormMessage",
            "FormField"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/ui/file-drop-zone.tsx",
          "domain": "other",
          "layer": "components",
          "size": 6296,
          "lines": 192,
          "complexity": 3,
          "dependencies": [
            "react",
            "react-dropzone",
            "@/lib/utils",
            "lucide-react"
          ],
          "exports": [
            "FileDropZoneProps",
            "FileDropZone"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.1
        },
        {
          "path": "client/src/components/ui/feature-gate.tsx",
          "domain": "other",
          "layer": "components",
          "size": 4479,
          "lines": 141,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/hooks/useFeatureGates",
            "lucide-react",
            "@/components/ui/button",
            "wouter",
            "framer-motion",
            "react"
          ],
          "exports": [
            "FeatureGate"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/ui/error-display.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1399,
          "lines": 51,
          "complexity": 1,
          "dependencies": [
            "lucide-react",
            "@/components/ui/alert",
            "@/components/ui/button",
            "@/lib/utils"
          ],
          "exports": [
            "ErrorDisplay"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/ui/enhanced-loading-states.tsx",
          "domain": "other",
          "layer": "components",
          "size": 11776,
          "lines": 412,
          "complexity": 1,
          "dependencies": [
            "react",
            "framer-motion",
            "lucide-react",
            "@/lib/utils"
          ],
          "exports": [
            "EnhancedSpinner",
            "ThreadCardSkeleton",
            "ThreadListSkeleton",
            "LoadingOverlay",
            "SmartLoadingState",
            "ProgressIndicator"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/ui/enhanced-button.tsx",
          "domain": "other",
          "layer": "components",
          "size": 6628,
          "lines": 217,
          "complexity": 2,
          "dependencies": [
            "react",
            "framer-motion",
            "@radix-ui/react-slot",
            "class-variance-authority",
            "@/lib/utils",
            "@/hooks/useMediaQuery"
          ],
          "exports": [
            "EnhancedButtonProps",
            "EnhancedButton",
            "buttonVariants"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 86,
              "context": "const [ripples, setRipples] = React.useState<Array<{ id: number; x: number; y: number }>>([]);",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 3
        },
        {
          "path": "client/src/components/ui/dropdown-menu.tsx",
          "domain": "other",
          "layer": "components",
          "size": 7375,
          "lines": 186,
          "complexity": 0,
          "dependencies": [
            "react",
            "@radix-ui/react-dropdown-menu",
            "lucide-react",
            "@/lib/utils"
          ],
          "exports": [
            "DropdownMenu",
            "DropdownMenuTrigger",
            "DropdownMenuContent",
            "DropdownMenuItem",
            "DropdownMenuCheckboxItem",
            "DropdownMenuRadioItem",
            "DropdownMenuLabel",
            "DropdownMenuSeparator",
            "DropdownMenuShortcut",
            "DropdownMenuGroup",
            "DropdownMenuPortal",
            "DropdownMenuSub",
            "DropdownMenuSubContent",
            "DropdownMenuSubTrigger",
            "DropdownMenuRadioGroup"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/drawer.tsx",
          "domain": "other",
          "layer": "components",
          "size": 2903,
          "lines": 101,
          "complexity": 0,
          "dependencies": [
            "react",
            "vaul",
            "@/lib/utils"
          ],
          "exports": [
            "Drawer",
            "DrawerPortal",
            "DrawerOverlay",
            "DrawerTrigger",
            "DrawerClose",
            "DrawerContent",
            "DrawerHeader",
            "DrawerFooter",
            "DrawerTitle",
            "DrawerDescription"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/dialog.tsx",
          "domain": "other",
          "layer": "components",
          "size": 3821,
          "lines": 105,
          "complexity": 0,
          "dependencies": [
            "react",
            "@radix-ui/react-dialog",
            "lucide-react",
            "@/lib/utils"
          ],
          "exports": [
            "Dialog",
            "DialogPortal",
            "DialogOverlay",
            "DialogClose",
            "DialogTrigger",
            "DialogContent",
            "DialogHeader",
            "DialogFooter",
            "DialogTitle",
            "DialogDescription"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/context-menu.tsx",
          "domain": "other",
          "layer": "components",
          "size": 7185,
          "lines": 188,
          "complexity": 0,
          "dependencies": [
            "react",
            "@radix-ui/react-context-menu",
            "lucide-react",
            "@/lib/utils"
          ],
          "exports": [
            "ContextMenu",
            "ContextMenuTrigger",
            "ContextMenuContent",
            "ContextMenuItem",
            "ContextMenuCheckboxItem",
            "ContextMenuRadioItem",
            "ContextMenuLabel",
            "ContextMenuSeparator",
            "ContextMenuShortcut",
            "ContextMenuGroup",
            "ContextMenuPortal",
            "ContextMenuSub",
            "ContextMenuSubContent",
            "ContextMenuSubTrigger",
            "ContextMenuRadioGroup"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/content-feed.tsx",
          "domain": "other",
          "layer": "components",
          "size": 11171,
          "lines": 351,
          "complexity": 2,
          "dependencies": [
            "react",
            "wouter",
            "@/lib/utils",
            "date-fns",
            "@/components/ui/badge",
            "@/components/ui/avatar",
            "@/components/ui/skeleton",
            "@/hooks/use-content"
          ],
          "exports": [
            "ContentFeedProps",
            "ContentFeed"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ContentItem"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/ui/content-area.tsx",
          "domain": "other",
          "layer": "components",
          "size": 11129,
          "lines": 357,
          "complexity": 3,
          "dependencies": [
            "react",
            "@/lib/utils",
            "@/components/ui/card",
            "@/components/ui/tab-switcher",
            "@/components/ui/content-feed",
            "@/hooks/use-auth",
            "@/contexts/content-feed-context",
            "lucide-react",
            "@/hooks/use-content",
            "@/hooks/use-content",
            "@db/types"
          ],
          "exports": [
            "ContentAreaProps",
            "ContentArea",
            "HomeContentArea",
            "ForumContentArea"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ContentTab",
              "UseContentParams"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 1.1
        },
        {
          "path": "client/src/components/ui/command.tsx",
          "domain": "other",
          "layer": "components",
          "size": 4715,
          "lines": 142,
          "complexity": 0,
          "dependencies": [
            "react",
            "@radix-ui/react-dialog",
            "cmdk",
            "lucide-react",
            "@/lib/utils",
            "@/components/ui/dialog"
          ],
          "exports": [
            "Command",
            "CommandDialog",
            "CommandInput",
            "CommandList",
            "CommandEmpty",
            "CommandGroup",
            "CommandItem",
            "CommandShortcut",
            "CommandSeparator"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/collapsible.tsx",
          "domain": "other",
          "layer": "components",
          "size": 335,
          "lines": 12,
          "complexity": 0,
          "dependencies": [
            "@radix-ui/react-collapsible"
          ],
          "exports": [
            "Collapsible",
            "CollapsibleTrigger",
            "CollapsibleContent"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/checkbox.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1026,
          "lines": 27,
          "complexity": 0,
          "dependencies": [
            "react",
            "@radix-ui/react-checkbox",
            "lucide-react",
            "@/lib/utils"
          ],
          "exports": [
            "Checkbox "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/chart.tsx",
          "domain": "other",
          "layer": "components",
          "size": 9053,
          "lines": 330,
          "complexity": 2,
          "dependencies": [
            "react",
            "recharts",
            "@/lib/utils"
          ],
          "exports": [
            "ChartConfig",
            "ChartContainer",
            "ChartTooltip",
            "ChartTooltipContent",
            "ChartLegend",
            "ChartLegendContent",
            "ChartStyle"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/ui/carousel.tsx",
          "domain": "other",
          "layer": "components",
          "size": 5696,
          "lines": 241,
          "complexity": 1,
          "dependencies": [
            "react",
            "embla-carousel-react",
            "lucide-react",
            "@/lib/utils",
            "@/components/ui/button"
          ],
          "exports": [
            "type CarouselApi",
            "Carousel",
            "CarouselContent",
            "CarouselItem",
            "CarouselPrevious",
            "CarouselNext"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/ui/card.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1748,
          "lines": 57,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/lib/utils"
          ],
          "exports": [
            "Card",
            "CardHeader",
            "CardFooter",
            "CardTitle",
            "CardDescription",
            "CardContent"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/candlestick-menu.tsx",
          "domain": "other",
          "layer": "components",
          "size": 3196,
          "lines": 117,
          "complexity": 1,
          "dependencies": [
            "react"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/components/ui/calendar.tsx",
          "domain": "other",
          "layer": "components",
          "size": 2495,
          "lines": 62,
          "complexity": 1,
          "dependencies": [
            "react",
            "lucide-react",
            "react-day-picker",
            "@/lib/utils",
            "@/components/ui/button"
          ],
          "exports": [
            "CalendarProps",
            "Calendar "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/ui/button.tsx",
          "domain": "other",
          "layer": "components",
          "size": 3609,
          "lines": 124,
          "complexity": 1,
          "dependencies": [
            "react",
            "@radix-ui/react-slot",
            "class-variance-authority",
            "@/lib/utils"
          ],
          "exports": [
            "buttonVariants",
            "ButtonProps",
            "Button "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/ui/breadcrumb.tsx",
          "domain": "other",
          "layer": "components",
          "size": 2629,
          "lines": 102,
          "complexity": 0,
          "dependencies": [
            "react",
            "@radix-ui/react-slot",
            "lucide-react",
            "@/lib/utils"
          ],
          "exports": [
            "Breadcrumb",
            "BreadcrumbList",
            "BreadcrumbItem",
            "BreadcrumbLink",
            "BreadcrumbPage",
            "BreadcrumbSeparator",
            "BreadcrumbEllipsis"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/bookmark-button.tsx",
          "domain": "other",
          "layer": "components",
          "size": 3170,
          "lines": 121,
          "complexity": 2,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "lucide-react",
            "@/lib/utils",
            "@/lib/queryClient",
            "@/hooks/use-auth",
            "@/hooks/use-toast"
          ],
          "exports": [
            "BookmarkButton"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 12,
              "context": "threadId: number;",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1
        },
        {
          "path": "client/src/components/ui/avatar.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1444,
          "lines": 49,
          "complexity": 0,
          "dependencies": [
            "react",
            "@radix-ui/react-avatar",
            "@/lib/utils"
          ],
          "exports": [
            "Avatar",
            "AvatarImage",
            "AvatarFallback"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/aspect-ratio.tsx",
          "domain": "other",
          "layer": "components",
          "size": 143,
          "lines": 6,
          "complexity": 0,
          "dependencies": [
            "@radix-ui/react-aspect-ratio"
          ],
          "exports": [
            "AspectRatio "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/animated-logo.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1100,
          "lines": 43,
          "complexity": 1,
          "dependencies": [
            "react"
          ],
          "exports": [
            "AnimatedLogo"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/ui/alert.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1515,
          "lines": 50,
          "complexity": 1,
          "dependencies": [
            "react",
            "class-variance-authority",
            "@/lib/utils"
          ],
          "exports": [
            "Alert",
            "AlertTitle",
            "AlertDescription"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/ui/alert-dialog.tsx",
          "domain": "other",
          "layer": "components",
          "size": 4250,
          "lines": 116,
          "complexity": 0,
          "dependencies": [
            "react",
            "@radix-ui/react-alert-dialog",
            "@/lib/utils",
            "@/components/ui/button"
          ],
          "exports": [
            "AlertDialog",
            "AlertDialogPortal",
            "AlertDialogOverlay",
            "AlertDialogTrigger",
            "AlertDialogContent",
            "AlertDialogHeader",
            "AlertDialogFooter",
            "AlertDialogTitle",
            "AlertDialogDescription",
            "AlertDialogAction",
            "AlertDialogCancel"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/accordion.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1923,
          "lines": 53,
          "complexity": 0,
          "dependencies": [
            "react",
            "@radix-ui/react-accordion",
            "lucide-react",
            "@/lib/utils"
          ],
          "exports": [
            "Accordion",
            "AccordionItem",
            "AccordionTrigger",
            "AccordionContent"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/accessibility-enhancements.tsx",
          "domain": "other",
          "layer": "components",
          "size": 14714,
          "lines": 529,
          "complexity": 4,
          "dependencies": [
            "react",
            "framer-motion",
            "@/lib/utils",
            "@/hooks/use-local-storage",
            "@/components/ui/button",
            "@/components/ui/switch",
            "@/components/ui/slider",
            "@/components/ui/label"
          ],
          "exports": [
            "useAccessibility",
            "useFocusManagement",
            "SkipNavigation",
            "AccessibilityTrigger",
            "LiveRegion",
            "announce",
            "AccessibilityProvider",
            "FocusTrap"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.3
        },
        {
          "path": "client/src/components/ui/Container.tsx",
          "domain": "other",
          "layer": "components",
          "size": 726,
          "lines": 40,
          "complexity": 0,
          "dependencies": [
            "@/lib/utils",
            "react"
          ],
          "exports": [
            "Container"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/skeletons/ZoneCardSkeleton.tsx",
          "domain": "other",
          "layer": "components",
          "size": 367,
          "lines": 13,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/components/ui/skeleton"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/skeletons/HomePageSkeleton.tsx",
          "domain": "other",
          "layer": "components",
          "size": 516,
          "lines": 21,
          "complexity": 1,
          "dependencies": [
            "react"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/sidebar/related-content-widget.tsx",
          "domain": "other",
          "layer": "components",
          "size": 8525,
          "lines": 311,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/avatar",
            "@/contexts/content-feed-context",
            "@/lib/utils"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/sidebar/navigation-widget.tsx",
          "domain": "other",
          "layer": "components",
          "size": 5458,
          "lines": 203,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/contexts/content-feed-context",
            "@/lib/utils"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/preferences/social-preferences.tsx",
          "domain": "other",
          "layer": "components",
          "size": 16118,
          "lines": 524,
          "complexity": 1,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/switch",
            "@/components/ui/label",
            "@/components/ui/separator",
            "@/components/ui/badge",
            "@/hooks/use-toast"
          ],
          "exports": [
            "SocialPreferences"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/components/preferences/referral-preferences.tsx",
          "domain": "other",
          "layer": "components",
          "size": 5992,
          "lines": 173,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/types/compat/user",
            "@/features/users/hooks/useUserReferrals",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/avatar",
            "@/components/ui/separator",
            "lucide-react",
            "@/components/ui/skeleton",
            "date-fns"
          ],
          "exports": [
            "ReferralPreferences"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "User"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/preferences/display-preferences.tsx",
          "domain": "other",
          "layer": "components",
          "size": 8889,
          "lines": 254,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/types/compat/user",
            "@/components/ui/button",
            "@/components/ui/card",
            "@/components/ui/label",
            "@/components/ui/radio-group",
            "@/components/ui/switch",
            "lucide-react",
            "@/hooks/preferences/useUserSettings",
            "@/hooks/preferences/useUpdateUserSettings"
          ],
          "exports": [
            "DisplayPreferences"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "User"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/components/preferences/account-preferences.tsx",
          "domain": "other",
          "layer": "components",
          "size": 8118,
          "lines": 269,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/types/compat/user",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/switch",
            "@/components/ui/label",
            "@/components/ui/card",
            "@/components/ui/separator",
            "lucide-react",
            "@/components/ui/alert",
            "@/hooks/preferences/useUserSettings"
          ],
          "exports": [
            "AccountPreferences"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "User"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 1.4
        },
        {
          "path": "client/src/components/preferences/PreferencesToggle.tsx",
          "domain": "other",
          "layer": "components",
          "size": 920,
          "lines": 43,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/switch",
            "@/components/ui/label"
          ],
          "exports": [
            "PreferencesToggle"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/preferences/PreferencesTextarea.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1215,
          "lines": 55,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/textarea",
            "@/components/ui/label"
          ],
          "exports": [
            "PreferencesTextarea"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/preferences/PreferencesSelect.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1580,
          "lines": 69,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/label"
          ],
          "exports": [
            "PreferencesSelect"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/preferences/PreferencesInput.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1235,
          "lines": 55,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/input",
            "@/components/ui/label"
          ],
          "exports": [
            "PreferencesInput"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/preferences/PreferencesGroup.tsx",
          "domain": "other",
          "layer": "components",
          "size": 753,
          "lines": 28,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/separator"
          ],
          "exports": [
            "PreferencesGroup"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/preferences/PreferencesCard.tsx",
          "domain": "other",
          "layer": "components",
          "size": 767,
          "lines": 27,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/card"
          ],
          "exports": [
            "PreferencesCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/platform-energy/index.ts",
          "domain": "other",
          "layer": "components",
          "size": 345,
          "lines": 15,
          "complexity": 0,
          "dependencies": [],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/paths/path-progress.tsx",
          "domain": "other",
          "layer": "components",
          "size": 2793,
          "lines": 106,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/components/ui/progress",
            "@shared/path-config",
            "@/lib/utils",
            "lucide-react"
          ],
          "exports": [
            "PathProgress",
            "getPathLevel",
            "getProgressPercentage"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/components/navigation/nav-item.tsx",
          "domain": "other",
          "layer": "components",
          "size": 2495,
          "lines": 106,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "@/lib/utils"
          ],
          "exports": [
            "NavItemProps",
            "NavItem"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/navigation/mobile-nav-bar.tsx",
          "domain": "other",
          "layer": "components",
          "size": 2670,
          "lines": 112,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "@/lib/utils",
            "@/hooks/use-auth.tsx"
          ],
          "exports": [
            "MobileNavBarProps",
            "MobileNavBar"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "NavItemProps"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/media/MediaAsset.tsx",
          "domain": "other",
          "layer": "components",
          "size": 926,
          "lines": 29,
          "complexity": 1,
          "dependencies": [
            "react",
            "@lottiefiles/dotlottie-react",
            "@/features/admin/services/media-api.service"
          ],
          "exports": [
            "MediaAsset"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "MediaType"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/layout/site-layout-wrapper.tsx",
          "domain": "other",
          "layer": "components",
          "size": 573,
          "lines": 20,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/components/header",
            "@/components/footer"
          ],
          "exports": [
            "SiteLayoutWrapper"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/layout/sidebar.tsx",
          "domain": "other",
          "layer": "components",
          "size": 144,
          "lines": 3,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "Sidebar as default",
            "Sidebar"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/layout/hero-section.tsx",
          "domain": "other",
          "layer": "components",
          "size": 5883,
          "lines": 149,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "lucide-react",
            "@/components/ui/button",
            "framer-motion",
            "@/config/ui.config",
            "@/config/ui.config"
          ],
          "exports": [
            "HeroSection"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "HeroQuote"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/layout/announcement-ticker.tsx",
          "domain": "other",
          "layer": "components",
          "size": 7068,
          "lines": 239,
          "complexity": 3,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "axios",
            "wouter"
          ],
          "exports": [
            "AnnouncementTicker"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 20,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.4000000000000004
        },
        {
          "path": "client/src/components/layout/WidgetGallery.tsx",
          "domain": "other",
          "layer": "components",
          "size": 7396,
          "lines": 245,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/config/widgetRegistry",
            "@/stores/useLayoutStore",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/badge",
            "@/components/ui/tabs",
            "@/components/ui/scroll-area",
            "lucide-react",
            "@/lib/utils",
            "uuid"
          ],
          "exports": [
            "WidgetGallery"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/components/layout/SlotRenderer.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1282,
          "lines": 37,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/stores/useLayoutStore"
          ],
          "exports": [
            "SlotRenderer"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/components/layout/SidebarNavigation.tsx",
          "domain": "other",
          "layer": "components",
          "size": 11469,
          "lines": 362,
          "complexity": 3,
          "dependencies": [
            "react",
            "wouter",
            "@/contexts/ForumStructureContext",
            "@/navigation/forumNav",
            "@/hooks/use-local-storage",
            "@/lib/utils",
            "@/components/ui/badge",
            "framer-motion"
          ],
          "exports": [
            "SidebarNavigation"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 2.1
        },
        {
          "path": "client/src/components/layout/ResponsiveLayoutWrapper.tsx",
          "domain": "other",
          "layer": "components",
          "size": 7821,
          "lines": 253,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/stores/useLayoutStore",
            "@/components/ui/button",
            "lucide-react",
            "@/lib/utils",
            "@/hooks/use-media-query",
            "@/config/featureFlags"
          ],
          "exports": [
            "ResponsiveLayoutWrapper"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/layout/LayoutRenderer.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1300,
          "lines": 37,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/stores/useLayoutStore",
            "@/config/pageSlotMap"
          ],
          "exports": [
            "LayoutRenderer"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/layout/AppSidebar.tsx",
          "domain": "other",
          "layer": "components",
          "size": 5274,
          "lines": 135,
          "complexity": 3,
          "dependencies": [
            "react",
            "wouter",
            "@/components/ui/card",
            "@/components/ui/avatar",
            "@/components/ui/badge",
            "@/lib/utils",
            "wouter",
            "@/features/forum/components/HierarchicalZoneNav",
            "@/constants/routes",
            "@/components/widgets/ProfileCard",
            "@/hooks/use-auth",
            "@db/types"
          ],
          "exports": [
            "Sidebar"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "CategoryId",
              "ForumId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 1.1
        },
        {
          "path": "client/src/components/identity/path-progress.tsx",
          "domain": "other",
          "layer": "components",
          "size": 165,
          "lines": 7,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "PathProgress",
            "getPathLevel",
            "getProgressPercentage"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/identity/index.ts",
          "domain": "other",
          "layer": "components",
          "size": 118,
          "lines": 5,
          "complexity": 0,
          "dependencies": [],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/icons/types.ts",
          "domain": "other",
          "layer": "components",
          "size": 852,
          "lines": 28,
          "complexity": 0,
          "dependencies": [
            "lucide-react"
          ],
          "exports": [
            "Theme",
            "IconConfig",
            "IconMap"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "LucideIcon"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 1.5
        },
        {
          "path": "client/src/components/icons/iconRenderer.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1866,
          "lines": 78,
          "complexity": 2,
          "dependencies": [
            "react",
            "lucide-react",
            "react-lottie-player"
          ],
          "exports": [
            "IconRendererProps",
            "IconRenderer"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "LucideIcon"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 1.0999999999999999
        },
        {
          "path": "client/src/components/icons/iconMap.config.ts",
          "domain": "other",
          "layer": "components",
          "size": 2240,
          "lines": 186,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "iconMap",
            "IconKey"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/icons/iconLoader.ts",
          "domain": "other",
          "layer": "components",
          "size": 196,
          "lines": 7,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "getIconConfig"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "IconConfig"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/header/index.ts",
          "domain": "other",
          "layer": "components",
          "size": 1107,
          "lines": 32,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "SiteHeader ",
            "HeaderProvider",
            "useHeader",
            "Logo ",
            "PrimaryNav ",
            "SearchBox ",
            "UserMenu ",
            "NotificationButton ",
            "WalletButton ",
            "AuthButtons ",
            "AdminButton ",
            "MobileNav ",
            "NavLink ",
            "HeaderThemeWrapper ",
            "HeaderPluginSlot",
            "registerHeaderPlugin",
            "unregisterHeaderPlugin",
            "primaryNavigation",
            "createUserMenuItems",
            "filterNavItems"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/header/SiteHeader.tsx",
          "domain": "other",
          "layer": "components",
          "size": 2971,
          "lines": 102,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/candlestick-menu",
            "@/components/economy/wallet/WalletSheet",
            "@/hooks/wrappers/use-auth-wrapper"
          ],
          "exports": [
            "SiteHeader"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/header/SearchBox.tsx",
          "domain": "other",
          "layer": "components",
          "size": 692,
          "lines": 24,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/icons/iconRenderer",
            "@/components/ui/input"
          ],
          "exports": [
            "SearchBox"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/header/PrimaryNav.tsx",
          "domain": "other",
          "layer": "components",
          "size": 5234,
          "lines": 182,
          "complexity": 2,
          "dependencies": [
            "react",
            "wouter",
            "gsap",
            "@/config/navigation"
          ],
          "exports": [
            "PrimaryNav"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/header/NavLink.tsx",
          "domain": "other",
          "layer": "components",
          "size": 916,
          "lines": 52,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "@/config/navigation"
          ],
          "exports": [
            "NavLink"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/header/MobileNav.tsx",
          "domain": "other",
          "layer": "components",
          "size": 6264,
          "lines": 186,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "@/components/icons/iconRenderer",
            "@/components/ui/button",
            "@/components/ui/avatar",
            "@/config/navigation"
          ],
          "exports": [
            "MobileNav"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/header/Logo.tsx",
          "domain": "other",
          "layer": "components",
          "size": 393,
          "lines": 18,
          "complexity": 1,
          "dependencies": [
            "wouter"
          ],
          "exports": [
            "Logo"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/header/HeaderThemeWrapper.tsx",
          "domain": "other",
          "layer": "components",
          "size": 837,
          "lines": 32,
          "complexity": 1,
          "dependencies": [
            "react"
          ],
          "exports": [
            "HeaderThemeWrapper"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/header/HeaderPluginSlot.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1314,
          "lines": 52,
          "complexity": 1,
          "dependencies": [
            "react"
          ],
          "exports": [
            "registerHeaderPlugin",
            "unregisterHeaderPlugin",
            "HeaderPluginSlot"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/header/HeaderContext.tsx",
          "domain": "other",
          "layer": "components",
          "size": 3308,
          "lines": 120,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/hooks/wrappers/use-auth-wrapper"
          ],
          "exports": [
            "AuthStatus",
            "HeaderUser",
            "HeaderTheme",
            "HeaderContextValue",
            "HeaderProvider",
            "useHeader"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/gamification/progression-card.tsx",
          "domain": "other",
          "layer": "components",
          "size": 8835,
          "lines": 268,
          "complexity": 1,
          "dependencies": [
            "@/lib/utils",
            "@/components/ui/card",
            "@/components/ui/progress",
            "@/components/ui/badge",
            "@/components/ui/button",
            "@/components/ui/separator",
            "@/lib/utils",
            "lucide-react",
            "framer-motion",
            "wouter",
            "@/features/gamification/services/gamification-api.service"
          ],
          "exports": [
            "ProgressionCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "UserProgression"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/gamification/index.ts",
          "domain": "other",
          "layer": "components",
          "size": 1053,
          "lines": 39,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "LevelDisplay",
            "LevelBadge",
            "ProgressionCard ",
            "ProfileGamificationWidget ",
            "AchievementCard ",
            "AchievementGrid ",
            "AchievementUnlockModal ",
            "MissionCard ",
            "MissionDashboard ",
            "Leaderboard ",
            "LevelUpModal "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/footer/index.ts",
          "domain": "other",
          "layer": "components",
          "size": 556,
          "lines": 19,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "SiteFooter ",
            "LiveStats ",
            "FooterBrand ",
            "FooterSection ",
            "RandomTagline ",
            "footerNavigation",
            "getNavigationSection",
            "getResourcesSection",
            "getCommunitySection",
            "getLegalSection"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/footer/SiteFooter.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1916,
          "lines": 53,
          "complexity": 1,
          "dependencies": [
            "react",
            "framer-motion",
            "@/config/footer-navigation"
          ],
          "exports": [
            "SiteFooter"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/footer/RandomTagline.tsx",
          "domain": "other",
          "layer": "components",
          "size": 2761,
          "lines": 76,
          "complexity": 1,
          "dependencies": [
            "react",
            "framer-motion"
          ],
          "exports": [
            "RandomTagline"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/footer/LiveStats.tsx",
          "domain": "other",
          "layer": "components",
          "size": 3559,
          "lines": 116,
          "complexity": 1,
          "dependencies": [
            "react",
            "framer-motion",
            "lucide-react"
          ],
          "exports": [
            "LiveStats"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/footer/FooterSection.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1320,
          "lines": 50,
          "complexity": 1,
          "dependencies": [
            "react",
            "framer-motion",
            "wouter",
            "@/config/footer-navigation"
          ],
          "exports": [
            "FooterSection"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "FooterLink"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/footer/FooterBrand.tsx",
          "domain": "other",
          "layer": "components",
          "size": 661,
          "lines": 25,
          "complexity": 1,
          "dependencies": [
            "react",
            "framer-motion"
          ],
          "exports": [
            "FooterBrand"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/fixtures/fixture-preview.tsx",
          "domain": "other",
          "layer": "components",
          "size": 10317,
          "lines": 359,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/card",
            "@/components/ui/badge",
            "@/components/ui/button",
            "@/components/ui/avatar",
            "@/components/ui/tabs",
            "date-fns"
          ],
          "exports": [
            "FixturePreview"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/components/fixtures/fixture-builder.tsx",
          "domain": "other",
          "layer": "components",
          "size": 12798,
          "lines": 451,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/label",
            "@/components/ui/textarea",
            "@/components/ui/switch",
            "@/components/ui/badge",
            "@/components/ui/tabs",
            "lucide-react",
            "sonner"
          ],
          "exports": [
            "FixtureBuilder"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/components/errors/NetworkError.tsx",
          "domain": "other",
          "layer": "components",
          "size": 6416,
          "lines": 216,
          "complexity": 3,
          "dependencies": [
            "react",
            "lucide-react",
            "@/components/ui/button",
            "@/components/ui/card",
            "@/components/ui/alert"
          ],
          "exports": [
            "NetworkError"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.1
        },
        {
          "path": "client/src/components/errors/ErrorBoundary.tsx",
          "domain": "other",
          "layer": "components",
          "size": 6839,
          "lines": 230,
          "complexity": 2,
          "dependencies": [
            "react",
            "lucide-react",
            "@/components/ui/button",
            "@/components/ui/card"
          ],
          "exports": [
            "ErrorBoundary",
            "withErrorBoundary",
            "useErrorHandler"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/editor/suggestion.ts",
          "domain": "other",
          "layer": "components",
          "size": 6957,
          "lines": 252,
          "complexity": 3,
          "dependencies": [
            "@tiptap/react",
            "tippy.js",
            "@/lib/queryClient"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 2.1
        },
        {
          "path": "client/src/components/editor/rich-text-editor.tsx",
          "domain": "other",
          "layer": "components",
          "size": 21059,
          "lines": 728,
          "complexity": 3,
          "dependencies": [
            "react",
            "react-dom/client",
            "@tiptap/react",
            "@tiptap/starter-kit",
            "@tiptap/extension-underline",
            "@tiptap/extension-link",
            "@tiptap/extension-image",
            "@tiptap/extension-placeholder",
            "@tiptap/extension-text-style",
            "@tiptap/extension-font-family",
            "@tiptap/extension-color",
            "@tiptap/extension-text-align",
            "@tiptap/extension-code-block-lowlight",
            "lowlight",
            "@tiptap/extension-mention",
            "@/components/ui/button",
            "@/components/ui/tooltip",
            "@/lib/utils"
          ],
          "exports": [
            "RichTextEditorProps",
            "RichTextEditor"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.3
        },
        {
          "path": "client/src/components/editor/gif-picker.tsx",
          "domain": "other",
          "layer": "components",
          "size": 10602,
          "lines": 372,
          "complexity": 4,
          "dependencies": [
            "react",
            "@/lib/queryClient",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/tabs",
            "lucide-react"
          ],
          "exports": [
            "GifPicker"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.3
        },
        {
          "path": "client/src/components/editor/enhanced-gif-picker.tsx",
          "domain": "other",
          "layer": "components",
          "size": 13834,
          "lines": 455,
          "complexity": 5,
          "dependencies": [
            "react",
            "@/lib/queryClient",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/tabs",
            "lucide-react"
          ],
          "exports": [
            "EnhancedGifPicker"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.5
        },
        {
          "path": "client/src/components/dev/dev-playground-shortcut.tsx",
          "domain": "other",
          "layer": "components",
          "size": 567,
          "lines": 21,
          "complexity": 0,
          "dependencies": [
            "wouter",
            "lucide-react"
          ],
          "exports": [
            "DevPlaygroundShortcut"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/dashboard/UpcomingEventsWidget.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1345,
          "lines": 50,
          "complexity": 1,
          "dependencies": [
            "react",
            "lucide-react",
            "@/components/ui/card"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/dashboard/DailyTasksWidget.tsx",
          "domain": "other",
          "layer": "components",
          "size": 2016,
          "lines": 53,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/hooks/useDailyTasks",
            "lucide-react",
            "@/components/ui/progress",
            "@/components/ui/card"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/common/index.ts",
          "domain": "other",
          "layer": "components",
          "size": 324,
          "lines": 9,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "LoadingCard ",
            "StandardErrorDisplay ",
            "StatsBar ",
            "default as BackToHomeButton "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/common/StatsBar.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1960,
          "lines": 80,
          "complexity": 1,
          "dependencies": [
            "react",
            "framer-motion",
            "@/config/brand.config",
            "@/lib/utils"
          ],
          "exports": [
            "StatItem",
            "StatsBar"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/common/StandardErrorDisplay.tsx",
          "domain": "other",
          "layer": "components",
          "size": 814,
          "lines": 37,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/error-display",
            "@/config/brand.config"
          ],
          "exports": [
            "StandardErrorDisplay"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/common/LoadingCard.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1557,
          "lines": 64,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/loader",
            "@/config/brand.config",
            "@/lib/utils"
          ],
          "exports": [
            "LoadingCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/common/Breadcrumb.tsx",
          "domain": "other",
          "layer": "components",
          "size": 1902,
          "lines": 69,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/common/BackToHomeButton.tsx",
          "domain": "other",
          "layer": "components",
          "size": 713,
          "lines": 30,
          "complexity": 1,
          "dependencies": [
            "react",
            "framer-motion",
            "wouter",
            "@/components/ui/button",
            "lucide-react"
          ],
          "exports": [
            "BackToHomeButton"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/__tests__/services/error.service.test.ts",
          "domain": "other",
          "layer": "services",
          "size": 8854,
          "lines": 281,
          "complexity": 3,
          "dependencies": [
            "vitest",
            "@/services/error.service",
            "@/services/error.service"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "AppError",
              "ErrorCategory",
              "ErrorSeverity"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.1
        },
        {
          "path": "client/src/components/zone/PrimaryZoneCarousel.tsx",
          "domain": "other",
          "layer": "components",
          "size": 8789,
          "lines": 309,
          "complexity": 1,
          "dependencies": [
            "react",
            "framer-motion",
            "lucide-react",
            "@/components/ui/button",
            "@/components/forum/ZoneCard",
            "@/lib/utils",
            "@/hooks/useMediaQuery"
          ],
          "exports": [
            "PrimaryZoneCarouselProps",
            "PrimaryZoneCarousel "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "server/src/core/routes/api/status.ts",
          "domain": "other",
          "layer": "routes",
          "size": 449,
          "lines": 17,
          "complexity": 1,
          "dependencies": [
            "express",
            "@db"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "server/src/core/routes/api/index.ts",
          "domain": "other",
          "layer": "routes",
          "size": 280,
          "lines": 11,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/pages/ui-playground/sections/FontsSection.tsx",
          "domain": "other",
          "layer": "pages",
          "size": 10407,
          "lines": 298,
          "complexity": 1,
          "dependencies": [
            "react",
            "react",
            "@/pages/dev",
            "@/config/fonts.config",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/badge",
            "@/components/ui/tabs",
            "lucide-react"
          ],
          "exports": [
            "FontsSection"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/pages/ui-playground/sections/ColorsSection.tsx",
          "domain": "other",
          "layer": "pages",
          "size": 2015,
          "lines": 63,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/pages/dev"
          ],
          "exports": [
            "ColorsSection"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/pages/ui-playground/sections/CardsSection.tsx",
          "domain": "other",
          "layer": "pages",
          "size": 2043,
          "lines": 61,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/pages/dev",
            "@/components/ui/card",
            "lucide-react",
            "@/components/ui/skeleton",
            "@/components/ui/badge"
          ],
          "exports": [
            "CardsSection"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/pages/ui-playground/sections/ButtonsSection.tsx",
          "domain": "other",
          "layer": "pages",
          "size": 2707,
          "lines": 94,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/pages/dev",
            "@/components/ui/button",
            "lucide-react"
          ],
          "exports": [
            "ButtonsSection"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/pages/ui-playground/sections/AnimationsSection.tsx",
          "domain": "other",
          "layer": "pages",
          "size": 523,
          "lines": 18,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/pages/dev"
          ],
          "exports": [
            "AnimationsSection"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/pages/ui-playground/animations/FadeInListDemo.tsx",
          "domain": "other",
          "layer": "pages",
          "size": 485,
          "lines": 23,
          "complexity": 0,
          "dependencies": [
            "react",
            "framer-motion"
          ],
          "exports": [
            "FadeInListDemo"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/pages/ui-playground/animations/CardFlipDemo.tsx",
          "domain": "other",
          "layer": "pages",
          "size": 1157,
          "lines": 45,
          "complexity": 0,
          "dependencies": [
            "react",
            "framer-motion",
            "@/pages/dev/DemoCard",
            "react"
          ],
          "exports": [
            "CardFlipDemo"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/pages/ui-playground/animations/ButtonPulseDemo.tsx",
          "domain": "other",
          "layer": "pages",
          "size": 672,
          "lines": 28,
          "complexity": 0,
          "dependencies": [
            "react",
            "react",
            "@/components/ui/button",
            "@/pages/dev/DemoCard"
          ],
          "exports": [
            "ButtonPulseDemo"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.5
        },
        {
          "path": "client/src/features/gamification/services/gamification-api.service.ts",
          "domain": "other",
          "layer": "services",
          "size": 7954,
          "lines": 361,
          "complexity": 5,
          "dependencies": [
            "@/lib/queryClient"
          ],
          "exports": [
            "LevelInfo",
            "UserProgression",
            "Achievement",
            "UserAchievement",
            "Mission",
            "MissionProgress",
            "LeaderboardEntry",
            "GamificationStats",
            "GamificationDashboard",
            "GamificationApiService",
            "gamificationApi"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 58,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 87,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 106,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 34,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 77,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 107,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 117,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 242,
              "context": "async checkAndAwardAchievements(userId: number, actionType: string, metadata?: any) {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 314,
              "context": "async updateMissionProgress(userId: number, actionType: string, metadata?: any) {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 5.4
        },
        {
          "path": "client/src/features/dictionary/services/dictionaryApi.ts",
          "domain": "other",
          "layer": "services",
          "size": 604,
          "lines": 12,
          "complexity": 0,
          "dependencies": [
            "@/lib/queryClient"
          ],
          "exports": [
            "dictionaryApi"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 8,
              "context": "moderate: (id: number, status: 'approved' | 'rejected') =>",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 10,
              "context": "upvote: (id: number) => apiRequest({ url: `/api/dictionary/${id}/upvote`, method: 'POST' })",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 3.7
        },
        {
          "path": "client/src/features/activity/hooks/useActivityFeed.ts",
          "domain": "other",
          "layer": "hooks",
          "size": 1695,
          "lines": 73,
          "complexity": 1,
          "dependencies": [
            "@tanstack/react-query",
            "@/features/activity/services/activityApi",
            "@/hooks/use-auth"
          ],
          "exports": [
            "useActivityFeed",
            "useAdminActivityFeed",
            "useUserActivityFeed"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/features/activity/services/activityApi.ts",
          "domain": "other",
          "layer": "services",
          "size": 4077,
          "lines": 172,
          "complexity": 4,
          "dependencies": [
            "@/lib/queryClient"
          ],
          "exports": [
            "EventLog",
            "EventLogFilters",
            "EventLogPagination",
            "ApiResponse",
            "activityApi"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.5
        },
        {
          "path": "client/src/features/activity/components/PaginatedActivityFeed.tsx",
          "domain": "other",
          "layer": "components",
          "size": 10065,
          "lines": 342,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/features/activity/hooks/useActivityFeed",
            "@/features/activity/services/activityApi",
            "date-fns"
          ],
          "exports": [
            "PaginatedActivityFeed"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/features/activity/components/ActivityFeed.tsx",
          "domain": "other",
          "layer": "components",
          "size": 7095,
          "lines": 256,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/features/activity/hooks/useActivityFeed",
            "@/features/activity/services/activityApi",
            "date-fns"
          ],
          "exports": [
            "ActivityFeed"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/platform-energy/stats/platform-stats-widget.tsx",
          "domain": "other",
          "layer": "components",
          "size": 4864,
          "lines": 175,
          "complexity": 2,
          "dependencies": [
            "@tanstack/react-query",
            "@/components/ui/card",
            "@/components/ui/skeleton",
            "lucide-react"
          ],
          "exports": [
            "PlatformStatsWidget"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.10000000000000003
        }
      ],
      "totalIssues": 180,
      "avgComplexity": 1.4142857142857144,
      "migrationEffort": 400.1999999999988,
      "dependencies": [
        "@playwright/test",
        "@degentalk/db/types",
        "@db",
        "@aws-sdk/client-s3",
        "@schema",
        "@shared/path-config",
        "@schema/system/analyticsEvents",
        "@db/types",
        "@neondatabase/serverless",
        "@vitejs/plugin-react",
        "@replit/vite-plugin-runtime-error-modal",
        "@tailwindcss/typography",
        "@tailwindcss/container-queries",
        "@db/types/id.types",
        "@fixtures",
        "@server/src/core/repository",
        "@server/src/core/logger",
        "@server/src/utils/slugify",
        "@server/src/lib/db",
        "@/config/brand.config",
        "@/core/constants",
        "@/components/ui/toaster",
        "@/components/header",
        "@/components/auth/protected-route",
        "@/components/dev/dev-role-switcher",
        "@/components/dev/dev-playground-shortcut",
        "@/components/forum/LegacyForumRedirect",
        "@/db/types",
        "@faker-js/faker",
        "@server/src/core/cache.service",
        "@server/src/utils/environment",
        "@server/src/middleware/dev-security.middleware",
        "@supabase/supabase-js",
        "@tanstack/react-query",
        "@/hooks/use-auth",
        "@/hooks/use-purchase-modal",
        "@/contexts/shoutbox-context",
        "@/contexts/ForumStructureContext",
        "@/contexts/ForumThemeProvider",
        "@/components/ui/tooltip",
        "@/contexts/ProfileCardContext",
        "@/contexts/MotionContext",
        "@/lib/queryClient",
        "@/contexts/ForumOrderingContext",
        "@/contexts/XpToastContext",
        "@/contexts/LevelUpContext",
        "@/components/messages/WhispersInbox",
        "@/components/messages/WhisperButton",
        "@/hooks/use-messages",
        "@/components/ui/card",
        "@/components/ui/badge",
        "@/components/messages/icons/MessageSquareWave",
        "@/pages/dev",
        "@/pages/not-found",
        "@/layout/primitives",
        "@/pages/ui-playground/sections/ButtonsSection",
        "@/pages/ui-playground/sections/CardsSection",
        "@/pages/ui-playground/sections/ColorsSection",
        "@/pages/ui-playground/sections/AvatarBadgesSection",
        "@/pages/ui-playground/sections/AnimationsSection",
        "@/pages/ui-playground/sections/FontsSection",
        "@/lib/utils",
        "@/components/ui/button",
        "@/components/ui/tabs",
        "@/components/ui/alert",
        "@/hooks/use-gamification",
        "@/features/gamification/services/gamification-api.service",
        "@/components/layout/hero-section",
        "@/components/layout/announcement-ticker",
        "@/components/footer",
        "@/components/layout/ResponsiveLayoutWrapper",
        "@/components/zone/PrimaryZoneCarousel",
        "@/layout/primitives/Wide",
        "@/components/ui/content-area",
        "@/contexts/content-feed-context",
        "@/utils/spacing-constants",
        "@/features/users/hooks",
        "@/hooks/useZoneStats",
        "@/utils/forumStats",
        "@/components/skeletons/HomePageSkeleton",
        "@/components/forum/ZoneCard",
        "@/components/forum/ForumErrorBoundary",
        "@/components/ui/input",
        "@/components/fixtures/fixture-builder",
        "@/components/fixtures/fixture-preview",
        "@/components/ui/loader",
        "@/components/ui/error-display",
        "@/components/users/UserDirectoryTable",
        "@/components/users/UserFilters",
        "@/lib/roles",
        "@/constants/env",
        "@/constants/websocket-disabled",
        "@/types/canonical.types",
        "@/config/featureFlags",
        "@/lib/api-request",
        "@/hooks/use-toast",
        "@/hooks/useUserCosmetics",
        "@/hooks/useUserXP",
        "@/config/publicConfig",
        "@/types/thread.types",
        "@/constants/routes",
        "@/hooks/use-shop-items",
        "@/hooks/use-vault-items",
        "@/types/notifications",
        "@/hooks/use-content",
        "@/stores/useLayoutStore",
        "@/components/icons/iconRenderer",
        "@testing-library/react",
        "@/providers/root-provider",
        "@/components/forum/CanonicalZoneGrid",
        "@/features/forum/components/HierarchicalZoneNav",
        "@/components/ui/skeleton",
        "@/features/forum/components/ForumListItem",
        "@/components/navigation/ForumBreadcrumbs",
        "@/components/forum/ThreadCard",
        "@/features/forum/hooks/useForumQueries",
        "@/components/ui/separator",
        "@/components/ui/pagination",
        "@/components/ui/label",
        "@/hooks/use-auth.tsx",
        "@/hooks/useSearchParams",
        "@/components/preferences/profile-preferences",
        "@/components/preferences/account-preferences",
        "@/components/preferences/notification-preferences",
        "@/components/preferences/display-preferences",
        "@/components/preferences/session-preferences",
        "@/components/preferences/referral-preferences",
        "@/components/preferences/social-preferences",
        "@/components/ui/container",
        "@/features/dictionary/components/AddWordModal",
        "@/features/dictionary/services/dictionaryApi",
        "@/stores/usePlaygroundControls",
        "@/types/inventory",
        "@/components/ui/avatar",
        "@/components/ui/scroll-area",
        "@/hooks/useFollowing",
        "@radix-ui/react-toggle",
        "@radix-ui/react-toggle-group",
        "@/components/ui/toggle",
        "@radix-ui/react-toast",
        "@radix-ui/react-tabs",
        "@radix-ui/react-switch",
        "@/lib/utils/animateNumber",
        "@radix-ui/react-slider",
        "@radix-ui/react-slot",
        "@/hooks/use-mobile",
        "@radix-ui/react-dialog",
        "@radix-ui/react-separator",
        "@radix-ui/react-select",
        "@radix-ui/react-scroll-area",
        "@radix-ui/react-radio-group",
        "@radix-ui/react-progress",
        "@radix-ui/react-popover",
        "@radix-ui/react-navigation-menu",
        "@radix-ui/react-menubar",
        "@radix-ui/react-dropdown-menu",
        "@radix-ui/react-label",
        "@radix-ui/react-hover-card",
        "@/hooks/useFeatureGates",
        "@/hooks/useMediaQuery",
        "@radix-ui/react-context-menu",
        "@/components/ui/tab-switcher",
        "@/components/ui/content-feed",
        "@/components/ui/dialog",
        "@radix-ui/react-collapsible",
        "@radix-ui/react-checkbox",
        "@radix-ui/react-avatar",
        "@radix-ui/react-aspect-ratio",
        "@radix-ui/react-alert-dialog",
        "@radix-ui/react-accordion",
        "@/hooks/use-local-storage",
        "@/components/ui/switch",
        "@/components/ui/slider",
        "@/types/compat/user",
        "@/features/users/hooks/useUserReferrals",
        "@/components/ui/radio-group",
        "@/hooks/preferences/useUserSettings",
        "@/hooks/preferences/useUpdateUserSettings",
        "@/components/ui/textarea",
        "@/components/ui/progress",
        "@lottiefiles/dotlottie-react",
        "@/features/admin/services/media-api.service",
        "@/config/ui.config",
        "@/config/widgetRegistry",
        "@/navigation/forumNav",
        "@/hooks/use-media-query",
        "@/config/pageSlotMap",
        "@/components/widgets/ProfileCard",
        "@/components/ui/candlestick-menu",
        "@/components/economy/wallet/WalletSheet",
        "@/hooks/wrappers/use-auth-wrapper",
        "@/config/navigation",
        "@/config/footer-navigation",
        "@tiptap/react",
        "@tiptap/starter-kit",
        "@tiptap/extension-underline",
        "@tiptap/extension-link",
        "@tiptap/extension-image",
        "@tiptap/extension-placeholder",
        "@tiptap/extension-text-style",
        "@tiptap/extension-font-family",
        "@tiptap/extension-color",
        "@tiptap/extension-text-align",
        "@tiptap/extension-code-block-lowlight",
        "@tiptap/extension-mention",
        "@/hooks/useDailyTasks",
        "@/services/error.service",
        "@/config/fonts.config",
        "@/pages/dev/DemoCard",
        "@/features/activity/services/activityApi",
        "@/features/activity/hooks/useActivityFeed"
      ],
      "dependents": [],
      "criticalPath": false,
      "riskAssessment": {
        "runtime": "high",
        "testing": "high",
        "integration": "low"
      },
      "migrationStrategy": {
        "priority": 3,
        "approach": "incremental",
        "estimatedDays": 81,
        "blockers": [],
        "prerequisites": []
      }
    },
    {
      "name": "admin",
      "files": [
        {
          "path": "server/src/domains/admin/admin.validation.ts",
          "domain": "admin",
          "subdomain": "admin.validation.ts",
          "layer": "other",
          "size": 1955,
          "lines": 89,
          "complexity": 1,
          "dependencies": [
            "zod",
            "express"
          ],
          "exports": [
            "validateRequestBody",
            "validateNumberParam",
            "validateQueryParams",
            "CommonValidation"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "server/src/domains/admin/admin.service.ts",
          "domain": "admin",
          "subdomain": "admin.service.ts",
          "layer": "other",
          "size": 3491,
          "lines": 137,
          "complexity": 3,
          "dependencies": [
            "@db",
            "drizzle-orm",
            "@schema",
            "@/db/types"
          ],
          "exports": [
            "AdminService",
            "adminService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "AdminId",
              "UserId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 1.6
        },
        {
          "path": "server/src/domains/admin/admin.routes.ts",
          "domain": "admin",
          "subdomain": "admin.routes.ts",
          "layer": "routes",
          "size": 5614,
          "lines": 120,
          "complexity": 1,
          "dependencies": [
            "express",
            "@server/src/core/logger"
          ],
          "exports": [
            "registerAdminRoutes"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "server/src/domains/admin/admin.response.ts",
          "domain": "admin",
          "subdomain": "admin.response.ts",
          "layer": "other",
          "size": 1370,
          "lines": 68,
          "complexity": 1,
          "dependencies": [
            "express"
          ],
          "exports": [
            "StandardResponse",
            "sendSuccess",
            "sendError",
            "sendValidationError",
            "handleAdminError"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Response"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 1.7
        },
        {
          "path": "server/src/domains/admin/admin.middleware.ts",
          "domain": "admin",
          "subdomain": "admin.middleware.ts",
          "layer": "other",
          "size": 5925,
          "lines": 173,
          "complexity": 5,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "@schema",
            "drizzle-orm",
            "@server/src/core/db",
            "@server/src/core/logger"
          ],
          "exports": [
            "getUserId",
            "asyncHandler"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.2
        },
        {
          "path": "server/src/domains/admin/admin.errors.ts",
          "domain": "admin",
          "subdomain": "admin.errors.ts",
          "layer": "other",
          "size": 1265,
          "lines": 42,
          "complexity": 1,
          "dependencies": [
            "import { AdminError, AdminErrorCodes } from "
          ],
          "exports": [
            "AdminErrorCodes",
            "AdminError"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "server/src/domains/admin/admin.controller.ts",
          "domain": "admin",
          "subdomain": "admin.controller.ts",
          "layer": "controllers",
          "size": 1875,
          "lines": 75,
          "complexity": 2,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "@/db/types"
          ],
          "exports": [
            "AdminController",
            "adminController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9
        },
        {
          "path": "server/src/domains/admin/shared/index.ts",
          "domain": "admin",
          "subdomain": "shared",
          "layer": "other",
          "size": 2096,
          "lines": 76,
          "complexity": 0,
          "dependencies": [
            "@/domains/admin/shared",
            "@/domains/admin/shared",
            "@/domains/admin/shared",
            "@/domains/admin/shared"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/admin/shared/admin-query-utils.ts",
          "domain": "admin",
          "subdomain": "shared",
          "layer": "other",
          "size": 6752,
          "lines": 286,
          "complexity": 5,
          "dependencies": [
            "drizzle-orm",
            "drizzle-orm/pg-core"
          ],
          "exports": [
            "SearchFilter",
            "DateRangeFilter",
            "StatusFilter",
            "RoleFilter",
            "PaginationParams",
            "SortParams",
            "buildSearchConditions",
            "buildDateRangeConditions",
            "buildStatusConditions",
            "buildRoleConditions",
            "combineFilterConditions",
            "buildSortConditions",
            "calculatePaginationOffset",
            "normalizePaginationParams",
            "buildPaginationMeta",
            "buildUserSearchConditions",
            "buildExclusionConditions",
            "FilterBuilder",
            "COMMON_SORT_FIELDS",
            "validateSortParams"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "server/src/domains/admin/shared/admin-operation-utils.ts",
          "domain": "admin",
          "subdomain": "shared",
          "layer": "other",
          "size": 9351,
          "lines": 384,
          "complexity": 7,
          "dependencies": [
            "@server/src/core/logger",
            "@/db/types"
          ],
          "exports": [
            "USER_ROLES",
            "UserRole",
            "ROLE_HIERARCHY",
            "hasRolePermission",
            "getManageableRoles",
            "validateRoleAssignment",
            "formatUserDisplayName",
            "createAuditLogEntry",
            "sanitizeForLogging",
            "formatEntityChanges",
            "validateAdminOperation",
            "generateSecureToken",
            "validateEntityId",
            "formatAdminResponse",
            "AdminRateLimiter",
            "BatchOperationManager",
            "ENTITY_STATUS",
            "EntityStatus",
            "validateStatusTransition",
            "adminCreateAuditLogEntry"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "AdminId",
              "EntityId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.1000000000000005
        },
        {
          "path": "server/src/domains/admin/shared/admin-error-boundaries.ts",
          "domain": "admin",
          "subdomain": "shared",
          "layer": "other",
          "size": 10524,
          "lines": 444,
          "complexity": 5,
          "dependencies": [
            "@server/src/core/services/user.service",
            "@server/src/core/logger",
            "express",
            "@/db/types"
          ],
          "exports": [
            "AdminErrorContext",
            "AdminOperationResult",
            "AdminErrorDetails",
            "ERROR_CATEGORIES",
            "ErrorCategory",
            "TypedAdminError",
            "AdminErrorFactory",
            "AdminOperationBoundary",
            "adminErrorBoundaryMiddleware",
            "formatErrorResponse"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "server/src/domains/admin/shared/admin-cache.service.ts",
          "domain": "admin",
          "subdomain": "shared",
          "layer": "other",
          "size": 9477,
          "lines": 404,
          "complexity": 8,
          "dependencies": [
            "node-cache",
            "@/db/types"
          ],
          "exports": [
            "CacheConfig",
            "CacheMetrics",
            "AdminCacheService",
            "AdminCacheKeys",
            "adminCacheService",
            "CacheResult"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "EntityId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 3.1
        },
        {
          "path": "server/src/domains/admin/sub-domains/index.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 67,
          "lines": 3,
          "complexity": 0,
          "dependencies": [],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/admin/sub-domains/xp/xp.validators.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 1116,
          "lines": 39,
          "complexity": 0,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "XpSettingsSchema",
            "CreateLevelSchema",
            "UpdateLevelSchema",
            "AdjustUserXpSchema"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1
        },
        {
          "path": "server/src/domains/admin/sub-domains/xp/xp.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 9112,
          "lines": 274,
          "complexity": 6,
          "dependencies": [
            "@db",
            "drizzle-orm",
            "@/db/types"
          ],
          "exports": [
            "XpAdminService",
            "xpAdminService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 224,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.3000000000000003
        },
        {
          "path": "server/src/domains/admin/sub-domains/xp/xp.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 3570,
          "lines": 69,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/admin/sub-domains/xp/xp.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 11344,
          "lines": 385,
          "complexity": 9,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [
            "getXpSettings",
            "updateXpSettings",
            "getLevels",
            "createLevel",
            "updateLevel",
            "deleteLevel",
            "getBadges",
            "createBadge",
            "updateBadge",
            "deleteBadge",
            "getTitles",
            "createTitle",
            "updateTitle",
            "deleteTitle",
            "adjustUserXp",
            "getXpAdjustmentLogs",
            "testXpActionAward"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 2.8
        },
        {
          "path": "server/src/domains/admin/sub-domains/xp/xp.clout.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 726,
          "lines": 25,
          "complexity": 1,
          "dependencies": [
            "@db",
            "@schema"
          ],
          "exports": [
            "XpCloutService",
            "xpCloutService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "server/src/domains/admin/sub-domains/xp/xp-actions.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 8348,
          "lines": 304,
          "complexity": 5,
          "dependencies": [
            "express",
            "@db",
            "@schema",
            "drizzle-orm",
            "@shared/validators/admin",
            "@server/src/middleware/validate"
          ],
          "exports": [
            "getAllXpActions",
            "getXpActionByKey",
            "createXpAction",
            "updateXpAction",
            "toggleXpAction",
            "resetXpAction"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2
        },
        {
          "path": "server/src/domains/admin/sub-domains/users/users.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 12940,
          "lines": 498,
          "complexity": 8,
          "dependencies": [
            "@db",
            "drizzle-orm",
            "@schema",
            "@shared/validators/admin",
            "zod",
            "bcrypt",
            "@/db/types"
          ],
          "exports": [
            "AdminUsersService",
            "adminUsersService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "UserId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.6
        },
        {
          "path": "server/src/domains/admin/sub-domains/users/users.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 3258,
          "lines": 130,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/admin/sub-domains/users/users.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 10701,
          "lines": 418,
          "complexity": 8,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "@shared/validators/admin",
            "zod",
            "@db",
            "@schema",
            "drizzle-orm",
            "@/db/types",
            "@shared/utils/id"
          ],
          "exports": [
            "AdminUsersController",
            "adminUsersController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 0.8
        },
        {
          "path": "server/src/domains/admin/sub-domains/users/inventory.admin.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 922,
          "lines": 26,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/admin/sub-domains/users/inventory.admin.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 6814,
          "lines": 221,
          "complexity": 5,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [
            "userInventoryAdminController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1
        },
        {
          "path": "server/src/domains/admin/sub-domains/users/bulk-operations.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 9985,
          "lines": 411,
          "complexity": 6,
          "dependencies": [
            "@db",
            "drizzle-orm",
            "@schema",
            "@/db/types"
          ],
          "exports": [
            "BulkOperationResult",
            "BulkRoleAssignmentData",
            "BulkBanData",
            "AdminUserBulkOperationsService",
            "adminUserBulkOperationsService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 24,
              "context": "errors: Array<{ userId: number; error: string }>;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.3000000000000003
        },
        {
          "path": "server/src/domains/admin/sub-domains/users/bulk-operations.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 5793,
          "lines": 215,
          "complexity": 4,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "zod"
          ],
          "exports": [
            "AdminUserBulkOperationsController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7999999999999998
        },
        {
          "path": "server/src/domains/admin/sub-domains/user-groups/user-groups.validators.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 1453,
          "lines": 38,
          "complexity": 1,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "UserGroupSchema",
            "ListGroupUsersQuerySchema",
            "UserGroupInput",
            "ListGroupUsersQueryInput"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "server/src/domains/admin/sub-domains/user-groups/user-groups.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 6470,
          "lines": 229,
          "complexity": 4,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "@/db/types"
          ],
          "exports": [
            "AdminUserGroupsService",
            "adminUserGroupsService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "UserGroupInput",
              "ListGroupUsersQueryInput"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.8
        },
        {
          "path": "server/src/domains/admin/sub-domains/user-groups/user-groups.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 1215,
          "lines": 50,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/admin/sub-domains/user-groups/user-groups.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 4440,
          "lines": 135,
          "complexity": 5,
          "dependencies": [
            "express"
          ],
          "exports": [
            "AdminUserGroupsController",
            "adminUserGroupsController"
          ],
          "idPatterns": [
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 31,
              "context": "const groupId = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 69,
              "context": "const groupId = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 95,
              "context": "const groupId = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 115,
              "context": "const groupId = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 0.5999999999999999
        },
        {
          "path": "server/src/domains/admin/sub-domains/wallet/wallet.validators.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 3208,
          "lines": 130,
          "complexity": 2,
          "dependencies": [
            "express",
            "zod"
          ],
          "exports": [
            "validateWalletConfig",
            "validateDGTTransaction",
            "validateUserId"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        },
        {
          "path": "server/src/domains/admin/sub-domains/wallet/wallet.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 1135,
          "lines": 29,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [
            "router as adminWalletRoutes "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/admin/sub-domains/wallet/wallet.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 5933,
          "lines": 239,
          "complexity": 4,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express"
          ],
          "exports": [
            "AdminWalletController",
            "adminWalletController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.3
        },
        {
          "path": "server/src/domains/admin/sub-domains/treasury/treasury.validators.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 2703,
          "lines": 72,
          "complexity": 1,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "TreasuryDepositSchema",
            "TreasuryWithdrawalSchema",
            "TreasurySettingsUpdateSchema",
            "MassAirdropSchema",
            "TreasuryDepositInput",
            "TreasuryWithdrawalInput",
            "TreasurySettingsUpdateInput",
            "MassAirdropInput"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.2
        },
        {
          "path": "server/src/domains/admin/sub-domains/treasury/treasury.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 12300,
          "lines": 398,
          "complexity": 6,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "@/db/types"
          ],
          "exports": [
            "AdminTreasuryService",
            "adminTreasuryService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 236,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Transaction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.3000000000000003
        },
        {
          "path": "server/src/domains/admin/sub-domains/treasury/treasury.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 1282,
          "lines": 48,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/admin/sub-domains/treasury/treasury.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 5229,
          "lines": 152,
          "complexity": 4,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express"
          ],
          "exports": [
            "AdminTreasuryController",
            "adminTreasuryController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.8
        },
        {
          "path": "server/src/domains/admin/sub-domains/titles/titles.validators.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 2398,
          "lines": 76,
          "complexity": 0,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "baseTitleSchema",
            "createTitleSchema",
            "updateTitleSchema",
            "CreateTitleInput",
            "UpdateTitleInput"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1
        },
        {
          "path": "server/src/domains/admin/sub-domains/titles/titles.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 3407,
          "lines": 111,
          "complexity": 3,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [
            "AdminTitlesService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 83,
              "context": "async update(id: number, data: UpdateTitleInput) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 103,
              "context": "async delete(id: number) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "CreateTitleInput",
              "UpdateTitleInput"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9999999999999998
        },
        {
          "path": "server/src/domains/admin/sub-domains/titles/titles.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 1005,
          "lines": 30,
          "complexity": 1,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "@lib/auth/canUser.ts"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "server/src/domains/admin/sub-domains/titles/titles.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 2113,
          "lines": 81,
          "complexity": 4,
          "dependencies": [
            "express"
          ],
          "exports": [
            "AdminTitlesController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1
        },
        {
          "path": "server/src/domains/admin/sub-domains/subscriptions/subscription.admin.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 1673,
          "lines": 59,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/admin/sub-domains/subscriptions/subscription.admin.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 11085,
          "lines": 407,
          "complexity": 4,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [
            "AdminSubscriptionController",
            "adminSubscriptionController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "server/src/domains/admin/sub-domains/social/social.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 5788,
          "lines": 192,
          "complexity": 3,
          "dependencies": [
            "@db",
            "drizzle-orm",
            "@shared/config/social.config",
            "@shared/config/social.config"
          ],
          "exports": [
            "SocialService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "SocialConfig"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.8
        },
        {
          "path": "server/src/domains/admin/sub-domains/social/social.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 4037,
          "lines": 134,
          "complexity": 1,
          "dependencies": [
            "express",
            "zod"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "server/src/domains/admin/sub-domains/social/social.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 3702,
          "lines": 124,
          "complexity": 3,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "@server/src/core/logger"
          ],
          "exports": [
            "SocialController",
            "socialController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.1
        },
        {
          "path": "server/src/domains/admin/sub-domains/shop/shopCategory.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 1643,
          "lines": 60,
          "complexity": 2,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [
            "ShopCategoryService",
            "shopCategoryService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 34,
              "context": "async update(id: number, data: Partial<CategoryInput>) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 49,
              "context": "async delete(id: number) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 3.5999999999999996
        },
        {
          "path": "server/src/domains/admin/sub-domains/shop/shopCategory.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 859,
          "lines": 42,
          "complexity": 1,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 26,
              "context": "const id = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 35,
              "context": "const id = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "server/src/domains/admin/sub-domains/shop/shop.admin.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 1108,
          "lines": 29,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/admin/sub-domains/shop/shop.admin.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 4632,
          "lines": 143,
          "complexity": 4,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [
            "shopAdminController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.8
        },
        {
          "path": "server/src/domains/admin/sub-domains/shop/rarity.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 1349,
          "lines": 48,
          "complexity": 2,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [
            "RarityService",
            "rarityService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 29,
              "context": "async update(id: number, data: Partial<RarityInput>) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 40,
              "context": "async delete(id: number) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 3.5999999999999996
        },
        {
          "path": "server/src/domains/admin/sub-domains/shop/rarity.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 823,
          "lines": 42,
          "complexity": 1,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 26,
              "context": "const id = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 35,
              "context": "const id = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "server/src/domains/admin/sub-domains/settings/settings.validators.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 3148,
          "lines": 108,
          "complexity": 1,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "UpdateSettingSchema",
            "UpdateSettingsSchema",
            "SettingGroupSchema",
            "CreateSettingSchema",
            "UpdateSettingMetadataSchema",
            "FilterSettingsSchema",
            "UpdateSettingInput",
            "UpdateSettingsInput",
            "SettingGroupInput",
            "CreateSettingInput",
            "UpdateSettingMetadataInput",
            "FilterSettingsInput"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.2
        },
        {
          "path": "server/src/domains/admin/sub-domains/settings/settings.service.refactored.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 7957,
          "lines": 312,
          "complexity": 7,
          "dependencies": [
            "@server/src/core/logger"
          ],
          "exports": [
            "AdminSettingsService",
            "adminSettingsService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "UpdateSettingInput",
              "UpdateSettingsInput",
              "SettingGroupInput",
              "CreateSettingInput",
              "UpdateSettingMetadataInput",
              "FilterSettingsInput"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.4000000000000004
        },
        {
          "path": "server/src/domains/admin/sub-domains/settings/settings.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 1834,
          "lines": 62,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/admin/sub-domains/settings/settings.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 8149,
          "lines": 243,
          "complexity": 8,
          "dependencies": [
            "express",
            "@shared/validators/admin"
          ],
          "exports": [
            "AdminSettingsController",
            "adminSettingsController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 1.6
        },
        {
          "path": "server/src/domains/admin/sub-domains/roles/roles.validators.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 769,
          "lines": 24,
          "complexity": 0,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "baseRoleSchema",
            "createRoleSchema",
            "updateRoleSchema",
            "CreateRoleInput",
            "UpdateRoleInput"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "server/src/domains/admin/sub-domains/roles/roles.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 1161,
          "lines": 38,
          "complexity": 2,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [
            "AdminRolesService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "CreateRoleInput",
              "UpdateRoleInput"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        },
        {
          "path": "server/src/domains/admin/sub-domains/roles/roles.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 851,
          "lines": 28,
          "complexity": 1,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "@lib/auth/canUser.ts"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "server/src/domains/admin/sub-domains/roles/roles.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 3789,
          "lines": 135,
          "complexity": 3,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express"
          ],
          "exports": [
            "AdminRolesController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.6
        },
        {
          "path": "server/src/domains/admin/sub-domains/referrals/referrals.validators.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 1084,
          "lines": 38,
          "complexity": 1,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "createReferralSourceSchema",
            "recordUserReferralSchema",
            "CreateReferralSourceInput",
            "RecordUserReferralInput"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.2
        },
        {
          "path": "server/src/domains/admin/sub-domains/referrals/referrals.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 4329,
          "lines": 176,
          "complexity": 3,
          "dependencies": [
            "drizzle-orm",
            "@schema/system/referralSources",
            "@schema/system/userReferrals",
            "@schema/user/users"
          ],
          "exports": [
            "ReferralsService",
            "referralsService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 57,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7000000000000002
        },
        {
          "path": "server/src/domains/admin/sub-domains/referrals/referrals.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 1585,
          "lines": 66,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "server/src/domains/admin/sub-domains/referrals/referrals.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 2476,
          "lines": 114,
          "complexity": 3,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express"
          ],
          "exports": [
            "ReferralsController",
            "referralsController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.1
        },
        {
          "path": "server/src/domains/admin/sub-domains/reports/reports.validators.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 1494,
          "lines": 41,
          "complexity": 1,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "GetReportsQuerySchema",
            "ReportActionSchema",
            "BanUserSchema",
            "DeleteContentSchema",
            "GetReportsQueryInput",
            "ReportActionInput",
            "BanUserInput",
            "DeleteContentInput"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "server/src/domains/admin/sub-domains/reports/reports.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 12377,
          "lines": 406,
          "complexity": 6,
          "dependencies": [
            "@db",
            "drizzle-orm",
            "@/db/types"
          ],
          "exports": [
            "AdminReportsService",
            "adminReportsService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "GetReportsQueryInput",
              "ReportActionInput",
              "BanUserInput",
              "DeleteContentInput"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.2000000000000002
        },
        {
          "path": "server/src/domains/admin/sub-domains/reports/reports.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 1320,
          "lines": 45,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/admin/sub-domains/reports/reports.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 5982,
          "lines": 187,
          "complexity": 5,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express"
          ],
          "exports": [
            "AdminReportsController",
            "adminReportsController"
          ],
          "idPatterns": [
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 39,
              "context": "const reportId = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 56,
              "context": "const reportId = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 86,
              "context": "const reportId = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/admin/sub-domains/moderator-notes/moderator-notes.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 3816,
          "lines": 148,
          "complexity": 2,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "zod",
            "@db",
            "@schema",
            "drizzle-orm",
            "@server/src/utils/auth",
            "@server/src/core/logger"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 105,
              "context": "const noteId = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "server/src/domains/admin/sub-domains/permissions/permissions.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 7312,
          "lines": 161,
          "complexity": 2,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [
            "AdminPermissionsService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.4
        },
        {
          "path": "server/src/domains/admin/sub-domains/permissions/permissions.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 756,
          "lines": 26,
          "complexity": 1,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "@lib/auth/canUser.ts"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "server/src/domains/admin/sub-domains/permissions/permissions.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 637,
          "lines": 25,
          "complexity": 2,
          "dependencies": [
            "express"
          ],
          "exports": [
            "AdminPermissionsController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9
        },
        {
          "path": "server/src/domains/admin/sub-domains/forumPrefix/forumPrefix.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 2347,
          "lines": 80,
          "complexity": 2,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "@/db/types"
          ],
          "exports": [
            "ForumPrefixService",
            "forumPrefixService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 16,
              "context": "async updatePrefix(id: number, data: UpdatePrefixInput) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 46,
              "context": "async deletePrefix(id: number) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "CategoryId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.8
        },
        {
          "path": "server/src/domains/admin/sub-domains/forum/forum.validators.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 3509,
          "lines": 98,
          "complexity": 1,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "CategorySchema",
            "PrefixSchema",
            "ModerateThreadSchema",
            "TagSchema",
            "PaginationSchema",
            "createEntitySchema",
            "updateEntitySchema",
            "CategoryInput",
            "PrefixInput",
            "TagInput",
            "ModerateThreadInput",
            "PaginationInput"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.2
        },
        {
          "path": "server/src/domains/admin/sub-domains/forum/forum.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 14864,
          "lines": 564,
          "complexity": 10,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [
            "AdminForumService",
            "adminForumService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 57,
              "context": "async getCategoryById(id: number) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 130,
              "context": "async updateCategory(id: number, data: CategoryInput) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 197,
              "context": "async deleteCategory(id: number) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 362,
              "context": "async updateTag(id: number, data: TagInput) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 413,
              "context": "async deleteTag(id: number) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 503,
              "context": "async getEntityById(id: number) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 519,
              "context": "async updateEntity(id: number, data: any) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 532,
              "context": "async deleteEntity(id: number) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "threadId: number",
              "line": 435,
              "context": "async moderateThread(threadId: number, data: ModerateThreadInput) {",
              "suggestedFix": "ThreadId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "CategoryInput",
              "PrefixInput",
              "TagInput",
              "ModerateThreadInput",
              "PaginationInput"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 5.1000000000000005
        },
        {
          "path": "server/src/domains/admin/sub-domains/forum/forum.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 3159,
          "lines": 110,
          "complexity": 1,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 71,
              "context": "const id = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 80,
              "context": "const id = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.10000000000000003
        },
        {
          "path": "server/src/domains/admin/sub-domains/forum/forum.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 11729,
          "lines": 371,
          "complexity": 10,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "@server/src/core/logger"
          ],
          "exports": [
            "AdminForumController",
            "adminForumController"
          ],
          "idPatterns": [
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 42,
              "context": "const categoryId = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 81,
              "context": "const categoryId = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 107,
              "context": "const categoryId = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 197,
              "context": "const tagId = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 217,
              "context": "const tagId = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 235,
              "context": "const threadId = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 286,
              "context": "const entityId = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 324,
              "context": "const entityId = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 352,
              "context": "const entityId = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 2.1
        },
        {
          "path": "server/src/domains/admin/sub-domains/emojis/emojis.validators.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 5026,
          "lines": 155,
          "complexity": 2,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "EmojiBaseSchema",
            "CreateEmojiSchema",
            "UpdateEmojiSchema",
            "ListEmojisQuerySchema",
            "EmojiIdParamSchema",
            "BulkDeleteEmojisSchema",
            "BulkUpdateEmojisSchema"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        },
        {
          "path": "server/src/domains/admin/sub-domains/emojis/emojis.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 11642,
          "lines": 426,
          "complexity": 6,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [
            "ListEmojisOptions",
            "CreateEmojiData",
            "UpdateEmojiData",
            "emojiService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 177,
              "context": "async getById(id: number) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 282,
              "context": "async update(id: number, emojiData: UpdateEmojiData) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 344,
              "context": "async delete(id: number) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 4.5
        },
        {
          "path": "server/src/domains/admin/sub-domains/emojis/emojis.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 1128,
          "lines": 39,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/admin/sub-domains/emojis/emojis.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 9448,
          "lines": 367,
          "complexity": 7,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express"
          ],
          "exports": [
            "getAllEmojis",
            "getEmojiById",
            "createEmoji",
            "updateEmoji",
            "deleteEmoji",
            "bulkDeleteEmojis",
            "getEmojiCategories"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.4000000000000004
        },
        {
          "path": "server/src/domains/admin/sub-domains/email-templates/email-templates.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 13011,
          "lines": 489,
          "complexity": 7,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "marked",
            "zod",
            "@/db/types"
          ],
          "exports": [
            "emailTemplateSchema",
            "CreateEmailTemplateInput",
            "UpdateEmailTemplateInput",
            "EmailTemplateService",
            "emailTemplateService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 175,
              "context": "id: number,",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 241,
              "context": "async deleteTemplate(id: number, adminId: string) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "TemplateId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.6
        },
        {
          "path": "server/src/domains/admin/sub-domains/email-templates/email-templates.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 1706,
          "lines": 55,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [
            "emailTemplateRoutes"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/admin/sub-domains/email-templates/email-templates.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 10515,
          "lines": 360,
          "complexity": 7,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "zod"
          ],
          "exports": [
            "EmailTemplateController",
            "emailTemplateController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.6000000000000003
        },
        {
          "path": "server/src/domains/admin/sub-domains/dgt-packages/dgt-packages.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 1547,
          "lines": 55,
          "complexity": 2,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [
            "DgtPackageService",
            "dgtPackageService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 35,
              "context": "async update(id: number, data: Partial<DgtPackageInput>) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 47,
              "context": "async delete(id: number) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.6
        },
        {
          "path": "server/src/domains/admin/sub-domains/dgt-packages/dgt-packages.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 528,
          "lines": 20,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/admin/sub-domains/dgt-packages/dgt-packages.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 1424,
          "lines": 52,
          "complexity": 2,
          "dependencies": [
            "express"
          ],
          "exports": [
            "listPackages",
            "getPackageById",
            "createPackage",
            "updatePackage",
            "deletePackage"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "server/src/domains/admin/sub-domains/economy/economy.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 391,
          "lines": 12,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/admin/sub-domains/economy/economy.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 1788,
          "lines": 51,
          "complexity": 2,
          "dependencies": [
            "express",
            "@server/src/utils/economy-loader",
            "@shared/economy/economy.config",
            "zod"
          ],
          "exports": [
            "getEconomyConfig",
            "updateEconomyConfig",
            "resetEconomyConfig"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.4
        },
        {
          "path": "server/src/domains/admin/sub-domains/dev/seeding.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 2134,
          "lines": 81,
          "complexity": 1,
          "dependencies": [
            "express",
            "child_process"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "server/src/domains/admin/sub-domains/database/query.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 9728,
          "lines": 419,
          "complexity": 5,
          "dependencies": [
            "@server/src/core/db",
            "@server/src/core/logger",
            "drizzle-orm"
          ],
          "exports": [
            "QueryResult",
            "QueryValidation",
            "QueryHistory",
            "QueryService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 96,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 108,
              "context": "async executeQuery(query: string, userId: number): Promise<QueryResult> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.2
        },
        {
          "path": "server/src/domains/admin/sub-domains/database/query.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 9062,
          "lines": 332,
          "complexity": 5,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "@server/src/core/logger",
            "zod"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2
        },
        {
          "path": "server/src/domains/admin/sub-domains/database/database.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 27975,
          "lines": 1067,
          "complexity": 10,
          "dependencies": [
            "@server/src/core/db",
            "@server/src/core/logger",
            "drizzle-orm",
            "@schema"
          ],
          "exports": [
            "TableInfo",
            "ColumnInfo",
            "TableSchema",
            "ForeignKeyInfo",
            "IndexInfo",
            "ConstraintInfo",
            "TableDataResult",
            "ValidationResult",
            "DatabaseService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.2
        },
        {
          "path": "server/src/domains/admin/sub-domains/database/database.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 2253,
          "lines": 49,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "server/src/domains/admin/sub-domains/database/database.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 13846,
          "lines": 523,
          "complexity": 9,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "@server/src/core/logger",
            "zod"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 2.8
        },
        {
          "path": "server/src/domains/admin/sub-domains/database/bulk-operations.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 9299,
          "lines": 348,
          "complexity": 6,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "@server/src/core/logger",
            "zod",
            "multer",
            "csv-parser",
            "stream"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.2
        },
        {
          "path": "server/src/domains/admin/sub-domains/clout/clout.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 1113,
          "lines": 24,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/admin/sub-domains/clout/clout.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 9224,
          "lines": 316,
          "complexity": 6,
          "dependencies": [
            "express",
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [
            "getAllAchievements",
            "getAchievementById",
            "createAchievement",
            "updateAchievement",
            "deleteAchievement",
            "toggleAchievement",
            "grantClout",
            "getCloutLogs",
            "adjustClout",
            "getCloutAdjustmentLogs"
          ],
          "idPatterns": [
            {
              "type": "conversion",
              "pattern": "Number(req.params.id)",
              "line": 24,
              "context": "const id = Number(req.params.id);",
              "suggestedFix": "remove Number(), use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "Number(req.params.id)",
              "line": 74,
              "context": "const id = Number(req.params.id);",
              "suggestedFix": "remove Number(), use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "Number(req.params.id)",
              "line": 95,
              "context": "const id = Number(req.params.id);",
              "suggestedFix": "remove Number(), use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "Number(req.params.id)",
              "line": 105,
              "context": "const id = Number(req.params.id);",
              "suggestedFix": "remove Number(), use branded type",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 2.6
        },
        {
          "path": "server/src/domains/admin/sub-domains/cache/cache.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 1255,
          "lines": 46,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/admin/sub-domains/cache/cache.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 8154,
          "lines": 306,
          "complexity": 5,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "zod"
          ],
          "exports": [
            "AdminCacheController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2
        },
        {
          "path": "server/src/domains/admin/sub-domains/brand-config/brand.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 2420,
          "lines": 90,
          "complexity": 2,
          "dependencies": [
            "@db_types/brand.types",
            "@schema/admin/brandConfig",
            "@server/src/core/db",
            "drizzle-orm"
          ],
          "exports": [
            "brandService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "RuntimeBrandConfig",
              "BrandConfigUpdate"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 1.4
        },
        {
          "path": "server/src/domains/admin/sub-domains/brand-config/brand.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 544,
          "lines": 18,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/admin/sub-domains/brand-config/brand.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 492,
          "lines": 17,
          "complexity": 1,
          "dependencies": [
            "express"
          ],
          "exports": [
            "brandController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "server/src/domains/admin/sub-domains/backup-restore/schedule.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 16986,
          "lines": 592,
          "complexity": 10,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "zod"
          ],
          "exports": [
            "createScheduleSchema",
            "updateScheduleSchema",
            "listSchedulesSchema",
            "CreateScheduleInput",
            "UpdateScheduleInput",
            "ListSchedulesInput",
            "BackupScheduleService",
            "backupScheduleService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 100,
              "context": "async updateSchedule(id: number, data: UpdateScheduleInput, adminId: string) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 158,
              "context": "async deleteSchedule(id: number, adminId: string) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 255,
              "context": "async getSchedule(id: number) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 298,
              "context": "async triggerSchedule(id: number, adminId: string) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 5.4
        },
        {
          "path": "server/src/domains/admin/sub-domains/backup-restore/restore.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 19244,
          "lines": 664,
          "complexity": 10,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "child_process",
            "fs",
            "crypto",
            "zod",
            "@/db/types"
          ],
          "exports": [
            "createRestoreSchema",
            "listRestoreOperationsSchema",
            "CreateRestoreInput",
            "ListRestoreOperationsInput",
            "RestoreService",
            "restoreService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 634,
              "context": "id: number,",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "BackupId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 5.1
        },
        {
          "path": "server/src/domains/admin/sub-domains/backup-restore/backup.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 18080,
          "lines": 642,
          "complexity": 10,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "child_process",
            "crypto",
            "fs",
            "zlib",
            "stream/promises",
            "path",
            "fs",
            "zod",
            "@/db/types"
          ],
          "exports": [
            "createBackupSchema",
            "listBackupsSchema",
            "CreateBackupInput",
            "ListBackupsInput",
            "BackupService",
            "backupService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 224,
              "context": "async getBackup(id: number) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 255,
              "context": "async deleteBackup(id: number, adminId: string) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 305,
              "context": "getBackupProgress(id: number): BackupProgress | null {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 550,
              "context": "id: number,",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "BackupId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 5.4
        },
        {
          "path": "server/src/domains/admin/sub-domains/backup-restore/backup-restore.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 3624,
          "lines": 129,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [
            "backupRestoreRoutes"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/admin/sub-domains/backup-restore/backup-restore.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 16022,
          "lines": 573,
          "complexity": 10,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "zod"
          ],
          "exports": [
            "BackupRestoreController",
            "backupRestoreController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 2
        },
        {
          "path": "server/src/domains/admin/sub-domains/announcements/index.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 471,
          "lines": 17,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "ORIGINAL_ANNOUNCEMENTS_DEPRECATED",
            "registerAnnouncementRoutes",
            "publicRouter as publicAnnouncementRoutes",
            "adminRouter as adminAnnouncementRoutes",
            "default as createAnnouncementRouter"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/admin/sub-domains/announcements/announcements.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 2081,
          "lines": 61,
          "complexity": 1,
          "dependencies": [
            "express"
          ],
          "exports": [
            "registerAnnouncementRoutes",
            "publicRouter",
            "adminRouter"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "server/src/domains/admin/sub-domains/avatar-frames/avatar-frames.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 3094,
          "lines": 127,
          "complexity": 4,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [
            "avatarFrameService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 31,
              "context": "async getFrameById(id: number) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 61,
              "context": "async updateFrame(id: number, data: UpdateFrameData) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 81,
              "context": "async deleteFrame(id: number) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 111,
              "context": "async getFrameUsageCount(id: number) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 4.2
        },
        {
          "path": "server/src/domains/admin/sub-domains/avatar-frames/avatar-frames.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 729,
          "lines": 26,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/admin/sub-domains/avatar-frames/avatar-frames.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 4671,
          "lines": 163,
          "complexity": 4,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "zod"
          ],
          "exports": [
            "avatarFrameController"
          ],
          "idPatterns": [
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 35,
              "context": "const frameId = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 92,
              "context": "const frameId = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 132,
              "context": "const frameId = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.3000000000000001
        },
        {
          "path": "server/src/domains/admin/sub-domains/animation-packs/animation-packs.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 2528,
          "lines": 85,
          "complexity": 2,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "slugify",
            "@/db/types"
          ],
          "exports": [
            "PackInput",
            "AnimationPackService",
            "animationPackService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 53,
              "context": "async update(id: number, data: PackInput) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 70,
              "context": "async delete(id: number) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "PackId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.6
        },
        {
          "path": "server/src/domains/admin/sub-domains/animation-packs/animation-packs.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 415,
          "lines": 13,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/admin/sub-domains/animation-packs/animation-packs.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 1032,
          "lines": 41,
          "complexity": 2,
          "dependencies": [
            "express"
          ],
          "exports": [
            "listPacks",
            "createPack",
            "updatePack",
            "deletePack"
          ],
          "idPatterns": [
            {
              "type": "conversion",
              "pattern": "Number(req.params.id)",
              "line": 24,
              "context": "const id = Number(req.params.id);",
              "suggestedFix": "remove Number(), use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "Number(req.params.id)",
              "line": 34,
              "context": "const id = Number(req.params.id);",
              "suggestedFix": "remove Number(), use branded type",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.1
        },
        {
          "path": "server/src/domains/admin/sub-domains/analytics/system-analytics.validators.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 4446,
          "lines": 124,
          "complexity": 1,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "timeRangeSchema",
            "granularitySchema",
            "metricTypeSchema",
            "systemMetricsQuerySchema",
            "performanceHeatmapQuerySchema",
            "systemHealthQuerySchema",
            "realtimeAnalyticsQuerySchema",
            "alertThresholdSchema",
            "performanceBaselineSchema",
            "systemReportSchema",
            "cacheOperationSchema",
            "performanceOptimizationSchema",
            "SystemMetricsQuery",
            "PerformanceHeatmapQuery",
            "SystemHealthQuery",
            "RealtimeAnalyticsQuery",
            "AlertThreshold",
            "PerformanceBaseline",
            "SystemReport",
            "CacheOperation"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "server/src/domains/admin/sub-domains/analytics/system-analytics.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 15695,
          "lines": 562,
          "complexity": 4,
          "dependencies": [
            "drizzle-orm",
            "@db",
            "@server/src/domains/admin/shared/admin-cache.service"
          ],
          "exports": [
            "SystemMetrics",
            "PerformanceHeatmap",
            "SystemHealth",
            "SystemAnalyticsService",
            "systemAnalyticsService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.8
        },
        {
          "path": "server/src/domains/admin/sub-domains/analytics/system-analytics.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 10513,
          "lines": 377,
          "complexity": 5,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "@server/src/domains/admin/shared",
            "@server/src/domains/admin/admin.errors",
            "@server/src/domains/admin/shared/admin-cache.service"
          ],
          "exports": [
            "SystemAnalyticsController",
            "systemAnalyticsController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1
        },
        {
          "path": "server/src/domains/admin/sub-domains/analytics/analytics.validators.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 1880,
          "lines": 60,
          "complexity": 1,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "AnalyticsPeriodSchema",
            "AnalyticsGranularitySchema",
            "AnalyticsQuerySchema",
            "AnalyticsPeriodInput",
            "AnalyticsGranularityInput",
            "AnalyticsQueryInput"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "server/src/domains/admin/sub-domains/analytics/analytics.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 5981,
          "lines": 188,
          "complexity": 3,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "date-fns"
          ],
          "exports": [
            "AdminAnalyticsService",
            "adminAnalyticsService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "AnalyticsPeriodInput",
              "AnalyticsQueryInput"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 1.6
        },
        {
          "path": "server/src/domains/admin/sub-domains/analytics/analytics.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 1280,
          "lines": 35,
          "complexity": 0,
          "dependencies": [
            "express",
            "express",
            "@server/src/middleware/validate"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "server/src/domains/admin/sub-domains/analytics/analytics.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 2206,
          "lines": 64,
          "complexity": 3,
          "dependencies": [
            "express"
          ],
          "exports": [
            "AdminAnalyticsController",
            "adminAnalyticsController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.6000000000000001
        },
        {
          "path": "server/src/domains/admin/sub-domains/ui-config/uiThemes.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 2503,
          "lines": 95,
          "complexity": 2,
          "dependencies": [
            "drizzle-orm",
            "@schema/admin/uiThemes",
            "@shared/config/zoneThemes.config"
          ],
          "exports": [
            "UiThemesService",
            "uiThemesService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        },
        {
          "path": "server/src/domains/admin/sub-domains/ui-config/ui-config.validators.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 8220,
          "lines": 299,
          "complexity": 1,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "PaginationSchema",
            "QuoteFiltersSchema",
            "CreateQuoteSchema",
            "UpdateQuoteSchema",
            "ReorderQuotesSchema",
            "CreateCollectionSchema",
            "UpdateCollectionSchema",
            "TrackEventSchema",
            "AnalyticsRequestSchema",
            "BulkQuoteOperationSchema",
            "ImportQuotesSchema",
            "ExportQuotesSchema",
            "validateQuoteType",
            "validateCollectionType",
            "validateEventType",
            "EnhancedCreateQuoteSchema",
            "EnhancedCreateCollectionSchema",
            "EnhancedTrackEventSchema",
            "CreateQuoteRequest",
            "UpdateQuoteRequest"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.2
        },
        {
          "path": "server/src/domains/admin/sub-domains/ui-config/ui-config.types.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 4487,
          "lines": 185,
          "complexity": 0,
          "dependencies": [
            "@schema"
          ],
          "exports": [
            "PaginationOptions",
            "QuoteFilters",
            "QuotesResponse",
            "CreateQuoteRequest",
            "UpdateQuoteRequest",
            "ReorderQuotesRequest",
            "CreateCollectionRequest",
            "UpdateCollectionRequest",
            "QuoteAnalyticsRequest",
            "QuoteAnalyticsResponse",
            "BulkQuoteOperation",
            "ImportQuotesRequest",
            "ExportQuotesRequest",
            "UiConfigService",
            "QuoteDisplayConfig",
            "QuoteContextConfig"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "UiQuote",
              "UiCollection",
              "NewUiQuote",
              "NewUiCollection"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 1
        },
        {
          "path": "server/src/domains/admin/sub-domains/ui-config/ui-config.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 13674,
          "lines": 585,
          "complexity": 9,
          "dependencies": [
            "drizzle-orm",
            "drizzle-orm/node-postgres"
          ],
          "exports": [
            "UiConfigService",
            "uiConfigService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "NodePgDatabase"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.8
        },
        {
          "path": "server/src/domains/admin/sub-domains/ui-config/ui-config.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 4124,
          "lines": 172,
          "complexity": 1,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "server/src/domains/admin/sub-domains/ui-config/ui-config.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 13054,
          "lines": 470,
          "complexity": 10,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express"
          ],
          "exports": [
            "UiConfigController",
            "uiConfigController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 3
        },
        {
          "path": "server/src/domains/admin/sub-domains/airdrop/airdrop.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 5478,
          "lines": 179,
          "complexity": 4,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "uuid",
            "@/db/types"
          ],
          "exports": [
            "AirdropAdminService",
            "airdropAdminService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "server/src/domains/admin/sub-domains/airdrop/airdrop.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 501,
          "lines": 14,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/admin/sub-domains/airdrop/airdrop.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 1948,
          "lines": 56,
          "complexity": 2,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "zod"
          ],
          "exports": [
            "executeAirdrop",
            "getAirdropHistory"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        },
        {
          "path": "server/src/domains/admin/sub-domains/settings/services/settings-validation.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "services",
          "size": 9270,
          "lines": 374,
          "complexity": 7,
          "dependencies": [
            "@server/src/core/logger"
          ],
          "exports": [
            "SettingsValidationService",
            "settingsValidationService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "CreateSettingInput",
              "UpdateSettingMetadataInput"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.9000000000000004
        },
        {
          "path": "server/src/domains/admin/sub-domains/settings/services/settings-query.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "services",
          "size": 6016,
          "lines": 233,
          "complexity": 5,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "@server/src/core/logger"
          ],
          "exports": [
            "SettingsQueryService",
            "settingsQueryService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "FilterSettingsInput"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1
        },
        {
          "path": "server/src/domains/admin/sub-domains/settings/services/settings-group.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "services",
          "size": 8664,
          "lines": 326,
          "complexity": 5,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "@server/src/core/logger"
          ],
          "exports": [
            "SettingsGroupService",
            "settingsGroupService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "SettingGroupInput"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1
        },
        {
          "path": "server/src/domains/admin/sub-domains/settings/services/settings-command.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "services",
          "size": 8940,
          "lines": 329,
          "complexity": 6,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "@server/src/core/logger"
          ],
          "exports": [
            "ToggleFeatureFlagInput",
            "SettingsCommandService",
            "settingsCommandService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "UpdateSettingInput",
              "UpdateSettingsInput",
              "CreateSettingInput",
              "UpdateSettingMetadataInput"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.2
        },
        {
          "path": "server/src/domains/admin/sub-domains/settings/services/index.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "services",
          "size": 1509,
          "lines": 44,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "SettingsQueryService",
            "settingsQueryService",
            "SettingsCommandService",
            "settingsCommandService",
            "SettingsValidationService",
            "settingsValidationService",
            "SettingsGroupService",
            "settingsGroupService",
            "AdminSettingsService",
            "adminSettingsService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/admin/sub-domains/announcements/services/announcements.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "services",
          "size": 4358,
          "lines": 154,
          "complexity": 4,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "@schema"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 105,
              "context": "export async function getAnnouncementById(id: number) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 123,
              "context": "export async function updateAnnouncement(id: number, updateData: any) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 142,
              "context": "export async function deactivateAnnouncement(id: number) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 4.1
        },
        {
          "path": "server/src/domains/admin/sub-domains/announcements/controllers/announcements.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 4563,
          "lines": 150,
          "complexity": 6,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "zod",
            "@schema"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 57,
              "context": "const id = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 106,
              "context": "const id = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 133,
              "context": "const id = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 1.7
        },
        {
          "path": "server/src/domains/admin/sub-domains/analytics/services/platformStats.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "services",
          "size": 4447,
          "lines": 186,
          "complexity": 3,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [
            "PlatformStatsService",
            "platformStatsService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.6000000000000001
        },
        {
          "path": "server/src/domains/admin/sub-domains/analytics/routes/stats.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 2546,
          "lines": 103,
          "complexity": 2,
          "dependencies": [
            "express",
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        },
        {
          "path": "server/src/domains/admin/sub-domains/analytics/engagement/tipping-analytics.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 7631,
          "lines": 264,
          "complexity": 2,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "date-fns"
          ],
          "exports": [
            "TippingAnalytics",
            "tippingAnalyticsService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 29,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 38,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.8
        },
        {
          "path": "server/src/domains/admin/sub-domains/analytics/engagement/tipping-analytics.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 535,
          "lines": 20,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/admin/sub-domains/analytics/engagement/tipping-analytics.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 1509,
          "lines": 50,
          "complexity": 2,
          "dependencies": [
            "express"
          ],
          "exports": [
            "tippingAnalyticsController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.10000000000000003
        },
        {
          "path": "server/src/domains/admin/sub-domains/analytics/engagement/rain-analytics.service.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 4951,
          "lines": 169,
          "complexity": 1,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "date-fns"
          ],
          "exports": [
            "RainEventAnalytics",
            "rainAnalyticsService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 29,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.3
        },
        {
          "path": "server/src/domains/admin/sub-domains/analytics/engagement/rain-analytics.routes.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 517,
          "lines": 20,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/admin/sub-domains/analytics/engagement/rain-analytics.controller.ts",
          "domain": "admin",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 1470,
          "lines": 50,
          "complexity": 2,
          "dependencies": [
            "express"
          ],
          "exports": [
            "rainAnalyticsController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.10000000000000003
        }
      ],
      "totalIssues": 86,
      "avgComplexity": 3.0476190476190474,
      "migrationEffort": 194.49999999999994,
      "dependencies": [
        "@db",
        "@schema",
        "@/db/types",
        "@server/src/core/logger",
        "@server/src/core/services/user.service",
        "@server/src/core/db",
        "@/domains/admin/shared",
        "@shared/validators/admin",
        "@server/src/middleware/validate",
        "@shared/utils/id",
        "@lib/auth/canUser.ts",
        "@shared/config/social.config",
        "@schema/system/referralSources",
        "@schema/system/userReferrals",
        "@schema/user/users",
        "@server/src/utils/auth",
        "@server/src/utils/economy-loader",
        "@shared/economy/economy.config",
        "@db_types/brand.types",
        "@schema/admin/brandConfig",
        "@server/src/domains/admin/shared/admin-cache.service",
        "@server/src/domains/admin/shared",
        "@server/src/domains/admin/admin.errors",
        "@schema/admin/uiThemes",
        "@shared/config/zoneThemes.config"
      ],
      "dependents": [
        "moderation",
        "gamification",
        "user-management",
        "cosmetics",
        "forum-core",
        "economy",
        "other",
        "shoutbox",
        "collectibles"
      ],
      "criticalPath": true,
      "riskAssessment": {
        "runtime": "high",
        "testing": "high",
        "integration": "high"
      },
      "migrationStrategy": {
        "priority": 1,
        "approach": "incremental",
        "estimatedDays": 39,
        "blockers": [
          "Dependencies from: moderation, gamification, user-management, cosmetics, forum-core, economy, other, shoutbox, collectibles"
        ],
        "prerequisites": []
      }
    },
    {
      "name": "moderation",
      "files": [
        {
          "path": "shared/validators/admin.ts",
          "domain": "moderation",
          "layer": "other",
          "size": 4711,
          "lines": 172,
          "complexity": 1,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "AdminPaginationQuery",
            "AdminUserUpdateSchema",
            "AdminCategoryUpdateSchema",
            "AdminThreadPrefixUpdateSchema",
            "AdminFeatureFlagUpdateSchema",
            "AdminUserBody",
            "AdminUserGroupBody",
            "AdminPaginatedResponse",
            "ToggleFeatureFlagSchema",
            "RoleCreateInput",
            "RoleUpdateInput",
            "BulkUserRoleAssignment",
            "TitleCreateInput",
            "PermissionUpdateInput",
            "XpActionCreateSchema",
            "XpActionCreateInput",
            "XpActionUpdateSchema",
            "XpActionUpdateInput",
            "PermissionGroupCreateSchema",
            "PermissionGroupCreateInput"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "shared/lib/admin-module-registry.ts",
          "domain": "moderation",
          "layer": "utils",
          "size": 7861,
          "lines": 316,
          "complexity": 5,
          "dependencies": [],
          "exports": [
            "ModuleRegistryOptions",
            "AdminModuleRegistry",
            "adminModuleRegistry"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "shared/config/admin.config.ts",
          "domain": "moderation",
          "layer": "other",
          "size": 15231,
          "lines": 604,
          "complexity": 4,
          "dependencies": [
            "react",
            "react"
          ],
          "exports": [
            "ModuleSettings",
            "AdminModule",
            "AdminConfig",
            "ADMIN_PERMISSIONS",
            "AdminPermission",
            "adminConfig",
            "getAdminModuleById",
            "getAllAdminModules",
            "AdminModuleV2",
            "adminModulesV2",
            "generateSidebarLinks",
            "generateAdminRouteGroups",
            "permissionToModuleMap"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ComponentType",
              "LazyExoticComponent"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.3
        },
        {
          "path": "scripts/refactor/rbac-codemod.ts",
          "domain": "moderation",
          "layer": "other",
          "size": 2902,
          "lines": 77,
          "complexity": 2,
          "dependencies": [
            "@db/types",
            "ts-morph",
            "fast-glob",
            "fs",
            "path"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "scripts/refactor/fix-broken-admin-imports.ts",
          "domain": "moderation",
          "layer": "other",
          "size": 8068,
          "lines": 131,
          "complexity": 2,
          "dependencies": [
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "HeatEventId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "scripts/refactor/fix-admin-double-layout.ts",
          "domain": "moderation",
          "layer": "other",
          "size": 2787,
          "lines": 88,
          "complexity": 2,
          "dependencies": [
            "fs/promises",
            "path",
            "glob"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9
        },
        {
          "path": "scripts/admin/validate-admin-controllers.ts",
          "domain": "moderation",
          "subdomain": "validate-admin-controllers.ts",
          "layer": "other",
          "size": 5819,
          "lines": 190,
          "complexity": 4,
          "dependencies": [
            "@db/types",
            "fs",
            "path"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "scripts/admin/query-performance-audit.ts",
          "domain": "moderation",
          "subdomain": "query-performance-audit.ts",
          "layer": "other",
          "size": 13660,
          "lines": 370,
          "complexity": 3,
          "dependencies": [
            "@db/types",
            "fs",
            "path"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.6000000000000001
        },
        {
          "path": "lib/moderation/applyModerationAction.ts",
          "domain": "moderation",
          "subdomain": "applyModerationAction.ts",
          "layer": "other",
          "size": 1464,
          "lines": 64,
          "complexity": 1,
          "dependencies": [
            "@server/src/lib/db",
            "drizzle-orm",
            "@schema"
          ],
          "exports": [
            "VisibilityStatus"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "tests/e2e/reports/test-analytics-reporter.ts",
          "domain": "moderation",
          "subdomain": "test-analytics-reporter.ts",
          "layer": "other",
          "size": 21984,
          "lines": 709,
          "complexity": 10,
          "dependencies": [
            "@playwright/test/reporter",
            "fs",
            "path"
          ],
          "exports": [
            "TestAnalytics",
            "UserJourneyMetric",
            "CrossDomainMetric",
            "PerformanceMetric",
            "ValidationResult",
            "ConsistencyResult",
            "IntegrityResult",
            "FailurePattern",
            "TestAnalyticsReporter"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 3.5
        },
        {
          "path": "shared/lib/moderation/applyModerationAction.ts",
          "domain": "moderation",
          "subdomain": "applyModerationAction.ts",
          "layer": "utils",
          "size": 1567,
          "lines": 66,
          "complexity": 1,
          "dependencies": [
            "@db/types",
            "@server/src/lib/db",
            "drizzle-orm",
            "@schema",
            "@/db/types"
          ],
          "exports": [
            "VisibilityStatus"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "db/schema/admin/uiThemes.ts",
          "domain": "moderation",
          "subdomain": "uiThemes.ts",
          "layer": "other",
          "size": 2321,
          "lines": 74,
          "complexity": 2,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "uiThemes",
            "UiTheme",
            "NewUiTheme"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        },
        {
          "path": "db/schema/admin/uiConfig.ts",
          "domain": "moderation",
          "subdomain": "uiConfig.ts",
          "layer": "other",
          "size": 4559,
          "lines": 124,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm/pg-core"
          ],
          "exports": [
            "uiQuotes",
            "uiCollections",
            "uiCollectionQuotes",
            "uiAnalytics",
            "UiQuote",
            "NewUiQuote",
            "UiCollection",
            "NewUiCollection",
            "UiCollectionQuote",
            "NewUiCollectionQuote",
            "UiAnalytic",
            "NewUiAnalytic"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "db/schema/admin/themes.ts",
          "domain": "moderation",
          "subdomain": "themes.ts",
          "layer": "other",
          "size": 957,
          "lines": 32,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "adminThemes",
            "AdminTheme"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/admin/templates.ts",
          "domain": "moderation",
          "subdomain": "templates.ts",
          "layer": "other",
          "size": 1034,
          "lines": 23,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "siteTemplates",
            "SiteTemplate"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/admin/shoutboxConfig.ts",
          "domain": "moderation",
          "subdomain": "shoutboxConfig.ts",
          "layer": "other",
          "size": 9528,
          "lines": 263,
          "complexity": 1,
          "dependencies": [
            "@paralleldrive/cuid2",
            "drizzle-orm"
          ],
          "exports": [
            "shoutboxConfig",
            "shoutboxBannedWords",
            "shoutboxUserIgnores",
            "shoutboxEmojiPermissions",
            "shoutboxAnalytics",
            "ShoutboxConfig",
            "NewShoutboxConfig",
            "ShoutboxBannedWord",
            "ShoutboxUserIgnore",
            "ShoutboxEmojiPermission",
            "ShoutboxAnalyticsEvent"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "db/schema/admin/seoMetadata.ts",
          "domain": "moderation",
          "subdomain": "seoMetadata.ts",
          "layer": "other",
          "size": 1012,
          "lines": 22,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "seoMetadata",
            "SeoMetadata"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/admin/scheduledTasks.ts",
          "domain": "moderation",
          "subdomain": "scheduledTasks.ts",
          "layer": "other",
          "size": 1300,
          "lines": 35,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "scheduledTasks",
            "ScheduledTask"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/admin/reports.ts",
          "domain": "moderation",
          "subdomain": "reports.ts",
          "layer": "other",
          "size": 1232,
          "lines": 25,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "reportedContent",
            "ReportedContent"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/admin/moderator-notes.ts",
          "domain": "moderation",
          "subdomain": "moderator-notes.ts",
          "layer": "other",
          "size": 1097,
          "lines": 37,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core"
          ],
          "exports": [
            "moderatorNoteTypeEnum",
            "moderatorNotes",
            "selectModeratorNoteSchema",
            "insertModeratorNoteSchema"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/admin/moderationActions.ts",
          "domain": "moderation",
          "subdomain": "moderationActions.ts",
          "layer": "other",
          "size": 1119,
          "lines": 31,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "contentModerationActions",
            "ContentModerationAction"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/admin/mediaLibrary.ts",
          "domain": "moderation",
          "subdomain": "mediaLibrary.ts",
          "layer": "other",
          "size": 1908,
          "lines": 50,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "mediaLibrary",
            "MediaLibrary"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "db/schema/admin/featureFlags.ts",
          "domain": "moderation",
          "subdomain": "featureFlags.ts",
          "layer": "other",
          "size": 1771,
          "lines": 41,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "featureFlags",
            "FeatureFlag"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "db/schema/admin/emailTemplates.ts",
          "domain": "moderation",
          "subdomain": "emailTemplates.ts",
          "layer": "other",
          "size": 3410,
          "lines": 95,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "emailTemplates",
            "emailTemplateVersions",
            "emailTemplateLogs",
            "EmailTemplate",
            "NewEmailTemplate",
            "EmailTemplateVersion",
            "EmailTemplateLog"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/admin/brandConfig.ts",
          "domain": "moderation",
          "subdomain": "brandConfig.ts",
          "layer": "other",
          "size": 1600,
          "lines": 46,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core"
          ],
          "exports": [
            "brandConfigurations",
            "BrandConfiguration",
            "NewBrandConfiguration"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/admin/backups.ts",
          "domain": "moderation",
          "subdomain": "backups.ts",
          "layer": "other",
          "size": 10424,
          "lines": 245,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "adminBackups",
            "backupSchedules",
            "restoreOperations",
            "backupSettings",
            "AdminBackup",
            "NewAdminBackup",
            "BackupSchedule",
            "NewBackupSchedule",
            "RestoreOperation",
            "NewRestoreOperation",
            "BackupSettings",
            "NewBackupSettings"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "db/schema/admin/auditLogs.ts",
          "domain": "moderation",
          "subdomain": "auditLogs.ts",
          "layer": "other",
          "size": 1570,
          "lines": 42,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "auditLogs",
            "AuditLog"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "db/schema/admin/announcements.ts",
          "domain": "moderation",
          "subdomain": "announcements.ts",
          "layer": "other",
          "size": 2047,
          "lines": 59,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm",
            "drizzle-zod",
            "zod"
          ],
          "exports": [
            "announcements",
            "insertAnnouncementSchema",
            "Announcement",
            "InsertAnnouncement"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "client/src/types/admin.types.ts",
          "domain": "moderation",
          "layer": "types",
          "size": 3786,
          "lines": 189,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "User",
            "UserFormData",
            "Role",
            "Permission",
            "EconomyConfig",
            "LevelData",
            "LevelUnlocks",
            "Achievement",
            "AchievementRequirement",
            "AchievementReward",
            "AdminApiResponse",
            "AdminModule",
            "ModuleSettings",
            "BulkOperationRequest",
            "BulkOperationResult",
            "AdminActivityLog"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 82,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 2.8
        },
        {
          "path": "client/src/lib/roles.ts",
          "domain": "moderation",
          "layer": "utils",
          "size": 1608,
          "lines": 59,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "Role",
            "roleHierarchy",
            "hasRoleAtLeast",
            "isRole",
            "canModerateShoutbox",
            "canAccessAdminPanel",
            "isAdmin",
            "isSuperAdmin",
            "isModerator",
            "isAdminOrModerator",
            "getUserPermissions",
            "hasRoleOrHigher"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "client/src/lib/adminApi.ts",
          "domain": "moderation",
          "layer": "utils",
          "size": 1185,
          "lines": 42,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "AdminApi",
            "adminApi"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/lib/admin-vault-service.ts",
          "domain": "moderation",
          "layer": "utils",
          "size": 7988,
          "lines": 295,
          "complexity": 7,
          "dependencies": [],
          "exports": [
            "MockVaultAdminService",
            "vaultAdminService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ItemCategory",
              "ItemRarity",
              "UnlockMethod",
              "SeasonType",
              "VaultEvent",
              "AdminActionLog",
              "ItemHistory",
              "VaultAdminService"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9000000000000001
        },
        {
          "path": "client/src/lib/admin-utils.ts",
          "domain": "moderation",
          "layer": "utils",
          "size": 2154,
          "lines": 93,
          "complexity": 1,
          "dependencies": [
            "@shared/config/admin.config"
          ],
          "exports": [
            "AdminStatusType",
            "StatusPalette",
            "getStatusPalette",
            "getModuleStatus",
            "getModuleStatusInfo"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "AdminModule"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/lib/admin-route.tsx",
          "domain": "moderation",
          "layer": "utils",
          "size": 1747,
          "lines": 56,
          "complexity": 2,
          "dependencies": [
            "wouter",
            "@/hooks/use-auth",
            "lucide-react"
          ],
          "exports": [
            "AdminRoute"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/hooks/use-purchase-modal.tsx",
          "domain": "moderation",
          "layer": "hooks",
          "size": 3748,
          "lines": 145,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/lib/queryClient",
            "@/hooks/use-auth"
          ],
          "exports": [
            "PurchaseModalProvider",
            "usePurchaseModal"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ShopItem"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/hooks/use-admin-modules.ts",
          "domain": "moderation",
          "layer": "hooks",
          "size": 3845,
          "lines": 145,
          "complexity": 3,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@shared/lib/admin-module-registry",
            "@/hooks/use-auth",
            "@shared/config/admin.config"
          ],
          "exports": [
            "UseAdminModulesReturn",
            "useAdminModules",
            "useAdminPermission",
            "useAdminModule",
            "useAdminNavigation"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "AdminModule"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.1
        },
        {
          "path": "client/src/contexts/AdminSidebarContext.tsx",
          "domain": "moderation",
          "layer": "other",
          "size": 1596,
          "lines": 58,
          "complexity": 1,
          "dependencies": [
            "react",
            "react"
          ],
          "exports": [
            "AdminSidebarProvider",
            "useAdminSidebar"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ReactNode"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/__tests__/admin-modules.test.ts",
          "domain": "moderation",
          "layer": "other",
          "size": 10853,
          "lines": 356,
          "complexity": 1,
          "dependencies": [
            "vitest",
            "@shared/lib/admin-module-registry",
            "@shared/config/admin.config"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.8999999999999999
        },
        {
          "path": "archive/legacy/codemods/wrap-with-asyncHandler.ts",
          "domain": "moderation",
          "subdomain": "wrap-with-asyncHandler.ts",
          "layer": "other",
          "size": 6332,
          "lines": 126,
          "complexity": 2,
          "dependencies": [
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "HeatEventId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.0999999999999999
        },
        {
          "path": "archive/legacy/codemods/update-schema-to-uuid.ts",
          "domain": "moderation",
          "subdomain": "update-schema-to-uuid.ts",
          "layer": "other",
          "size": 7095,
          "lines": 208,
          "complexity": 5,
          "dependencies": [
            "ts-morph",
            "node:path",
            "node:fs",
            "node:url",
            "minimist"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.2
        },
        {
          "path": "archive/legacy/codemods/replace-degentalk-case.ts",
          "domain": "moderation",
          "subdomain": "replace-degentalk-case.ts",
          "layer": "other",
          "size": 2173,
          "lines": 69,
          "complexity": 2,
          "dependencies": [
            "@db/types",
            "fs/promises",
            "path",
            "url",
            "fast-glob"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "archive/legacy/codemods/generate-id-codemod-plan.ts",
          "domain": "moderation",
          "subdomain": "generate-id-codemod-plan.ts",
          "layer": "other",
          "size": 1361,
          "lines": 43,
          "complexity": 1,
          "dependencies": [
            "@db/types",
            "node:fs",
            "node:path",
            "chalk",
            "node:url"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "archive/legacy/codemods/fix-typescript-uuid-types.ts",
          "domain": "moderation",
          "subdomain": "fix-typescript-uuid-types.ts",
          "layer": "other",
          "size": 13230,
          "lines": 426,
          "complexity": 8,
          "dependencies": [
            "ts-morph",
            "fs/promises",
            "path"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 129,
              "context": "// Handle patterns like userId: number, threadId?: number",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 1.9000000000000001
        },
        {
          "path": "archive/legacy/codemods/fix-typescript-uuid-types-safe.ts",
          "domain": "moderation",
          "subdomain": "fix-typescript-uuid-types-safe.ts",
          "layer": "other",
          "size": 8444,
          "lines": 295,
          "complexity": 5,
          "dependencies": [
            "ts-morph",
            "fs",
            "path",
            "minimist"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.2
        },
        {
          "path": "archive/legacy/codemods/apply-id-codemod.ts",
          "domain": "moderation",
          "subdomain": "apply-id-codemod.ts",
          "layer": "other",
          "size": 9226,
          "lines": 146,
          "complexity": 2,
          "dependencies": [
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "HeatEventId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "archive/legacy/codemods/apply-id-codemod-tsmorph.ts",
          "domain": "moderation",
          "subdomain": "apply-id-codemod-tsmorph.ts",
          "layer": "other",
          "size": 5059,
          "lines": 146,
          "complexity": 3,
          "dependencies": [
            "ts-morph",
            "node:path",
            "node:fs",
            "node:url",
            "minimist",
            "ts-morph"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "ImportDeclarationStructure"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.3
        },
        {
          "path": "client/src/pages/mod/shoutbox.tsx",
          "domain": "moderation",
          "subdomain": "shoutbox.tsx",
          "layer": "pages",
          "size": 152,
          "lines": 6,
          "complexity": 0,
          "dependencies": [
            "react"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/pages/mod/reports.tsx",
          "domain": "moderation",
          "subdomain": "reports.tsx",
          "layer": "pages",
          "size": 21265,
          "lines": 685,
          "complexity": 3,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/avatar",
            "@/components/ui/tabs",
            "@/components/ui/input",
            "@/components/ui/label",
            "@/components/ui/textarea",
            "@/components/ui/checkbox",
            "@/components/ui/separator",
            "@/components/ui/alert",
            "sonner",
            "@/lib/queryClient",
            "@/types/core.types",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 59,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 126,
              "context": "async getReport(id: number) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 133,
              "context": "async resolveReport(id: number, data: { action: string; reason?: string; banDuration?: string }) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 141,
              "context": "async dismissReport(id: number, reason: string) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 196,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 212,
              "context": "mutationFn: ({ id, reason }: { id: number; reason: string }) =>",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ApiErrorData"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 3.7
        },
        {
          "path": "client/src/pages/mod/index.tsx",
          "domain": "moderation",
          "subdomain": "index.tsx",
          "layer": "pages",
          "size": 11600,
          "lines": 358,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/tabs",
            "@/components/ui/badge",
            "@/components/ui/avatar"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/pages/mod/activity.tsx",
          "domain": "moderation",
          "subdomain": "activity.tsx",
          "layer": "pages",
          "size": 19141,
          "lines": 609,
          "complexity": 3,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/avatar",
            "@/components/ui/input",
            "@/components/ui/label",
            "@/components/ui/separator",
            "@/components/ui/alert",
            "sonner",
            "@/lib/queryClient",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 54,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 153,
              "context": "async getActivityDetails(id: number) {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ReportId",
              "ContentId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.3
        },
        {
          "path": "client/src/pages/admin/ui-config.tsx",
          "domain": "moderation",
          "subdomain": "ui-config.tsx",
          "layer": "pages",
          "size": 19511,
          "lines": 749,
          "complexity": 3,
          "dependencies": [
            "react",
            "@/hooks/use-toast",
            "@/components/admin/protected-admin-route",
            "@/hooks/use-admin-modules",
            "@/components/admin/VisualJsonTabs",
            "@/hooks/useJsonConfig",
            "@/schemas/uiQuotes.schema"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.6000000000000001
        },
        {
          "path": "client/src/pages/admin/treasury.tsx",
          "domain": "moderation",
          "subdomain": "treasury.tsx",
          "layer": "pages",
          "size": 22101,
          "lines": 670,
          "complexity": 4,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "lucide-react",
            "@/hooks/use-toast",
            "@/lib/queryClient",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/label",
            "@/components/ui/tabs",
            "@/types/wallet",
            "@/components/admin/layout/AdminPageShell",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 44,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 45,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": true,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "Transaction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/pages/admin/tags.tsx",
          "domain": "moderation",
          "subdomain": "tags.tsx",
          "layer": "pages",
          "size": 16547,
          "lines": 560,
          "complexity": 3,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/components/ui/card",
            "@/components/ui/input",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/textarea",
            "lucide-react",
            "@hookform/resolvers/zod",
            "react-hook-form",
            "zod",
            "@/types/compat/forum",
            "@/components/ui/alert",
            "@/components/admin/layout/AdminPageShell"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 122,
              "context": "mutationFn: async (data: z.infer<typeof tagSchema> & { id: number }) => {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 147,
              "context": "mutationFn: async (id: number) => {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "ForumTag"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 3.8
        },
        {
          "path": "client/src/pages/admin/system-analytics.tsx",
          "domain": "moderation",
          "subdomain": "system-analytics.tsx",
          "layer": "pages",
          "size": 12328,
          "lines": 385,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/admin/layout/AdminPageShell",
            "@/components/ui/card",
            "@/components/ui/tabs",
            "@/components/ui/badge",
            "@/components/ui/button",
            "@/components/ui/skeleton",
            "@/components/ui/alert",
            "@/features/admin/components/analytics/SystemOverviewCard",
            "@/features/admin/components/analytics/SystemHealthCard",
            "@/features/admin/components/analytics/RealtimeMetricsCard",
            "@/features/admin/components/analytics/CacheAnalyticsCard",
            "@/features/admin/components/analytics/PerformanceHeatmapCard",
            "@/features/admin/components/analytics/DatabaseStatsCard",
            "@/features/admin/components/analytics/APIMetricsCard",
            "@/features/admin/components/analytics/SystemAlertsCard"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/pages/admin/social-config.tsx",
          "domain": "moderation",
          "subdomain": "social-config.tsx",
          "layer": "pages",
          "size": 34329,
          "lines": 1095,
          "complexity": 3,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/label",
            "@/components/ui/switch",
            "@/components/ui/tabs",
            "@/components/ui/badge",
            "@/components/ui/separator",
            "@/hooks/use-toast",
            "@/components/ui/checkbox",
            "@/config/social.config"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "SocialConfig"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.1
        },
        {
          "path": "client/src/pages/admin/shoutbox.tsx",
          "domain": "moderation",
          "subdomain": "shoutbox.tsx",
          "layer": "pages",
          "size": 23597,
          "lines": 729,
          "complexity": 4,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "react-hot-toast",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 68,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "RoomId",
              "GroupId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 4.4
        },
        {
          "path": "client/src/pages/admin/roles.tsx",
          "domain": "moderation",
          "subdomain": "roles.tsx",
          "layer": "pages",
          "size": 5950,
          "lines": 194,
          "complexity": 2,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/components/auth",
            "@hookform/resolvers/zod",
            "react-hook-form",
            "@/hooks/use-toast",
            "@/lib/queryClient",
            "@/hooks/useCrudMutation",
            "lucide-react",
            "@/components/admin/layout/AdminPageShell",
            "@/components/admin/common/AdminDataTable",
            "@/components/admin/forms/roles/RoleFormDialog",
            "@/components/admin/forms/roles/RoleFormDialog",
            "@/components/ui/button",
            "@/components/ui/card"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 21,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "RoleFormValues"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.5
        },
        {
          "path": "client/src/pages/admin/prefixes.tsx",
          "domain": "moderation",
          "subdomain": "prefixes.tsx",
          "layer": "pages",
          "size": 24160,
          "lines": 742,
          "complexity": 3,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/components/ui/card",
            "@/components/ui/input",
            "@/components/ui/button",
            "@/components/ui/switch",
            "@/components/ui/badge",
            "lucide-react",
            "@hookform/resolvers/zod",
            "react-hook-form",
            "zod",
            "@/types/compat/forum",
            "@/components/admin/layout/AdminPageShell"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 156,
              "context": "mutationFn: async (data: z.infer<typeof prefixSchema> & { id: number }) => {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 181,
              "context": "mutationFn: async (id: number) => {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 201,
              "context": "mutationFn: async ({ id, direction }: { id: number; direction: 'up' | 'down' }) => {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 237,
              "context": "const handleReorderPrefix = (id: number, direction: 'up' | 'down') => {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "ThreadPrefix"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 3
        },
        {
          "path": "client/src/pages/admin/live-database.tsx",
          "domain": "moderation",
          "subdomain": "live-database.tsx",
          "layer": "pages",
          "size": 26944,
          "lines": 902,
          "complexity": 5,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/components/admin/layout/AdminPageShell",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/input",
            "sonner",
            "@/lib/utils"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2
        },
        {
          "path": "client/src/pages/admin/index.tsx",
          "domain": "moderation",
          "subdomain": "index.tsx",
          "layer": "pages",
          "size": 486,
          "lines": 21,
          "complexity": 1,
          "dependencies": [
            "@/components/admin/AdminDashboard",
            "@/components/auth"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/pages/admin/feature-flags.tsx",
          "domain": "moderation",
          "subdomain": "feature-flags.tsx",
          "layer": "pages",
          "size": 4678,
          "lines": 150,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/card",
            "@/components/ui/table",
            "lucide-react",
            "@/components/admin/protected-admin-route",
            "@/hooks/use-admin-modules",
            "@/components/admin/VisualJsonTabs",
            "@/hooks/useJsonConfig",
            "@/components/admin/form-controls",
            "@/components/ui/slider",
            "@/components/ui/input"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "client/src/pages/admin/emojis.tsx",
          "domain": "moderation",
          "subdomain": "emojis.tsx",
          "layer": "pages",
          "size": 25704,
          "lines": 841,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/components/ui/card",
            "@/components/ui/tabs",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/switch",
            "@hookform/resolvers/zod",
            "react-hook-form",
            "zod",
            "lucide-react",
            "@/hooks/use-toast",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/components/admin/layout/AdminPageShell",
            "@/components/admin/media/MediaLibraryModal",
            "@/features/admin/services/media-api.service",
            "@/components/media/MediaAsset"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 68,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 141,
              "context": "mutationFn: ({ id, emoji }: { id: number; emoji: EmojiFormValues }) =>",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 174,
              "context": "mutationFn: (id: number) =>",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 3.7
        },
        {
          "path": "client/src/pages/admin/database-config.tsx",
          "domain": "moderation",
          "subdomain": "database-config.tsx",
          "layer": "pages",
          "size": 15836,
          "lines": 482,
          "complexity": 3,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "lucide-react",
            "@/components/auth",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/label",
            "@/components/ui/tabs",
            "@/components/ui/badge",
            "@/components/ui/alert",
            "@/components/ui/separator",
            "@/components/admin/layout/AdminPageShell",
            "sonner"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.6000000000000001
        },
        {
          "path": "client/src/pages/admin/categories.tsx",
          "domain": "moderation",
          "subdomain": "categories.tsx",
          "layer": "pages",
          "size": 25821,
          "lines": 819,
          "complexity": 3,
          "dependencies": [
            "react",
            "@/lib/format-date",
            "@tanstack/react-query",
            "@/components/ui/input",
            "@/components/ui/button",
            "@/components/ui/switch",
            "@/components/ui/label",
            "@/components/ui/textarea",
            "react-hook-form",
            "@hookform/resolvers/zod",
            "zod",
            "@/components/ui/badge",
            "wouter",
            "@/components/admin/layout/AdminPageShell",
            "@/lib/api-request"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 89,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 146,
              "context": "mutationFn: async (data: z.infer<typeof categorySchema> & { id: number }) => {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 161,
              "context": "mutationFn: async (id: number) => {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 175,
              "context": "mutationFn: async ({ id, direction }: { id: number; direction: 'up' | 'down' }) => {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 206,
              "context": "const handleReorderCategory = (id: number, direction: 'up' | 'down') => {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 4.1
        },
        {
          "path": "client/src/pages/admin/brand-config.tsx",
          "domain": "moderation",
          "subdomain": "brand-config.tsx",
          "layer": "pages",
          "size": 1185,
          "lines": 40,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui",
            "@/components/admin/VisualJsonTabs",
            "@/hooks/useJsonConfig",
            "@/schemas/brand.schema"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "client/src/pages/admin/airdrop.tsx",
          "domain": "moderation",
          "subdomain": "airdrop.tsx",
          "layer": "pages",
          "size": 6215,
          "lines": 215,
          "complexity": 1,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/hooks/use-toast",
            "@/lib/queryClient",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/label",
            "@/components/ui/textarea",
            "lucide-react"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 29,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 3.3
        },
        {
          "path": "client/src/pages/admin/admin-layout.tsx",
          "domain": "moderation",
          "subdomain": "admin-layout.tsx",
          "layer": "pages",
          "size": 780,
          "lines": 27,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/admin/ModularAdminLayout"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ReactNode"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/pages/admin/ad-management.tsx",
          "domain": "moderation",
          "subdomain": "ad-management.tsx",
          "layer": "pages",
          "size": 24602,
          "lines": 789,
          "complexity": 3,
          "dependencies": [
            "react",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/label",
            "@/components/ui/textarea",
            "@/components/ui/switch",
            "@/components/ui/tabs",
            "@/components/ui/badge",
            "@/components/ui/alert",
            "@/components/ui/Container"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.1
        },
        {
          "path": "client/src/components/test/RoleTest.tsx",
          "domain": "moderation",
          "layer": "components",
          "size": 1379,
          "lines": 43,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/hooks/use-auth",
            "@/lib/roles",
            "@/lib/roles"
          ],
          "exports": [
            "RoleTest"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Role"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/mod/mod-sidebar.tsx",
          "domain": "moderation",
          "subdomain": "mod-sidebar.tsx",
          "layer": "components",
          "size": 5167,
          "lines": 160,
          "complexity": 1,
          "dependencies": [
            "wouter",
            "@/components/ui/button",
            "@/lib/utils"
          ],
          "exports": [
            "ModSidebar"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "client/src/components/mod/mod-layout.tsx",
          "domain": "moderation",
          "subdomain": "mod-layout.tsx",
          "layer": "components",
          "size": 4185,
          "lines": 138,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "lucide-react",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/sheet",
            "@/components/ui/avatar",
            "@/components/ui/badge"
          ],
          "exports": [
            "ModLayout"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/modals/DeleteConfirmModal.tsx",
          "domain": "moderation",
          "subdomain": "DeleteConfirmModal.tsx",
          "layer": "components",
          "size": 1846,
          "lines": 73,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "lucide-react"
          ],
          "exports": [
            "DeleteConfirmModal"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/header/AdminButton.tsx",
          "domain": "moderation",
          "layer": "components",
          "size": 1034,
          "lines": 34,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/icons/iconRenderer",
            "@/components/ui/button",
            "@/hooks/use-auth",
            "@/lib/roles",
            "@/lib/roles"
          ],
          "exports": [
            "AdminButton"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Role"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/errors/AdminErrorBoundary.tsx",
          "domain": "moderation",
          "layer": "components",
          "size": 3885,
          "lines": 124,
          "complexity": 2,
          "dependencies": [
            "react",
            "lucide-react",
            "@/components/ui/button",
            "@/components/ui/card"
          ],
          "exports": [
            "AdminErrorBoundary"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/dev/dev-role-switcher.tsx",
          "domain": "moderation",
          "layer": "components",
          "size": 1100,
          "lines": 40,
          "complexity": 1,
          "dependencies": [
            "@/hooks/use-auth",
            "@/components/ui/badge"
          ],
          "exports": [
            "DevRoleSwitcher"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/__tests__/types/admin.types.test.ts",
          "domain": "moderation",
          "layer": "types",
          "size": 4795,
          "lines": 198,
          "complexity": 1,
          "dependencies": [
            "vitest"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "User",
              "UserFormData",
              "EconomyConfig",
              "AdminApiResponse",
              "BulkOperationRequest",
              "Achievement"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/admin/simple-menu.tsx",
          "domain": "moderation",
          "subdomain": "simple-menu.tsx",
          "layer": "components",
          "size": 1459,
          "lines": 54,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "@shared/config/admin.config"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/components/admin/protected-admin-route.tsx",
          "domain": "moderation",
          "subdomain": "protected-admin-route.tsx",
          "layer": "components",
          "size": 6659,
          "lines": 246,
          "complexity": 3,
          "dependencies": [
            "react",
            "wouter",
            "@/hooks/use-auth",
            "@/hooks/use-admin-modules",
            "@/lib/roles",
            "@/lib/roles",
            "lucide-react",
            "@/components/ui/alert",
            "@/components/ui/button",
            "@shared/config/admin.config"
          ],
          "exports": [
            "ProtectedAdminRoute",
            "withAdminProtection"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Role"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.1
        },
        {
          "path": "client/src/components/admin/VisualJsonTabs.tsx",
          "domain": "moderation",
          "subdomain": "VisualJsonTabs.tsx",
          "layer": "components",
          "size": 2813,
          "lines": 85,
          "complexity": 1,
          "dependencies": [
            "react",
            "@radix-ui/react-tabs",
            "zod"
          ],
          "exports": [
            "VisualJsonTabsProps",
            "VisualJsonTabs"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "client/src/components/admin/ModularAdminSidebar.tsx",
          "domain": "moderation",
          "subdomain": "ModularAdminSidebar.tsx",
          "layer": "components",
          "size": 12194,
          "lines": 439,
          "complexity": 2,
          "dependencies": [
            "react",
            "wouter",
            "@/lib/utils",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/tooltip",
            "@/hooks/use-admin-modules",
            "@/hooks/use-auth",
            "@shared/config/admin.config"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "AdminModule"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.10000000000000003
        },
        {
          "path": "client/src/components/admin/ModularAdminLayout.tsx",
          "domain": "moderation",
          "subdomain": "ModularAdminLayout.tsx",
          "layer": "components",
          "size": 3468,
          "lines": 116,
          "complexity": 1,
          "dependencies": [
            "react",
            "react",
            "@/components/ui/sheet",
            "@/hooks/use-media-query",
            "@/lib/utils"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ReactNode"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/admin/AdminThemeProvider.tsx",
          "domain": "moderation",
          "subdomain": "AdminThemeProvider.tsx",
          "layer": "components",
          "size": 626,
          "lines": 29,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/lib/utils"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ReactNode"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/admin/AdminDashboard.tsx",
          "domain": "moderation",
          "subdomain": "AdminDashboard.tsx",
          "layer": "components",
          "size": 10736,
          "lines": 337,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "@/components/ui/card",
            "@/components/ui/badge",
            "@/components/ui/button",
            "@/hooks/use-admin-modules",
            "@/hooks/use-auth",
            "@/lib/admin-utils",
            "@shared/config/admin.config"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "AdminModule"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/pages/admin/stats/index.tsx",
          "domain": "moderation",
          "subdomain": "stats",
          "layer": "pages",
          "size": 2276,
          "lines": 73,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/skeleton",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/components/ui/card",
            "lucide-react"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/pages/admin/reports/index.tsx",
          "domain": "moderation",
          "subdomain": "reports",
          "layer": "pages",
          "size": 25419,
          "lines": 833,
          "complexity": 3,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/components/ui/card",
            "@/components/ui/input",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/textarea",
            "@/components/ui/separator",
            "@hookform/resolvers/zod",
            "react-hook-form",
            "zod",
            "@/components/admin/layout/AdminPageShell",
            "@/components/ui/alert",
            "@/lib/queryClient",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 73,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 177,
              "context": "mutationFn: async (data: { id: number; notes?: string }) => {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 194,
              "context": "mutationFn: async (data: { id: number; notes?: string }) => {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 211,
              "context": "mutationFn: async (data: { userId: number; reason: string; duration?: string }) => {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "ContentId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 3
        },
        {
          "path": "client/src/pages/admin/features/index.tsx",
          "domain": "moderation",
          "subdomain": "features",
          "layer": "pages",
          "size": 11641,
          "lines": 404,
          "complexity": 2,
          "dependencies": [
            "react",
            "react-query",
            "@/lib/queryClient",
            "lucide-react",
            "@/hooks/use-toast",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/badge",
            "@/components/ui/separator",
            "@/components/ui/switch",
            "@/components/ui/label"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/pages/admin/dictionary/index.tsx",
          "domain": "moderation",
          "subdomain": "dictionary",
          "layer": "pages",
          "size": 2692,
          "lines": 85,
          "complexity": 1,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/features/dictionary/services/dictionaryApi",
            "@/components/ui/button",
            "@/components/ui/card",
            "@/components/ui/loader",
            "@/components/ui/error-display"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 11,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 55,
              "context": "mutationFn: ({ id, status }: { id: number; status: 'approved' | 'rejected' }) =>",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.9
        },
        {
          "path": "client/src/pages/admin/dev/seeding.tsx",
          "domain": "moderation",
          "subdomain": "dev",
          "layer": "pages",
          "size": 1746,
          "lines": 63,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "@/components/admin/layout/AdminPageShell"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/pages/admin/config/zones.tsx",
          "domain": "moderation",
          "subdomain": "config",
          "layer": "pages",
          "size": 1923,
          "lines": 65,
          "complexity": 1,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "lucide-react",
            "@/components/ui/textarea.tsx",
            "@/components/ui/button.tsx",
            "@/hooks/use-toast.ts",
            "@/lib/queryClient.ts"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/pages/admin/config/tags.tsx",
          "domain": "moderation",
          "subdomain": "config",
          "layer": "pages",
          "size": 1916,
          "lines": 65,
          "complexity": 1,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "lucide-react",
            "@/components/ui/textarea.tsx",
            "@/components/ui/button.tsx",
            "@/hooks/use-toast.ts",
            "@/lib/queryClient.ts"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/pages/admin/announcements/index.tsx",
          "domain": "moderation",
          "subdomain": "announcements",
          "layer": "pages",
          "size": 39156,
          "lines": 1228,
          "complexity": 4,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "react-hook-form",
            "@hookform/resolvers/zod",
            "zod",
            "date-fns",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/textarea",
            "@/components/ui/switch",
            "@/components/ui/popover",
            "@/components/ui/calendar",
            "@/components/ui/card",
            "@/components/ui/badge",
            "@/components/ui/tabs",
            "@/hooks/use-toast",
            "@/lib/queryClient",
            "@/components/admin/layout/AdminPageShell"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 75,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 245,
              "context": "mutationFn: async ({ id, values }: { id: number; values: AnnouncementFormValues }) => {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 273,
              "context": "mutationFn: async (id: number) => {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 3.1
        },
        {
          "path": "client/src/pages/admin/activity/index.tsx",
          "domain": "moderation",
          "subdomain": "activity",
          "layer": "pages",
          "size": 7525,
          "lines": 243,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/features/activity/hooks/useActivityFeed",
            "@/features/activity/services/activityApi",
            "date-fns",
            "@/hooks/useAuth",
            "@/components/admin/layout/AdminPageShell",
            "@/layout/primitives"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/pages/admin/ui/pack-builder.tsx",
          "domain": "moderation",
          "subdomain": "ui",
          "layer": "pages",
          "size": 5263,
          "lines": 159,
          "complexity": 1,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/features/admin/services/media-api.service",
            "@/components/admin/layout/AdminPageShell",
            "@lottiefiles/dotlottie-react",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/textarea",
            "@/hooks/use-toast"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 61,
              "context": "const removeFromPack = (id: number) => setContents(contents.filter((c) => c.id !== id));",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 3.8
        },
        {
          "path": "client/src/pages/admin/ui/animations.tsx",
          "domain": "moderation",
          "subdomain": "ui",
          "layer": "pages",
          "size": 3414,
          "lines": 105,
          "complexity": 1,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/features/admin/services/media-api.service",
            "@/components/admin/layout/AdminPageShell",
            "@/components/media/MediaAsset",
            "@/components/ui/button",
            "@/components/admin/media/MediaLibraryModal",
            "@/hooks/use-toast"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/pages/admin/clout/index.tsx",
          "domain": "moderation",
          "subdomain": "clout",
          "layer": "pages",
          "size": 11722,
          "lines": 414,
          "complexity": 1,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/components/ui/card",
            "@/components/ui/tabs",
            "@/components/ui/button",
            "@/components/ui/badge",
            "lucide-react",
            "@/components/admin/layout/AdminPageShell",
            "@/lib/queryClient",
            "@/components/admin/clout/CloutTiersSection",
            "@/components/admin/clout/AchievementsSection",
            "@/components/admin/clout/CloutGrantsSection",
            "@/components/admin/clout/CloutLogsSection"
          ],
          "exports": [
            "CloutAchievement",
            "CloutLog",
            "CloutTier",
            "CLOUT_TIERS"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 17,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 30,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.9
        },
        {
          "path": "client/src/pages/admin/clout/grants.tsx",
          "domain": "moderation",
          "subdomain": "clout",
          "layer": "pages",
          "size": 27360,
          "lines": 882,
          "complexity": 6,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/hooks/use-toast",
            "@/components/ui/input",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/card",
            "@/components/ui/tabs",
            "@/components/ui/label",
            "@/components/ui/textarea",
            "@/components/ui/radio-group",
            "@/components/ui/checkbox",
            "@/components/ui/avatar",
            "@/hooks/use-debounce",
            "@/lib/queryClient",
            "@shared/economy/clout-calculator",
            "@/config/easter-eggs.config",
            "@/components/admin/effects/CloutObliterationEffect"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 69,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 3.8000000000000003
        },
        {
          "path": "client/src/features/dictionary/components/AddWordModal.tsx",
          "domain": "moderation",
          "layer": "components",
          "size": 4093,
          "lines": 140,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/dialog",
            "@/components/ui/input",
            "@/components/ui/textarea",
            "@/components/ui/button",
            "@tanstack/react-query",
            "zod",
            "@/lib/utils/generateSlug",
            "@/hooks/use-toast",
            "@/components/ui/label"
          ],
          "exports": [
            "AddWordModal"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "client/src/features/admin/services/uiConfigApi.ts",
          "domain": "moderation",
          "subdomain": "services",
          "layer": "services",
          "size": 4872,
          "lines": 178,
          "complexity": 2,
          "dependencies": [
            "@/lib/api-request"
          ],
          "exports": [
            "QuoteFilters",
            "PaginationOptions",
            "CreateQuoteData",
            "UpdateQuoteData",
            "ReorderQuotesData",
            "BulkOperation",
            "QuoteAnalyticsData",
            "uiConfigApi",
            "useQuotes"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 1.0999999999999999
        },
        {
          "path": "client/src/features/admin/services/media-api.service.ts",
          "domain": "moderation",
          "subdomain": "services",
          "layer": "services",
          "size": 1131,
          "lines": 48,
          "complexity": 1,
          "dependencies": [
            "@/lib/queryClient"
          ],
          "exports": [
            "MediaType",
            "MediaItem",
            "MediaApiService",
            "mediaApiService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 6,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 42,
              "context": "async deleteMedia(id: number): Promise<void> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 2.9
        },
        {
          "path": "client/src/features/admin/services/cloutGrantsService.ts",
          "domain": "moderation",
          "subdomain": "services",
          "layer": "services",
          "size": 727,
          "lines": 24,
          "complexity": 1,
          "dependencies": [
            "@tanstack/react-query",
            "@/lib/adminApi"
          ],
          "exports": [
            "CLOUT_LOGS_KEY",
            "useGrantClout",
            "useCloutLogs"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/features/admin/services/brandConfigApi.ts",
          "domain": "moderation",
          "subdomain": "services",
          "layer": "services",
          "size": 707,
          "lines": 21,
          "complexity": 1,
          "dependencies": [
            "@/types/compat/brand"
          ],
          "exports": [
            "brandConfigApi"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/features/admin/services/animation-pack-api.service.ts",
          "domain": "moderation",
          "subdomain": "services",
          "layer": "services",
          "size": 478,
          "lines": 19,
          "complexity": 1,
          "dependencies": [
            "@/lib/queryClient"
          ],
          "exports": [
            "PackPayload",
            "AnimationPackApiService",
            "animationPackApiService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/features/admin/api/system-analytics.api.ts",
          "domain": "moderation",
          "subdomain": "api",
          "layer": "other",
          "size": 6304,
          "lines": 299,
          "complexity": 2,
          "dependencies": [
            "@/lib/queryClient"
          ],
          "exports": [
            "SystemMetrics",
            "PerformanceHeatmap",
            "SystemHealth",
            "RealtimeAnalytics",
            "SystemOverview",
            "CacheStats",
            "SystemMetricsParams",
            "PerformanceHeatmapParams",
            "SystemHealthParams",
            "RealtimeAnalyticsParams",
            "CacheOperationParams",
            "systemAnalyticsApi"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/features/admin/hooks/useSystemAnalytics.ts",
          "domain": "moderation",
          "subdomain": "hooks",
          "layer": "hooks",
          "size": 6622,
          "lines": 205,
          "complexity": 1,
          "dependencies": [
            "@tanstack/react-query",
            "sonner"
          ],
          "exports": [
            "systemAnalyticsKeys",
            "useSystemMetrics",
            "useSystemOverview",
            "usePerformanceHeatmap",
            "useSystemHealth",
            "useRealtimeAnalytics",
            "useCacheStats",
            "useCacheOperation",
            "useDatabaseStats",
            "useRefreshSystemAnalytics",
            "useSystemAnalyticsLoadingState",
            "useSystemAnalyticsErrorState"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/components/admin/roles/RolesSection.tsx",
          "domain": "moderation",
          "subdomain": "roles",
          "layer": "components",
          "size": 15559,
          "lines": 479,
          "complexity": 2,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/hooks/use-toast",
            "@/lib/queryClient",
            "@/pages/admin/roles-titles"
          ],
          "exports": [
            "RolesSection"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Role",
              "Title",
              "Permission"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/components/admin/roles/RoleForm.tsx",
          "domain": "moderation",
          "subdomain": "roles",
          "layer": "components",
          "size": 3221,
          "lines": 130,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/label",
            "@/components/ui/textarea"
          ],
          "exports": [
            "RoleForm"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/components/admin/media/MediaPickerModal.tsx",
          "domain": "moderation",
          "subdomain": "media",
          "layer": "components",
          "size": 1446,
          "lines": 53,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/dialog",
            "@tanstack/react-query",
            "@/components/media/MediaAsset"
          ],
          "exports": [
            "MediaPickerModal"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/admin/media/MediaLibraryModal.tsx",
          "domain": "moderation",
          "subdomain": "media",
          "layer": "components",
          "size": 3715,
          "lines": 143,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "react-dropzone",
            "@/components/media/MediaAsset",
            "@/hooks/use-toast"
          ],
          "exports": [
            "MediaLibraryModal"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/components/admin/inputs/UnlockMultiSelect.tsx",
          "domain": "moderation",
          "subdomain": "inputs",
          "layer": "components",
          "size": 2915,
          "lines": 102,
          "complexity": 1,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/components/ui/checkbox",
            "@/components/ui/button",
            "@/components/ui/popover",
            "@/components/ui/scroll-area",
            "lucide-react",
            "@/lib/utils"
          ],
          "exports": [
            "UnlockMultiSelect"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 11,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 44,
              "context": "const toggle = (id: number) => {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.9
        },
        {
          "path": "client/src/components/admin/inputs/AdminToggle.tsx",
          "domain": "moderation",
          "subdomain": "inputs",
          "layer": "components",
          "size": 899,
          "lines": 37,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/components/ui/switch",
            "@/components/ui/label",
            "@/lib/utils"
          ],
          "exports": [
            "AdminToggle"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/admin/inputs/AdminAccessSelector.tsx",
          "domain": "moderation",
          "subdomain": "inputs",
          "layer": "components",
          "size": 2862,
          "lines": 101,
          "complexity": 1,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/components/ui/checkbox",
            "@/components/ui/button",
            "@/components/ui/popover",
            "@/components/ui/scroll-area",
            "@/lib/utils",
            "lucide-react"
          ],
          "exports": [
            "AdminAccessSelector"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 11,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 44,
              "context": "const toggleRole = (id: number) => {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.9
        },
        {
          "path": "client/src/components/admin/layout/EntityTable.tsx",
          "domain": "moderation",
          "subdomain": "layout",
          "layer": "components",
          "size": 5277,
          "lines": 170,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/skeleton",
            "@/components/ui/input",
            "@/lib/utils"
          ],
          "exports": [
            "ColumnDef",
            "EntityTable"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/admin/layout/EntityFilters.tsx",
          "domain": "moderation",
          "subdomain": "layout",
          "layer": "components",
          "size": 4464,
          "lines": 146,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/input",
            "@/components/ui/button",
            "@/components/ui/date-range-picker",
            "react-day-picker",
            "@/lib/utils",
            "lucide-react"
          ],
          "exports": [
            "FilterValue",
            "FilterConfig",
            "EntityFilters"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "DateRange"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/admin/layout/AdminPageShell.tsx",
          "domain": "moderation",
          "subdomain": "layout",
          "layer": "components",
          "size": 2558,
          "lines": 82,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/tabs",
            "@/lib/utils"
          ],
          "exports": [
            "TabConfig",
            "AdminPageShell"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/admin/form-controls/index.ts",
          "domain": "moderation",
          "subdomain": "form-controls",
          "layer": "components",
          "size": 492,
          "lines": 15,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "ColorPicker ",
            "SwitchRow ",
            "ImageUpload ",
            "JsonEditor ",
            "InlineError "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/admin/form-controls/SwitchRow.tsx",
          "domain": "moderation",
          "subdomain": "form-controls",
          "layer": "components",
          "size": 1644,
          "lines": 51,
          "complexity": 1,
          "dependencies": [
            "react",
            "@radix-ui/react-switch"
          ],
          "exports": [
            "SwitchRowProps",
            "SwitchRow"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/admin/form-controls/JsonEditor.tsx",
          "domain": "moderation",
          "subdomain": "form-controls",
          "layer": "components",
          "size": 1094,
          "lines": 53,
          "complexity": 1,
          "dependencies": [
            "react",
            "@monaco-editor/react"
          ],
          "exports": [
            "JsonEditorProps",
            "JsonEditor"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/admin/form-controls/InlineError.tsx",
          "domain": "moderation",
          "subdomain": "form-controls",
          "layer": "components",
          "size": 427,
          "lines": 17,
          "complexity": 0,
          "dependencies": [
            "react",
            "lucide-react"
          ],
          "exports": [
            "InlineErrorProps",
            "InlineError"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/admin/form-controls/ImageUpload.tsx",
          "domain": "moderation",
          "subdomain": "form-controls",
          "layer": "components",
          "size": 1918,
          "lines": 75,
          "complexity": 1,
          "dependencies": [
            "react",
            "react-dropzone"
          ],
          "exports": [
            "ImageUploadProps",
            "ImageUpload"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/admin/form-controls/ColorPicker.tsx",
          "domain": "moderation",
          "subdomain": "form-controls",
          "layer": "components",
          "size": 1243,
          "lines": 40,
          "complexity": 1,
          "dependencies": [
            "react",
            "react-colorful"
          ],
          "exports": [
            "ColorPickerProps",
            "ColorPicker"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/admin/effects/CloutObliterationEffect.tsx",
          "domain": "moderation",
          "subdomain": "effects",
          "layer": "components",
          "size": 5006,
          "lines": 166,
          "complexity": 1,
          "dependencies": [
            "react",
            "framer-motion",
            "lucide-react",
            "@/config/easter-eggs.config"
          ],
          "exports": [
            "CloutObliterationEffect"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/admin/effects/BankruptcyEffect.tsx",
          "domain": "moderation",
          "subdomain": "effects",
          "layer": "components",
          "size": 4859,
          "lines": 183,
          "complexity": 1,
          "dependencies": [
            "react",
            "framer-motion",
            "lucide-react",
            "@/components/ui/button",
            "@/config/easter-eggs.config"
          ],
          "exports": [
            "BankruptcyEffect"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/admin/common/AdminDataTable.tsx",
          "domain": "moderation",
          "subdomain": "common",
          "layer": "components",
          "size": 701,
          "lines": 22,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/components/admin/layout/EntityTable"
          ],
          "exports": [
            "AdminDataTableProps",
            "AdminDataTable"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/admin/clout/CloutTiersSection.tsx",
          "domain": "moderation",
          "subdomain": "clout",
          "layer": "components",
          "size": 8855,
          "lines": 265,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/components/ui/card",
            "@/components/ui/badge",
            "@/components/ui/button",
            "@/components/ui/progress",
            "lucide-react",
            "@/pages/admin/clout"
          ],
          "exports": [
            "CloutTiersSection"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "CloutTier"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/admin/clout/CloutLogsSection.tsx",
          "domain": "moderation",
          "subdomain": "clout",
          "layer": "components",
          "size": 11544,
          "lines": 374,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/badge",
            "@/pages/admin/clout"
          ],
          "exports": [
            "CloutLogsSection"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "CloutLog",
              "CloutAchievement"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/admin/clout/CloutGrantsSection.tsx",
          "domain": "moderation",
          "subdomain": "clout",
          "layer": "components",
          "size": 11979,
          "lines": 381,
          "complexity": 1,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/textarea",
            "@/components/ui/badge",
            "lucide-react",
            "react-hook-form",
            "@hookform/resolvers/zod",
            "zod",
            "@/hooks/use-toast",
            "@/lib/queryClient"
          ],
          "exports": [
            "CloutGrantsSection"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.2
        },
        {
          "path": "client/src/features/admin/components/dashboard/index.ts",
          "domain": "moderation",
          "subdomain": "components",
          "layer": "components",
          "size": 505,
          "lines": 11,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "default as RainAnalyticsCard ",
            "default as TippingAnalyticsCard ",
            "default as EngagementAnalyticsDashboard ",
            "default as UserAnalyticsCard ",
            "default as ForumAnalyticsCard "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/features/admin/components/dashboard/RainAnalyticsCard.tsx",
          "domain": "moderation",
          "subdomain": "components",
          "layer": "components",
          "size": 8272,
          "lines": 275,
          "complexity": 1,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/components/ui/tabs",
            "@/components/ui/skeleton",
            "date-fns",
            "@/lib/queryClient"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 61,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.8
        },
        {
          "path": "client/src/features/admin/components/dashboard/EngagementAnalyticsDashboard.tsx",
          "domain": "moderation",
          "subdomain": "components",
          "layer": "components",
          "size": 1124,
          "lines": 40,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/card"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/features/admin/components/analytics/SystemOverviewCard.tsx",
          "domain": "moderation",
          "subdomain": "components",
          "layer": "components",
          "size": 8742,
          "lines": 265,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/card",
            "@/components/ui/badge",
            "@/components/ui/progress",
            "@/features/admin/api/system-analytics.api"
          ],
          "exports": [
            "SystemOverviewCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "SystemOverview"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/features/admin/components/analytics/SystemHealthCard.tsx",
          "domain": "moderation",
          "subdomain": "components",
          "layer": "components",
          "size": 6598,
          "lines": 204,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/components/ui/card",
            "@/components/ui/badge",
            "@/components/ui/progress",
            "@/components/ui/alert",
            "lucide-react",
            "@/features/admin/api/system-analytics.api"
          ],
          "exports": [
            "SystemHealthCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "SystemHealth"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/features/admin/components/analytics/SystemAlertsCard.tsx",
          "domain": "moderation",
          "subdomain": "components",
          "layer": "components",
          "size": 8196,
          "lines": 224,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/card",
            "@/components/ui/badge",
            "@/components/ui/alert",
            "lucide-react",
            "@/features/admin/api/system-analytics.api"
          ],
          "exports": [
            "SystemAlertsCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "SystemOverview"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/features/admin/components/analytics/RealtimeMetricsCard.tsx",
          "domain": "moderation",
          "subdomain": "components",
          "layer": "components",
          "size": 6268,
          "lines": 200,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/card",
            "@/components/ui/badge",
            "@/features/admin/api/system-analytics.api"
          ],
          "exports": [
            "RealtimeMetricsCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "RealtimeAnalytics"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/features/admin/components/analytics/PerformanceHeatmapCard.tsx",
          "domain": "moderation",
          "subdomain": "components",
          "layer": "components",
          "size": 9722,
          "lines": 272,
          "complexity": 3,
          "dependencies": [
            "react",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/tabs",
            "lucide-react",
            "@/features/admin/api/system-analytics.api"
          ],
          "exports": [
            "PerformanceHeatmapCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "PerformanceHeatmap"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.1
        },
        {
          "path": "client/src/features/admin/components/analytics/DatabaseStatsCard.tsx",
          "domain": "moderation",
          "subdomain": "components",
          "layer": "components",
          "size": 6905,
          "lines": 192,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/card",
            "@/components/ui/progress",
            "@/components/ui/badge",
            "lucide-react",
            "@/features/admin/api/system-analytics.api"
          ],
          "exports": [
            "DatabaseStatsCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "SystemMetrics"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/features/admin/components/analytics/CacheAnalyticsCard.tsx",
          "domain": "moderation",
          "subdomain": "components",
          "layer": "components",
          "size": 11411,
          "lines": 345,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/progress",
            "@/components/ui/alert",
            "@/components/ui/separator",
            "@/components/ui/chart",
            "recharts",
            "@/features/admin/hooks/useSystemAnalytics",
            "@/features/admin/api/system-analytics.api",
            "sonner"
          ],
          "exports": [
            "CacheAnalyticsCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "CacheStats"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/features/admin/components/analytics/APIMetricsCard.tsx",
          "domain": "moderation",
          "subdomain": "components",
          "layer": "components",
          "size": 9025,
          "lines": 265,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/card",
            "@/components/ui/progress",
            "@/components/ui/badge",
            "lucide-react",
            "@/components/ui/chart",
            "recharts",
            "@/features/admin/api/system-analytics.api"
          ],
          "exports": [
            "APIMetricsCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "SystemMetrics"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/admin/forms/roles/RoleFormDialog.tsx",
          "domain": "moderation",
          "subdomain": "forms",
          "layer": "components",
          "size": 5043,
          "lines": 191,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/input",
            "@/components/ui/button",
            "@/components/ui/switch",
            "react-hook-form",
            "zod"
          ],
          "exports": [
            "roleSchema",
            "RoleFormValues",
            "RoleFormDialog"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "UseFormReturn"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "client/src/components/admin/forms/reports/ViewReportDialog.tsx",
          "domain": "moderation",
          "subdomain": "forms",
          "layer": "components",
          "size": 8825,
          "lines": 301,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/tabs",
            "@/components/ui/button",
            "@/components/ui/label",
            "@/components/ui/badge",
            "@db/types"
          ],
          "exports": [
            "ReportStatus",
            "ReportType",
            "Report",
            "ViewReportDialog"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 34,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ReporterId",
              "ContentId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.8
        },
        {
          "path": "client/src/components/admin/forms/reports/ReportActionDialogs.tsx",
          "domain": "moderation",
          "subdomain": "forms",
          "layer": "components",
          "size": 4278,
          "lines": 153,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "@/components/ui/label",
            "@/components/ui/textarea"
          ],
          "exports": [
            "ReportActionDialog",
            "BanUserDialog"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        }
      ],
      "totalIssues": 50,
      "avgComplexity": 1.6571428571428573,
      "migrationEffort": 168.2999999999998,
      "dependencies": [
        "@db/types",
        "@server/src/lib/db",
        "@schema",
        "@playwright/test/reporter",
        "@/db/types",
        "@paralleldrive/cuid2",
        "@shared/config/admin.config",
        "@/hooks/use-auth",
        "@/lib/queryClient",
        "@tanstack/react-query",
        "@shared/lib/admin-module-registry",
        "@/components/ui/card",
        "@/components/ui/button",
        "@/components/ui/badge",
        "@/components/ui/avatar",
        "@/components/ui/tabs",
        "@/components/ui/input",
        "@/components/ui/label",
        "@/components/ui/textarea",
        "@/components/ui/checkbox",
        "@/components/ui/separator",
        "@/components/ui/alert",
        "@/types/core.types",
        "@/hooks/use-toast",
        "@/components/admin/protected-admin-route",
        "@/hooks/use-admin-modules",
        "@/components/admin/VisualJsonTabs",
        "@/hooks/useJsonConfig",
        "@/schemas/uiQuotes.schema",
        "@/types/wallet",
        "@/components/admin/layout/AdminPageShell",
        "@hookform/resolvers/zod",
        "@/types/compat/forum",
        "@/components/ui/skeleton",
        "@/features/admin/components/analytics/SystemOverviewCard",
        "@/features/admin/components/analytics/SystemHealthCard",
        "@/features/admin/components/analytics/RealtimeMetricsCard",
        "@/features/admin/components/analytics/CacheAnalyticsCard",
        "@/features/admin/components/analytics/PerformanceHeatmapCard",
        "@/features/admin/components/analytics/DatabaseStatsCard",
        "@/features/admin/components/analytics/APIMetricsCard",
        "@/features/admin/components/analytics/SystemAlertsCard",
        "@/components/ui/switch",
        "@/config/social.config",
        "@/components/auth",
        "@/hooks/useCrudMutation",
        "@/components/admin/common/AdminDataTable",
        "@/components/admin/forms/roles/RoleFormDialog",
        "@/lib/utils",
        "@/components/admin/AdminDashboard",
        "@/components/ui/table",
        "@/components/admin/form-controls",
        "@/components/ui/slider",
        "@/components/admin/media/MediaLibraryModal",
        "@/features/admin/services/media-api.service",
        "@/components/media/MediaAsset",
        "@/lib/format-date",
        "@/lib/api-request",
        "@/components/ui",
        "@/schemas/brand.schema",
        "@/components/admin/ModularAdminLayout",
        "@/components/ui/Container",
        "@/lib/roles",
        "@/components/ui/sheet",
        "@/components/icons/iconRenderer",
        "@radix-ui/react-tabs",
        "@/components/ui/tooltip",
        "@/hooks/use-media-query",
        "@/lib/admin-utils",
        "@/features/dictionary/services/dictionaryApi",
        "@/components/ui/loader",
        "@/components/ui/error-display",
        "@/components/ui/textarea.tsx",
        "@/components/ui/button.tsx",
        "@/hooks/use-toast.ts",
        "@/lib/queryClient.ts",
        "@/components/ui/popover",
        "@/components/ui/calendar",
        "@/features/activity/hooks/useActivityFeed",
        "@/features/activity/services/activityApi",
        "@/hooks/useAuth",
        "@/layout/primitives",
        "@lottiefiles/dotlottie-react",
        "@/components/admin/clout/CloutTiersSection",
        "@/components/admin/clout/AchievementsSection",
        "@/components/admin/clout/CloutGrantsSection",
        "@/components/admin/clout/CloutLogsSection",
        "@/components/ui/radio-group",
        "@/hooks/use-debounce",
        "@shared/economy/clout-calculator",
        "@/config/easter-eggs.config",
        "@/components/admin/effects/CloutObliterationEffect",
        "@/components/ui/dialog",
        "@/lib/utils/generateSlug",
        "@/lib/adminApi",
        "@/types/compat/brand",
        "@/pages/admin/roles-titles",
        "@/components/ui/scroll-area",
        "@/components/ui/date-range-picker",
        "@radix-ui/react-switch",
        "@monaco-editor/react",
        "@/components/admin/layout/EntityTable",
        "@/components/ui/progress",
        "@/pages/admin/clout",
        "@/features/admin/api/system-analytics.api",
        "@/components/ui/chart",
        "@/features/admin/hooks/useSystemAnalytics"
      ],
      "dependents": [],
      "criticalPath": false,
      "riskAssessment": {
        "runtime": "high",
        "testing": "high",
        "integration": "low"
      },
      "migrationStrategy": {
        "priority": 3,
        "approach": "parallel",
        "estimatedDays": 34,
        "blockers": [],
        "prerequisites": []
      }
    },
    {
      "name": "economy",
      "files": [
        {
          "path": "shared/wallet.config.ts",
          "domain": "economy",
          "layer": "other",
          "size": 6580,
          "lines": 287,
          "complexity": 2,
          "dependencies": [],
          "exports": [
            "WalletFeatureGate",
            "WalletConfig",
            "walletConfig",
            "SupportedToken",
            "WALLET_FEATURE_GATES",
            "WalletFeatureChecker",
            "WALLET_FEATURE_SETS"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "shared/economy/shop-items.ts",
          "domain": "economy",
          "subdomain": "shop-items.ts",
          "layer": "other",
          "size": 1194,
          "lines": 63,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "ShopItem",
            "shopItems"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "shared/economy/reward-calculator.ts",
          "domain": "economy",
          "subdomain": "reward-calculator.ts",
          "layer": "other",
          "size": 2812,
          "lines": 91,
          "complexity": 2,
          "dependencies": [],
          "exports": [
            "getLevelForXp",
            "getProgressWithinLevel",
            "calculateTipXp",
            "applyDailyXpCap",
            "XPAction",
            "XPContext",
            "calculateXp",
            "getXpForLevel "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "shared/economy/rain-tip-config.ts",
          "domain": "economy",
          "layer": "other",
          "size": 195,
          "lines": 14,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "rainTipConfig"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "shared/economy/index.ts",
          "domain": "economy",
          "subdomain": "index.ts",
          "layer": "other",
          "size": 187,
          "lines": 6,
          "complexity": 0,
          "dependencies": [],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "shared/economy/economy.config.ts",
          "domain": "economy",
          "subdomain": "economy.config.ts",
          "layer": "other",
          "size": 9065,
          "lines": 293,
          "complexity": 2,
          "dependencies": [
            "zod",
            "@degentalk/db/types"
          ],
          "exports": [
            "EconomyConfigSchema",
            "economyConfig",
            "EconomyConfig",
            "getEconomyConfig",
            "getXpForLevel",
            "MultiplierStrategy",
            "sanitizeMultiplier",
            "getSafeMultiplier"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "ForumId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        },
        {
          "path": "shared/economy/clout-calculator.ts",
          "domain": "economy",
          "subdomain": "clout-calculator.ts",
          "layer": "other",
          "size": 3248,
          "lines": 112,
          "complexity": 2,
          "dependencies": [],
          "exports": [
            "CLOUT_TIERS",
            "CloutTier",
            "getTierForClout",
            "getCloutForTier",
            "getNextTierInfo",
            "calculateCloutTierImpact",
            "getAllCloutTiers"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "server/utils/walletEngine.ts",
          "domain": "economy",
          "layer": "utils",
          "size": 20685,
          "lines": 776,
          "complexity": 10,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "WalletEngine"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 13,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 25,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 59,
              "context": "static async getUserWallet(userId: number): Promise<UserWallet | null> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 101,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 162,
              "context": "userId: number",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 193,
              "context": "static async purchaseDgtUnlock(userId: number, unlockId: number): Promise<DgtPurchaseResult> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 541,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 622,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 4.3
        },
        {
          "path": "server/utils/wallet-utils.ts",
          "domain": "economy",
          "layer": "utils",
          "size": 6785,
          "lines": 240,
          "complexity": 6,
          "dependencies": [
            "drizzle-orm",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [
            "formatDgtAmount",
            "parseDgtAmount"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.2
        },
        {
          "path": "server/utils/dgt-wallet-integration.ts",
          "domain": "economy",
          "layer": "utils",
          "size": 8551,
          "lines": 352,
          "complexity": 5,
          "dependencies": [
            "drizzle-orm",
            "stripe"
          ],
          "exports": [
            "DgtWalletIntegration"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 74,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 163,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 220,
              "context": "static async getUserDgtPurchaseHistory(userId: number, limit = 20, offset = 0) {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 2.8
        },
        {
          "path": "server/utils/dgt-treasury-init.ts",
          "domain": "economy",
          "layer": "utils",
          "size": 3595,
          "lines": 105,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "server/services/tip-service-ccpayment.ts",
          "domain": "economy",
          "layer": "services",
          "size": 12356,
          "lines": 479,
          "complexity": 7,
          "dependencies": [
            "@schema",
            "drizzle-orm",
            "drizzle-orm"
          ],
          "exports": [
            "TipService",
            "createTipService",
            "tipService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 217,
              "context": "recipient: { id: number; username: string };",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 391,
              "context": "private async checkCooldowns(userId: number, commandType: 'tip' | 'rain'): Promise<void> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 440,
              "context": "private async updateLastCommandTime(userId: number, commandType: 'tip' | 'rain'): Promise<void> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 1.7000000000000002
        },
        {
          "path": "server/services/ccpayment-client.ts",
          "domain": "economy",
          "layer": "services",
          "size": 6611,
          "lines": 244,
          "complexity": 4,
          "dependencies": [
            "axios",
            "crypto"
          ],
          "exports": [
            "ccpaymentClient"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 2.3
        },
        {
          "path": "server/migrations/add-dgt-purchase-orders-table.ts",
          "domain": "economy",
          "layer": "other",
          "size": 2899,
          "lines": 84,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm/node-postgres",
            "drizzle-orm/node-postgres/migrator",
            "pg",
            "drizzle-orm",
            "dotenv"
          ],
          "exports": [
            "runMigration "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "server/migrations/add-dgt-packages-table.ts",
          "domain": "economy",
          "layer": "other",
          "size": 2940,
          "lines": 99,
          "complexity": 2,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "scripts/templates/transaction-domain-template.ts",
          "domain": "economy",
          "layer": "other",
          "size": 35610,
          "lines": 1109,
          "complexity": 10,
          "dependencies": [
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types"
          ],
          "exports": [
            "transactionRoutesTemplate",
            "transactionControllerTemplate",
            "TransactionController",
            "transactionController",
            "transactionServiceTemplate",
            "TransactionQueryParams",
            "TransactionStatsPeriod",
            "TransactionStats",
            "TransactionService",
            "transactionService",
            "transactionValidatorsTemplate",
            "transactionQuerySchema",
            "validateTransactionQuery",
            "transactionErrorCodesTemplate",
            "transactionTestTemplate",
            "createTransactionsDomainScript",
            "formatDateTimeForDb",
            "formatDateForDisplay",
            "transactionQuerySchema\n"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 326,
              "context": "async getTransactionHistory(userId: number, params: TransactionQueryParams) {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 449,
              "context": "async getTransactionById(userId: number, transactionId: number) {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 517,
              "context": "async getTransactionStats(userId: number, period: 'day' | 'week' | 'month' | 'year' = 'month') {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 628,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 197,
              "context": "const transactionId = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "HeatEventId"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 2.7
        },
        {
          "path": "scripts/dev/setup-fresh-wallet-test.ts",
          "domain": "economy",
          "layer": "other",
          "size": 3546,
          "lines": 129,
          "complexity": 2,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "bcrypt"
          ],
          "exports": [
            "setupFreshWalletTest "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.4
        },
        {
          "path": "scripts/db/seed-dev-wallet.ts",
          "domain": "economy",
          "layer": "other",
          "size": 7566,
          "lines": 195,
          "complexity": 2,
          "dependencies": [
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "HeatEventId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        },
        {
          "path": "lib/wallet/testUtils.ts",
          "domain": "economy",
          "subdomain": "testUtils.ts",
          "layer": "other",
          "size": 814,
          "lines": 25,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "logDevEvent"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "shared/types/core/economy.types.ts",
          "domain": "economy",
          "layer": "types",
          "size": 7340,
          "lines": 307,
          "complexity": 2,
          "dependencies": [
            "@db/types/id.types",
            "@db/schema/core/enums"
          ],
          "exports": [
            "DGTToken",
            "Wallet",
            "WalletFeatures",
            "WalletLimits",
            "Transaction",
            "TransactionReference",
            "TransactionMetadata",
            "PendingTransaction",
            "Tip",
            "Purchase",
            "PurchaseItem",
            "Withdrawal",
            "EconomyStats",
            "WalletHolder",
            "CreateTransactionRequest",
            "WithdrawRequest",
            "TipRequest",
            "PurchaseRequest",
            "WalletHistoryParams",
            "isWallet"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "UserId",
              "WalletId",
              "TransactionId",
              "ProductId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "shared/types/config/economy.schema.ts",
          "domain": "economy",
          "layer": "types",
          "size": 9623,
          "lines": 271,
          "complexity": 1,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "CurrencyConfigSchema",
            "FeeConfigSchema",
            "WalletLimitsSchema",
            "DistributionConfigSchema",
            "StakingConfigSchema",
            "ShopPricingSchema",
            "EconomyConfigSchema",
            "EconomyConfig",
            "CurrencyConfig",
            "FeeConfig",
            "WalletLimits",
            "DistributionConfig",
            "StakingConfig",
            "ShopPricing",
            "validateEconomyConfig",
            "validatePartialEconomyConfig"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "shared/lib/wallet/testUtils.ts",
          "domain": "economy",
          "subdomain": "testUtils.ts",
          "layer": "utils",
          "size": 856,
          "lines": 27,
          "complexity": 1,
          "dependencies": [
            "@db/types"
          ],
          "exports": [
            "logDevEvent"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "UserId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "server/test/wallet/dgt-service.test.ts",
          "domain": "economy",
          "subdomain": "dgt-service.test.ts",
          "layer": "other",
          "size": 6054,
          "lines": 243,
          "complexity": 3,
          "dependencies": [
            "vitest",
            "@db",
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.1
        },
        {
          "path": "server/test/engagement/tip.test.ts",
          "domain": "economy",
          "layer": "other",
          "size": 3424,
          "lines": 153,
          "complexity": 2,
          "dependencies": [
            "vitest",
            "@db"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "server/test/ccpayment-webhook/webhook.test.ts",
          "domain": "economy",
          "subdomain": "webhook.test.ts",
          "layer": "other",
          "size": 5755,
          "lines": 232,
          "complexity": 2,
          "dependencies": [
            "vitest",
            "@db"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9
        },
        {
          "path": "server/src/utils/economy-loader.ts",
          "domain": "economy",
          "layer": "utils",
          "size": 1161,
          "lines": 33,
          "complexity": 2,
          "dependencies": [
            "@shared/economy/economy.config",
            "@schema",
            "@db"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.4
        },
        {
          "path": "server/src/core/wallet-validators.ts",
          "domain": "economy",
          "layer": "other",
          "size": 1171,
          "lines": 43,
          "complexity": 1,
          "dependencies": [
            "express"
          ],
          "exports": [
            "validateWalletTransaction",
            "validateWalletAddress",
            "validateTransactionAmount"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.8999999999999999
        },
        {
          "path": "server/migrations/archive/run-tip-rain.ts",
          "domain": "economy",
          "layer": "other",
          "size": 681,
          "lines": 23,
          "complexity": 1,
          "dependencies": [
            "dotenv"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "db/schema/wallet/withdrawal-records.ts",
          "domain": "economy",
          "subdomain": "withdrawal-records.ts",
          "layer": "other",
          "size": 2372,
          "lines": 60,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "withdrawalRecords",
            "WithdrawalRecord",
            "InsertWithdrawalRecord"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/wallet/webhook-events.ts",
          "domain": "economy",
          "subdomain": "webhook-events.ts",
          "layer": "other",
          "size": 2031,
          "lines": 57,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "webhookEvents",
            "WebhookEvent",
            "InsertWebhookEvent"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/wallet/swap-records.ts",
          "domain": "economy",
          "subdomain": "swap-records.ts",
          "layer": "other",
          "size": 2142,
          "lines": 61,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "swapRecords",
            "SwapRecord",
            "InsertSwapRecord"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/wallet/supported-tokens.ts",
          "domain": "economy",
          "subdomain": "supported-tokens.ts",
          "layer": "other",
          "size": 2255,
          "lines": 62,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "supportedTokens",
            "SupportedToken",
            "InsertSupportedToken"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/wallet/internal-transfers.ts",
          "domain": "economy",
          "subdomain": "internal-transfers.ts",
          "layer": "other",
          "size": 1956,
          "lines": 54,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "internalTransfers",
            "InternalTransfer",
            "InsertInternalTransfer"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/wallet/deposit-records.ts",
          "domain": "economy",
          "subdomain": "deposit-records.ts",
          "layer": "other",
          "size": 2402,
          "lines": 64,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "depositRecords",
            "DepositRecord",
            "InsertDepositRecord"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/wallet/crypto-wallets.ts",
          "domain": "economy",
          "subdomain": "crypto-wallets.ts",
          "layer": "other",
          "size": 1378,
          "lines": 45,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "cryptoWallets",
            "CryptoWallet",
            "InsertCryptoWallet"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/system/economyConfigOverrides.ts",
          "domain": "economy",
          "layer": "other",
          "size": 773,
          "lines": 17,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "economyConfigOverrides",
            "EconomyConfigOverride",
            "NewEconomyConfigOverride"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.5
        },
        {
          "path": "db/schema/shop/inventoryTransactions.ts",
          "domain": "economy",
          "layer": "other",
          "size": 1790,
          "lines": 47,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "inventoryTransactions",
            "InventoryTransaction",
            "InsertInventoryTransaction"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/economy/xpLogs.ts",
          "domain": "economy",
          "subdomain": "xpLogs.ts",
          "layer": "other",
          "size": 894,
          "lines": 36,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "xpLogs",
            "XpLog",
            "InsertXpLog"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/economy/xpAdjustmentLogs.ts",
          "domain": "economy",
          "subdomain": "xpAdjustmentLogs.ts",
          "layer": "other",
          "size": 1001,
          "lines": 26,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "xpAdjustmentLogs",
            "XpAdjustmentLog",
            "InsertXpAdjustmentLog"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/economy/withdrawalRequests.ts",
          "domain": "economy",
          "subdomain": "withdrawalRequests.ts",
          "layer": "other",
          "size": 2138,
          "lines": 67,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm",
            "drizzle-zod",
            "zod"
          ],
          "exports": [
            "withdrawalRequests",
            "insertWithdrawalRequestSchema",
            "WithdrawalRequest",
            "InsertWithdrawalRequest"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/economy/wallets.ts",
          "domain": "economy",
          "layer": "other",
          "size": 1645,
          "lines": 44,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "wallets",
            "Wallet",
            "InsertWallet"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "db/schema/economy/vaults.ts",
          "domain": "economy",
          "subdomain": "vaults.ts",
          "layer": "other",
          "size": 3027,
          "lines": 103,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm",
            "drizzle-zod",
            "zod"
          ],
          "exports": [
            "vaults",
            "insertVaultSchema",
            "Vault",
            "InsertVault"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/economy/transactions.ts",
          "domain": "economy",
          "layer": "other",
          "size": 2266,
          "lines": 57,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "transactions",
            "Transaction",
            "InsertTransaction"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/economy/titles.ts",
          "domain": "economy",
          "subdomain": "titles.ts",
          "layer": "other",
          "size": 2180,
          "lines": 64,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm",
            "drizzle-zod"
          ],
          "exports": [
            "titles",
            "insertTitleSchema",
            "Title",
            "InsertTitle"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/economy/rainEvents.ts",
          "domain": "economy",
          "subdomain": "rainEvents.ts",
          "layer": "other",
          "size": 1065,
          "lines": 36,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "rainEvents",
            "RainEvent",
            "InsertRainEvent"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/economy/levels.ts",
          "domain": "economy",
          "subdomain": "levels.ts",
          "layer": "other",
          "size": 1743,
          "lines": 40,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-zod"
          ],
          "exports": [
            "levels",
            "insertLevelSchema",
            "Level",
            "InsertLevel"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "db/schema/economy/dgtPurchaseOrders.ts",
          "domain": "economy",
          "layer": "other",
          "size": 1986,
          "lines": 61,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm",
            "drizzle-zod",
            "zod"
          ],
          "exports": [
            "dgtPurchaseOrders",
            "insertDgtPurchaseOrderSchema",
            "DgtPurchaseOrder",
            "InsertDgtPurchaseOrder"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/economy/dgtPackages.ts",
          "domain": "economy",
          "layer": "other",
          "size": 1841,
          "lines": 63,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm",
            "drizzle-zod",
            "zod"
          ],
          "exports": [
            "dgtPackages",
            "insertDgtPackageSchema",
            "DgtPackage",
            "InsertDgtPackage"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/economy/cloutAchievements.ts",
          "domain": "economy",
          "subdomain": "cloutAchievements.ts",
          "layer": "other",
          "size": 1161,
          "lines": 36,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "cloutAchievements",
            "CloutAchievement",
            "InsertCloutAchievement"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/economy/badges.ts",
          "domain": "economy",
          "subdomain": "badges.ts",
          "layer": "other",
          "size": 657,
          "lines": 18,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm",
            "drizzle-zod"
          ],
          "exports": [
            "badges",
            "insertBadgeSchema",
            "Badge",
            "InsertBadge"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/economy/airdropRecords.ts",
          "domain": "economy",
          "subdomain": "airdropRecords.ts",
          "layer": "other",
          "size": 581,
          "lines": 14,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core"
          ],
          "exports": [
            "airdropRecords",
            "AirdropRecord",
            "InsertAirdropRecord"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/advertising/payments.ts",
          "domain": "economy",
          "layer": "other",
          "size": 5137,
          "lines": 161,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "paymentStatusEnum",
            "cryptoCurrencyEnum",
            "cryptoPayments",
            "adGovernanceProposals",
            "adGovernanceVotes",
            "CryptoPayment",
            "InsertCryptoPayment",
            "AdGovernanceProposal",
            "AdGovernanceVote"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/types/wallet.ts",
          "domain": "economy",
          "layer": "types",
          "size": 1106,
          "lines": 62,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "Transaction",
            "TransactionHistoryParams",
            "DepositAddress",
            "WalletBalances"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/types/payment.types.ts",
          "domain": "economy",
          "layer": "types",
          "size": 3591,
          "lines": 177,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "SupportedCurrency",
            "CCPaymentResponse",
            "DepositRequest",
            "DepositResponse",
            "WithdrawalRequest",
            "WithdrawalResponse",
            "SwapRequest",
            "SwapResponse",
            "CryptoBalance",
            "WalletBalances",
            "Transaction",
            "TransactionMetadata",
            "CCPaymentWebhook",
            "PaymentConfig",
            "PaymentError",
            "DepositAddress",
            "ExchangeRate"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 20,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 39,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 56,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 90,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/payments/index.ts",
          "domain": "economy",
          "subdomain": "index.ts",
          "layer": "other",
          "size": 1172,
          "lines": 55,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "PaymentProviders",
            "getDefaultProvider",
            "getSupportedCurrencies"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/pages/wallet.tsx",
          "domain": "economy",
          "layer": "pages",
          "size": 4547,
          "lines": 117,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/hooks/use-wallet",
            "@/components/economy/wallet/wallet-balance-display",
            "@/components/economy/wallet/transaction-history",
            "@/components/economy/wallet/deposit-button",
            "@/components/economy/wallet/withdraw-button",
            "@/components/economy/wallet/buy-dgt-button",
            "@/components/economy/wallet/dgt-transfer",
            "wouter"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/hooks/useDgtPurchase.ts",
          "domain": "economy",
          "layer": "hooks",
          "size": 5001,
          "lines": 188,
          "complexity": 4,
          "dependencies": [
            "react",
            "@/hooks/use-toast",
            "@/lib/queryClient",
            "@tanstack/react-query",
            "axios",
            "sonner"
          ],
          "exports": [
            "useDgtPurchase"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.3
        },
        {
          "path": "client/src/hooks/use-wallet.ts",
          "domain": "economy",
          "layer": "hooks",
          "size": 5378,
          "lines": 168,
          "complexity": 2,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/features/wallet/services/wallet-api.service",
            "@/lib/queryClient",
            "@/hooks/use-toast"
          ],
          "exports": [
            "useWallet"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "WalletBalance",
              "CryptoBalance",
              "Transaction",
              "DepositAddress"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/hooks/use-tip.ts",
          "domain": "economy",
          "layer": "hooks",
          "size": 2686,
          "lines": 114,
          "complexity": 2,
          "dependencies": [
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/hooks/use-toast",
            "@db/types"
          ],
          "exports": [
            "TipParams",
            "useTip"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 21,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "TipId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2
        },
        {
          "path": "client/src/hooks/use-pending-transactions.ts",
          "domain": "economy",
          "layer": "hooks",
          "size": 2929,
          "lines": 102,
          "complexity": 2,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/contexts/wallet-context",
            "@/types/wallet"
          ],
          "exports": [
            "PendingTransaction",
            "usePendingTransactions"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Transaction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/hooks/use-dgt-packages.ts",
          "domain": "economy",
          "layer": "hooks",
          "size": 524,
          "lines": 23,
          "complexity": 1,
          "dependencies": [
            "@tanstack/react-query",
            "@/lib/queryClient"
          ],
          "exports": [
            "DgtPackage",
            "useDgtPackages"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 5,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.8
        },
        {
          "path": "client/src/contexts/wallet-context.tsx",
          "domain": "economy",
          "layer": "other",
          "size": 5061,
          "lines": 174,
          "complexity": 2,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/types/wallet",
            "@/types/wallet"
          ],
          "exports": [
            "WalletProvider",
            "useWalletContext",
            "useWalletOperations"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Transaction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "archive/legacy/wallet/wallet-refactor-migration.ts",
          "domain": "economy",
          "subdomain": "wallet-refactor-migration.ts",
          "layer": "other",
          "size": 4884,
          "lines": 142,
          "complexity": 4,
          "dependencies": [
            "dotenv",
            "@db",
            "fs",
            "path",
            "@core/logger",
            "drizzle-orm"
          ],
          "exports": [
            "migrateWalletRefactor "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.8
        },
        {
          "path": "archive/legacy/wallet/migrate-wallet-imports.ts",
          "domain": "economy",
          "subdomain": "migrate-wallet-imports.ts",
          "layer": "other",
          "size": 3233,
          "lines": 115,
          "complexity": 2,
          "dependencies": [
            "@db/types",
            "fs",
            "path",
            "glob"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "archive/legacy/wallet/migrate-wallet-components.ts",
          "domain": "economy",
          "subdomain": "migrate-wallet-components.ts",
          "layer": "other",
          "size": 4241,
          "lines": 139,
          "complexity": 2,
          "dependencies": [
            "@db/types",
            "fs",
            "path",
            "glob"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/types/compat/economy.ts",
          "domain": "economy",
          "layer": "types",
          "size": 229,
          "lines": 14,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "InsertXpCloutSettings",
            "InsertXpActionSetting"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/payments/shared/index.ts",
          "domain": "economy",
          "subdomain": "shared",
          "layer": "other",
          "size": 2350,
          "lines": 103,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "TransactionType",
            "TransactionStatus",
            "Transaction",
            "PaymentProvider",
            "formatCurrency",
            "calculateFee"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 23,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.8
        },
        {
          "path": "client/src/payments/ccpayment/withdraw.ts",
          "domain": "economy",
          "subdomain": "ccpayment",
          "layer": "other",
          "size": 4170,
          "lines": 177,
          "complexity": 3,
          "dependencies": [],
          "exports": [
            "CreateWithdrawalParams",
            "WithdrawalResponse"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 15,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 118,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.3
        },
        {
          "path": "client/src/payments/ccpayment/utils.ts",
          "domain": "economy",
          "subdomain": "ccpayment",
          "layer": "other",
          "size": 3182,
          "lines": 123,
          "complexity": 2,
          "dependencies": [
            "crypto"
          ],
          "exports": [
            "createSignature",
            "verifyWebhookSignature",
            "formatTransactionStatus",
            "generateOrderId"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/payments/ccpayment/types.ts",
          "domain": "economy",
          "subdomain": "ccpayment",
          "layer": "other",
          "size": 1349,
          "lines": 79,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "CCPaymentConfig",
            "DepositRequest",
            "WithdrawalRequest",
            "TransactionStatus",
            "CCPaymentWebhookEvent",
            "SupportedCurrency"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/payments/ccpayment/swap.ts",
          "domain": "economy",
          "subdomain": "ccpayment",
          "layer": "other",
          "size": 2426,
          "lines": 129,
          "complexity": 2,
          "dependencies": [],
          "exports": [
            "CreateSwapParams",
            "SwapResponse"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 14,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2
        },
        {
          "path": "client/src/payments/ccpayment/index.ts",
          "domain": "economy",
          "subdomain": "ccpayment",
          "layer": "other",
          "size": 1007,
          "lines": 48,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "CCPaymentClient",
            "ccpaymentClient",
            "createDeposit",
            "checkDepositStatus",
            "type CreateDepositParams",
            "type DepositResponse",
            "createWithdrawal",
            "checkWithdrawalStatus",
            "validateWithdrawal",
            "type CreateWithdrawalParams",
            "type WithdrawalResponse",
            "createSwap",
            "getExchangeRates",
            "type CreateSwapParams",
            "type SwapResponse",
            "createSignature",
            "verifyWebhookSignature",
            "formatTransactionStatus",
            "generateOrderId",
            "type CCPaymentConfig"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/payments/ccpayment/deposit.ts",
          "domain": "economy",
          "subdomain": "ccpayment",
          "layer": "other",
          "size": 2556,
          "lines": 99,
          "complexity": 2,
          "dependencies": [],
          "exports": [
            "CreateDepositParams",
            "DepositResponse"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 15,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2
        },
        {
          "path": "client/src/payments/ccpayment/ccpayment-client.ts",
          "domain": "economy",
          "subdomain": "ccpayment",
          "layer": "other",
          "size": 4221,
          "lines": 145,
          "complexity": 3,
          "dependencies": [
            "axios"
          ],
          "exports": [
            "CCPaymentClient",
            "ccpaymentClient"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.1
        },
        {
          "path": "client/src/pages/shop-management/dgt-purchase.tsx",
          "domain": "economy",
          "layer": "pages",
          "size": 11170,
          "lines": 376,
          "complexity": 3,
          "dependencies": [
            "react",
            "@/hooks/useDgtPurchase",
            "@/components/payment/StripeElementsWrapper",
            "@/components/payment/PaymentForm",
            "@/hooks/use-toast",
            "wouter",
            "lucide-react",
            "@/components/ui/button",
            "@/components/ui/card",
            "@/components/ui/tabs",
            "@/components/ui/badge",
            "wouter",
            "@/layout/primitives"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.1
        },
        {
          "path": "client/src/pages/admin/dgt-packages.tsx",
          "domain": "economy",
          "layer": "pages",
          "size": 19025,
          "lines": 644,
          "complexity": 3,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/hooks/use-toast",
            "@/components/ui/card",
            "@/components/ui/input",
            "@/components/ui/button",
            "@/components/ui/textarea",
            "@/components/ui/switch",
            "@/components/ui/label",
            "@/components/ui/badge",
            "@/components/ui/checkbox",
            "@/components/admin/layout/AdminPageShell"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.3
        },
        {
          "path": "client/src/components/ui/tooltip.tsx",
          "domain": "economy",
          "layer": "components",
          "size": 1140,
          "lines": 29,
          "complexity": 0,
          "dependencies": [
            "react",
            "@radix-ui/react-tooltip",
            "@/lib/utils"
          ],
          "exports": [
            "Tooltip",
            "TooltipTrigger",
            "TooltipContent",
            "TooltipProvider"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/ui/tooltip-utils.tsx",
          "domain": "economy",
          "layer": "components",
          "size": 2454,
          "lines": 102,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/tooltip"
          ],
          "exports": [
            "SafeTooltip",
            "ButtonTooltip"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.8999999999999999
        },
        {
          "path": "client/src/components/sidebar/wallet-summary-widget.tsx",
          "domain": "economy",
          "layer": "components",
          "size": 4958,
          "lines": 153,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/card",
            "@/components/ui/button",
            "lucide-react"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/payment/StripeElementsWrapper.tsx",
          "domain": "economy",
          "subdomain": "StripeElementsWrapper.tsx",
          "layer": "components",
          "size": 2314,
          "lines": 80,
          "complexity": 1,
          "dependencies": [
            "react",
            "@stripe/stripe-js",
            "@stripe/react-stripe-js"
          ],
          "exports": [
            "StripeElementsWrapper"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/payment/PaymentForm.tsx",
          "domain": "economy",
          "subdomain": "PaymentForm.tsx",
          "layer": "components",
          "size": 4786,
          "lines": 161,
          "complexity": 2,
          "dependencies": [
            "react",
            "@stripe/react-stripe-js",
            "@/hooks/use-toast",
            "lucide-react",
            "@/components/ui/button",
            "@/components/ui/checkbox",
            "@/components/ui/label",
            "@/components/ui/dialog"
          ],
          "exports": [
            "PaymentForm"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/header/WalletButton.tsx",
          "domain": "economy",
          "layer": "components",
          "size": 686,
          "lines": 29,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/icons/iconRenderer",
            "@/components/ui/button"
          ],
          "exports": [
            "WalletButton"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/economy/wallet-display.tsx",
          "domain": "economy",
          "layer": "components",
          "size": 4527,
          "lines": 135,
          "complexity": 1,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/lib/utils",
            "@/components/ui/card",
            "@/components/ui/button",
            "lucide-react"
          ],
          "exports": [
            "WalletDisplay"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "server/src/domains/economy/services/rewardService.ts",
          "domain": "economy",
          "subdomain": "services",
          "layer": "services",
          "size": 1589,
          "lines": 50,
          "complexity": 2,
          "dependencies": [
            "@server/src/core/db",
            "@schema/economy/settings",
            "drizzle-orm",
            "@server/src/core/logger"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 19,
              "context": "export async function awardXShareReward(userId: number) {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 35,
              "context": "export async function awardXReferralReward(userId: number) {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 0.6000000000000001
        },
        {
          "path": "server/src/domains/economy/services/cloutService.ts",
          "domain": "economy",
          "subdomain": "services",
          "layer": "services",
          "size": 3089,
          "lines": 97,
          "complexity": 3,
          "dependencies": [
            "@server/src/core/db",
            "@schema",
            "@schema",
            "drizzle-orm",
            "@server/src/core/logger"
          ],
          "exports": [
            "CloutService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 0.8
        },
        {
          "path": "server/src/core/repository/repositories/transaction-repository.ts",
          "domain": "economy",
          "layer": "other",
          "size": 9166,
          "lines": 351,
          "complexity": 5,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "@schema",
            "@server/src/core/logger"
          ],
          "exports": [
            "TransactionRepository"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 32,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 141,
              "context": "async getTotalByUser(userId: number, type?: string): Promise<number> {",
              "suggestedFix": "UserId",
              "confidence": 1
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 179,
              "context": "async getBalanceByUser(userId: number): Promise<number> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 272,
              "context": "async getUserStats(userId: number): Promise<{",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "ITransactionRepository"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 2.4
        },
        {
          "path": "client/src/pages/admin/wallets/index.tsx",
          "domain": "economy",
          "subdomain": "index.tsx",
          "layer": "pages",
          "size": 13592,
          "lines": 430,
          "complexity": 3,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/components/ui/button",
            "@/hooks/use-toast",
            "@/lib/formatters",
            "@/components/ui/badge",
            "@/components/ui/skeleton",
            "@/components/admin/layout/AdminPageShell",
            "@/components/admin/layout/AdminPageShell",
            "@/components/admin/common/AdminDataTable",
            "@/components/admin/layout/EntityTable",
            "@/components/admin/forms/wallets/ManualDgtAdjustmentDialog",
            "@/components/admin/wallet/mock-webhook-trigger"
          ],
          "exports": [
            "TopUser",
            "Transaction"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "TabConfig"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.1
        },
        {
          "path": "client/src/pages/admin/transactions/index.tsx",
          "domain": "economy",
          "subdomain": "index.tsx",
          "layer": "pages",
          "size": 4991,
          "lines": 168,
          "complexity": 1,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "date-fns",
            "@/components/ui/card",
            "@/components/ui/badge",
            "@/components/ui/skeleton"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/pages/admin/config/economy.tsx",
          "domain": "economy",
          "layer": "pages",
          "size": 7506,
          "lines": 275,
          "complexity": 2,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/components/ui/textarea",
            "@/components/ui/button",
            "@/components/ui/card",
            "lucide-react",
            "@/hooks/use-toast",
            "@/components/admin/layout/AdminPageShell",
            "@/components/ui/alert",
            "@/lib/queryClient"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/features/wallet/services/wallet-api.service.ts",
          "domain": "economy",
          "subdomain": "services",
          "layer": "services",
          "size": 2477,
          "lines": 119,
          "complexity": 2,
          "dependencies": [
            "@/lib/queryClient"
          ],
          "exports": [
            "WalletBalance",
            "TransactionItem",
            "WalletConfig",
            "DgtPackage",
            "WalletApiService",
            "walletApiService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/features/admin/services/economyConfigService.ts",
          "domain": "economy",
          "layer": "services",
          "size": 981,
          "lines": 37,
          "complexity": 1,
          "dependencies": [
            "@/lib/adminApi",
            "@tanstack/react-query"
          ],
          "exports": [
            "useEconomyConfig",
            "useUpdateEconomyConfig",
            "useResetEconomyConfig"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/components/economy/shoutbox/enhanced-shoutbox-widget.tsx",
          "domain": "economy",
          "subdomain": "shoutbox",
          "layer": "components",
          "size": 19742,
          "lines": 698,
          "complexity": 5,
          "dependencies": [
            "react",
            "@/hooks/use-auth",
            "@tanstack/react-query",
            "react-hot-toast",
            "@/lib/utils",
            "date-fns",
            "@/lib/queryClient",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 40,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 50,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 62,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 266,
              "context": "mutationFn: async ({ userId, ignore }: { userId: number; ignore: boolean }) => {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "RoomId",
              "GroupId",
              "MessageId"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 2.9
        },
        {
          "path": "client/src/components/economy/wallet/withdraw-button.tsx",
          "domain": "economy",
          "subdomain": "withdraw-button.tsx",
          "layer": "components",
          "size": 13658,
          "lines": 445,
          "complexity": 3,
          "dependencies": [
            "react",
            "lucide-react",
            "@tanstack/react-query",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/tabs",
            "@/components/ui/badge",
            "@/hooks/use-toast",
            "@/hooks/use-wallet",
            "@/features/wallet/services/wallet-api.service"
          ],
          "exports": [
            "WithdrawButtonProps",
            "WithdrawButton"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.3000000000000001
        },
        {
          "path": "client/src/components/economy/wallet/wallet-balance-display.tsx",
          "domain": "economy",
          "subdomain": "wallet-balance-display.tsx",
          "layer": "components",
          "size": 6138,
          "lines": 194,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/badge",
            "@/components/ui/button",
            "@/lib/utils",
            "@/features/wallet/services/wallet-api.service"
          ],
          "exports": [
            "WalletBalanceDisplayProps",
            "WalletBalanceDisplay"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "WalletBalance"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/components/economy/wallet/wallet-address-display.tsx",
          "domain": "economy",
          "subdomain": "wallet-address-display.tsx",
          "layer": "components",
          "size": 7639,
          "lines": 227,
          "complexity": 1,
          "dependencies": [
            "react",
            "lucide-react",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/lib/utils"
          ],
          "exports": [
            "WalletAddressDisplayProps",
            "WalletAddressDisplay"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/economy/wallet/transaction-history.tsx",
          "domain": "economy",
          "subdomain": "transaction-history.tsx",
          "layer": "components",
          "size": 9555,
          "lines": 305,
          "complexity": 3,
          "dependencies": [
            "react",
            "@/components/ui/card",
            "@/components/ui/skeleton",
            "@/components/ui/badge",
            "@/components/ui/scroll-area",
            "@/components/ui/button",
            "@/features/wallet/services/wallet-api.service"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Transaction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.1
        },
        {
          "path": "client/src/components/economy/wallet/tip-button.tsx",
          "domain": "economy",
          "subdomain": "tip-button.tsx",
          "layer": "components",
          "size": 5150,
          "lines": 194,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/textarea",
            "@/components/ui/slider",
            "@/hooks/use-toast",
            "@/hooks/use-tip",
            "@/hooks/use-wallet",
            "@hookform/resolvers/zod",
            "react-hook-form",
            "lucide-react",
            "zod"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "client/src/components/economy/wallet/rain-button.tsx",
          "domain": "economy",
          "subdomain": "rain-button.tsx",
          "layer": "components",
          "size": 8070,
          "lines": 292,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/textarea",
            "@/components/ui/slider",
            "@/hooks/use-toast",
            "@/hooks/use-rain",
            "@/hooks/use-wallet",
            "@hookform/resolvers/zod",
            "react-hook-form",
            "zod"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        },
        {
          "path": "client/src/components/economy/wallet/dgt-transfer.tsx",
          "domain": "economy",
          "subdomain": "dgt-transfer.tsx",
          "layer": "components",
          "size": 10016,
          "lines": 329,
          "complexity": 2,
          "dependencies": [
            "react",
            "lucide-react",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/textarea",
            "@/components/ui/card",
            "@/components/ui/badge",
            "@/hooks/use-toast",
            "@/hooks/use-wallet"
          ],
          "exports": [
            "DgtTransfer"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.10000000000000003
        },
        {
          "path": "client/src/components/economy/wallet/deposit-button.tsx",
          "domain": "economy",
          "subdomain": "deposit-button.tsx",
          "layer": "components",
          "size": 9257,
          "lines": 288,
          "complexity": 2,
          "dependencies": [
            "react",
            "lucide-react",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/hooks/use-toast",
            "@/hooks/use-wallet"
          ],
          "exports": [
            "DepositButtonProps",
            "DepositButton"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.10000000000000003
        },
        {
          "path": "client/src/components/economy/wallet/buy-dgt-button.tsx",
          "domain": "economy",
          "subdomain": "buy-dgt-button.tsx",
          "layer": "components",
          "size": 136,
          "lines": 7,
          "complexity": 0,
          "dependencies": [
            "react"
          ],
          "exports": [
            "BuyDgtButton"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/economy/wallet/animated-balance.tsx",
          "domain": "economy",
          "subdomain": "animated-balance.tsx",
          "layer": "components",
          "size": 1490,
          "lines": 64,
          "complexity": 1,
          "dependencies": [
            "react"
          ],
          "exports": [
            "AnimatedBalance"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "client/src/components/economy/wallet/WalletSheet.tsx",
          "domain": "economy",
          "subdomain": "WalletSheet.tsx",
          "layer": "components",
          "size": 19115,
          "lines": 491,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "@/components/ui/tabs",
            "@/hooks/use-wallet",
            "@/components/ui/scroll-area",
            "@/components/ui/separator",
            "@/components/ui/badge",
            "@/lib/utils"
          ],
          "exports": [
            "WalletSheet"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/components/economy/wallet/TransactionSheet.tsx",
          "domain": "economy",
          "subdomain": "TransactionSheet.tsx",
          "layer": "components",
          "size": 8408,
          "lines": 228,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/components/ui/sheet",
            "@/components/ui/button",
            "lucide-react",
            "@/components/ui/scroll-area",
            "@/components/ui/badge",
            "@/components/ui/separator",
            "@/hooks/use-wallet"
          ],
          "exports": [
            "TransactionSheet"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/economy/wallet/PackagesGrid.tsx",
          "domain": "economy",
          "subdomain": "PackagesGrid.tsx",
          "layer": "components",
          "size": 1144,
          "lines": 39,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/hooks/use-dgt-packages",
            "@/features/wallet/services/wallet-api.service",
            "lucide-react"
          ],
          "exports": [
            "PackagesGrid"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/economy/wallet/DgtPackageCard.tsx",
          "domain": "economy",
          "subdomain": "DgtPackageCard.tsx",
          "layer": "components",
          "size": 1472,
          "lines": 46,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/hooks/use-dgt-packages",
            "@/components/ui/button",
            "lucide-react"
          ],
          "exports": [
            "DgtPackageCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "DgtPackage"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/economy/xp/XPProgressBar.tsx",
          "domain": "economy",
          "subdomain": "xp",
          "layer": "components",
          "size": 6187,
          "lines": 203,
          "complexity": 3,
          "dependencies": [
            "@/lib/utils",
            "@/components/ui/progress",
            "@/lib/utils",
            "@/components/ui/badge",
            "lucide-react"
          ],
          "exports": [
            "XPProgressBar"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.1
        },
        {
          "path": "client/src/components/economy/xp/XPHistoryLog.tsx",
          "domain": "economy",
          "subdomain": "xp",
          "layer": "components",
          "size": 4560,
          "lines": 150,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/lib/utils",
            "@/hooks/useXP",
            "date-fns",
            "lucide-react",
            "@/components/ui/scroll-area",
            "@/components/ui/card",
            "@/components/ui/badge"
          ],
          "exports": [
            "XPHistoryLog"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "XpAdjustmentEntry"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "client/src/components/economy/xp/TitleSelector.tsx",
          "domain": "economy",
          "subdomain": "xp",
          "layer": "components",
          "size": 7666,
          "lines": 265,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/lib/utils",
            "@/hooks/useXP",
            "lucide-react",
            "@/components/ui/button",
            "@/components/ui/tooltip",
            "@/components/ui/card",
            "@/components/ui/badge",
            "@/components/ui/scroll-area"
          ],
          "exports": [
            "TitleSelector"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "UserTitle"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/economy/xp/LevelUpNotification.tsx",
          "domain": "economy",
          "subdomain": "xp",
          "layer": "components",
          "size": 7596,
          "lines": 256,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/lib/utils",
            "framer-motion",
            "lucide-react",
            "@/components/ui/button"
          ],
          "exports": [
            "LevelUpNotification"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/economy/xp/LevelBadge.tsx",
          "domain": "economy",
          "subdomain": "xp",
          "layer": "components",
          "size": 4553,
          "lines": 166,
          "complexity": 3,
          "dependencies": [
            "react",
            "@/lib/utils",
            "lucide-react",
            "@/components/ui/tooltip"
          ],
          "exports": [
            "LevelVisualConfig",
            "LevelBadge"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.1
        },
        {
          "path": "client/src/components/economy/badges/BadgeShowcase.tsx",
          "domain": "economy",
          "subdomain": "badges",
          "layer": "components",
          "size": 6430,
          "lines": 215,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/lib/utils",
            "@/hooks/useXP",
            "@/components/ui/tooltip",
            "@/components/ui/card",
            "@/components/ui/badge",
            "date-fns"
          ],
          "exports": [
            "BadgeShowcase"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "UserBadge"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/admin/wallet/mock-webhook-trigger.tsx",
          "domain": "economy",
          "subdomain": "mock-webhook-trigger.tsx",
          "layer": "components",
          "size": 6233,
          "lines": 226,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/label",
            "@/hooks/use-toast",
            "@tanstack/react-query",
            "@/lib/queryClient"
          ],
          "exports": [
            "MockWebhookTrigger"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.0999999999999999
        },
        {
          "path": "client/src/features/admin/components/dashboard/TippingAnalyticsCard.tsx",
          "domain": "economy",
          "layer": "components",
          "size": 11035,
          "lines": 352,
          "complexity": 1,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/components/ui/tabs",
            "@/components/ui/skeleton",
            "date-fns",
            "@/lib/queryClient"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 65,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 72,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/admin/forms/wallets/ManualDgtAdjustmentDialog.tsx",
          "domain": "economy",
          "subdomain": "ManualDgtAdjustmentDialog.tsx",
          "layer": "components",
          "size": 5070,
          "lines": 178,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/label",
            "@/hooks/use-toast"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        }
      ],
      "totalIssues": 42,
      "avgComplexity": 1.6347826086956523,
      "migrationEffort": 116.30000000000003,
      "dependencies": [
        "@degentalk/db/types",
        "@schema",
        "@db/types",
        "@db",
        "@db/types/id.types",
        "@db/schema/core/enums",
        "@shared/economy/economy.config",
        "@/hooks/use-wallet",
        "@/components/economy/wallet/wallet-balance-display",
        "@/components/economy/wallet/transaction-history",
        "@/components/economy/wallet/deposit-button",
        "@/components/economy/wallet/withdraw-button",
        "@/components/economy/wallet/buy-dgt-button",
        "@/components/economy/wallet/dgt-transfer",
        "@/hooks/use-toast",
        "@/lib/queryClient",
        "@tanstack/react-query",
        "@/features/wallet/services/wallet-api.service",
        "@/contexts/wallet-context",
        "@/types/wallet",
        "@core/logger",
        "@/hooks/useDgtPurchase",
        "@/components/payment/StripeElementsWrapper",
        "@/components/payment/PaymentForm",
        "@/components/ui/button",
        "@/components/ui/card",
        "@/components/ui/tabs",
        "@/components/ui/badge",
        "@/layout/primitives",
        "@/components/ui/input",
        "@/components/ui/textarea",
        "@/components/ui/switch",
        "@/components/ui/label",
        "@/components/ui/checkbox",
        "@/components/admin/layout/AdminPageShell",
        "@radix-ui/react-tooltip",
        "@/lib/utils",
        "@/components/ui/tooltip",
        "@stripe/stripe-js",
        "@stripe/react-stripe-js",
        "@/components/ui/dialog",
        "@/components/icons/iconRenderer",
        "@server/src/core/db",
        "@schema/economy/settings",
        "@server/src/core/logger",
        "@/lib/formatters",
        "@/components/ui/skeleton",
        "@/components/admin/common/AdminDataTable",
        "@/components/admin/layout/EntityTable",
        "@/components/admin/forms/wallets/ManualDgtAdjustmentDialog",
        "@/components/admin/wallet/mock-webhook-trigger",
        "@/components/ui/alert",
        "@/lib/adminApi",
        "@/hooks/use-auth",
        "@/components/ui/scroll-area",
        "@/components/ui/slider",
        "@/hooks/use-tip",
        "@hookform/resolvers/zod",
        "@/hooks/use-rain",
        "@/components/ui/separator",
        "@/components/ui/sheet",
        "@/hooks/use-dgt-packages",
        "@/components/ui/progress",
        "@/hooks/useXP"
      ],
      "dependents": [
        "gamification",
        "xp",
        "engagement",
        "user-management",
        "other",
        "moderation",
        "forum-core",
        "admin"
      ],
      "criticalPath": true,
      "riskAssessment": {
        "runtime": "high",
        "testing": "high",
        "integration": "high"
      },
      "migrationStrategy": {
        "priority": 1,
        "approach": "parallel",
        "estimatedDays": 24,
        "blockers": [
          "Dependencies from: gamification, xp, engagement, user-management, other, moderation, forum-core, admin"
        ],
        "prerequisites": []
      }
    },
    {
      "name": "user-management",
      "files": [
        {
          "path": "scripts/fix-userid-types.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 3145,
          "lines": 80,
          "complexity": 2,
          "dependencies": [
            "fs",
            "glob",
            "path",
            ",\\n\\t"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        },
        {
          "path": "scripts/fix-all-user-refs.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 2814,
          "lines": 84,
          "complexity": 2,
          "dependencies": [
            "fs",
            "glob",
            "path",
            ",\\n\\t"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        },
        {
          "path": "tests/e2e/admin-settings.spec.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 866,
          "lines": 27,
          "complexity": 1,
          "dependencies": [
            "@playwright/test"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "shared/enums/user.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 327,
          "lines": 16,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core"
          ],
          "exports": [
            "userRoleEnum",
            "UserRole"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/utils/seed-dev-user.ts",
          "domain": "user-management",
          "layer": "utils",
          "size": 3302,
          "lines": 89,
          "complexity": 2,
          "dependencies": [
            "@schema",
            "drizzle-orm",
            "@db",
            "crypto",
            "bcryptjs",
            "dotenv"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.4
        },
        {
          "path": "server/migrations/20250618_create_xp_clout_settings.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 879,
          "lines": 25,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm",
            "drizzle-orm/node-postgres/migrator"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "server/migrations/20250618_add_updated_by_to_site_settings.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 477,
          "lines": 14,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm",
            "drizzle-orm/node-postgres/migrator"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "server/migrations/20250513_create_xp_action_settings.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 989,
          "lines": 32,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm",
            "@db"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "scripts/seed/run-username-colors.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 5362,
          "lines": 115,
          "complexity": 1,
          "dependencies": [
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "HeatEventId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.2
        },
        {
          "path": "scripts/db/update-users-table.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 2644,
          "lines": 84,
          "complexity": 2,
          "dependencies": [
            "pg",
            "dotenv"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        },
        {
          "path": "scripts/db/seed-users.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 4621,
          "lines": 135,
          "complexity": 1,
          "dependencies": [
            "@db/types",
            "@db",
            "@schema/user/users",
            "bcrypt",
            "@faker-js/faker",
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "scripts/db/seed-user-role-migration.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 2491,
          "lines": 58,
          "complexity": 2,
          "dependencies": [
            "@db/types",
            "chalk",
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        },
        {
          "path": "scripts/db/seed-economy-settings.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 2382,
          "lines": 59,
          "complexity": 2,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        },
        {
          "path": "scripts/db/initialize-giphy-settings.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 1933,
          "lines": 68,
          "complexity": 1,
          "dependencies": [
            "@db/types",
            "@db",
            "drizzle-orm"
          ],
          "exports": [
            "initializeGiphySettings "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.2
        },
        {
          "path": "lib/forum/canUserPost.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 662,
          "lines": 29,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "User",
            "canUserPost"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "lib/auth/canUser.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 2884,
          "lines": 91,
          "complexity": 3,
          "dependencies": [
            "@schema",
            "@db",
            "drizzle-orm"
          ],
          "exports": [
            "RBACUser",
            "canUserSync"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 11,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.9000000000000004
        },
        {
          "path": "db/types/user.types.ts",
          "domain": "user-management",
          "layer": "types",
          "size": 161,
          "lines": 7,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "UserPluginData"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.5
        },
        {
          "path": "tests/e2e/fixtures/user-journeys.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 17253,
          "lines": 512,
          "complexity": 4,
          "dependencies": [
            "@faker-js/faker"
          ],
          "exports": [
            "UserJourney",
            "JourneyStep",
            "NewbieJourney",
            "WhaleJourney",
            "ForumEngagementJourney",
            "EconomicParticipationJourney",
            "validateJourneyProgression",
            "generateTestScenarioData"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.3
        },
        {
          "path": "tests/e2e/behavioral-flows/user-journey-analytics.spec.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 6080,
          "lines": 173,
          "complexity": 5,
          "dependencies": [
            "@playwright/test"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "shared/types/core/user.types.ts",
          "domain": "user-management",
          "layer": "types",
          "size": 5824,
          "lines": 253,
          "complexity": 1,
          "dependencies": [
            "@db/types/id.types",
            "@db/schema/core/enums"
          ],
          "exports": [
            "User",
            "UserSettings",
            "NotificationSettings",
            "PrivacySettings",
            "DisplaySettings",
            "UserStats",
            "UserProfile",
            "UserBadge",
            "UserTitle",
            "UserFrame",
            "UserWallet",
            "UserAchievement",
            "UserInventory",
            "InventoryItem",
            "CreateUserRequest",
            "UpdateUserRequest",
            "UserSearchParams",
            "isUser",
            "isUserProfile",
            "isUserAchievement"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "UserId",
              "WalletId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "shared/lib/forum/canUserPost.ts",
          "domain": "user-management",
          "layer": "utils",
          "size": 704,
          "lines": 30,
          "complexity": 1,
          "dependencies": [
            "@db/types"
          ],
          "exports": [
            "User",
            "canUserPost"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "shared/lib/auth/canUser.ts",
          "domain": "user-management",
          "layer": "utils",
          "size": 2422,
          "lines": 79,
          "complexity": 3,
          "dependencies": [
            "@/lib/db",
            "drizzle-orm",
            "@schema"
          ],
          "exports": [
            "UserRole",
            "RBACUser"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 15,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 3.7
        },
        {
          "path": "shared/fixtures/factories/user.factory.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 5208,
          "lines": 173,
          "complexity": 2,
          "dependencies": [
            "@schema"
          ],
          "exports": [
            "UserFactory",
            "AdminUserFactory",
            "CryptoWhaleFactory",
            "NewbieUserFactory"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "User"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        },
        {
          "path": "server/src/utils/auth.ts",
          "domain": "user-management",
          "layer": "utils",
          "size": 666,
          "lines": 18,
          "complexity": 1,
          "dependencies": [
            "express",
            "@server/src/core/services/user.service",
            "@server/src/core/logger"
          ],
          "exports": [
            "getUserIdFromRequest"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Request"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "server/src/middleware/authenticate.ts",
          "domain": "user-management",
          "layer": "middleware",
          "size": 1823,
          "lines": 77,
          "complexity": 1,
          "dependencies": [
            "express",
            "jsonwebtoken",
            "@db",
            "@schema",
            "drizzle-orm",
            "@/db/types"
          ],
          "exports": [
            "authenticate"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 12,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 3.3
        },
        {
          "path": "server/src/middleware/auth.ts",
          "domain": "user-management",
          "layer": "middleware",
          "size": 1412,
          "lines": 53,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "requireAuth",
            "requireAdmin",
            "isAdmin",
            "requireModerator",
            "authenticate "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 1.7
        },
        {
          "path": "scripts/seed/shop/username-colors.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 23617,
          "lines": 418,
          "complexity": 2,
          "dependencies": [
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types"
          ],
          "exports": [
            "UsernameColorProduct",
            "USERNAME_COLOR_PRODUCTS"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "HeatEventId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9
        },
        {
          "path": "db/schema/wallet/ccpayment-users.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 920,
          "lines": 28,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "ccpaymentUsers",
            "CCPaymentUser",
            "InsertCCPaymentUser"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/user/xShares.ts",
          "domain": "user-management",
          "subdomain": "xShares.ts",
          "layer": "other",
          "size": 654,
          "lines": 17,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm/pg-core"
          ],
          "exports": [
            "xShares",
            "XShare"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/user/verificationTokens.ts",
          "domain": "user-management",
          "subdomain": "verificationTokens.ts",
          "layer": "other",
          "size": 797,
          "lines": 20,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "verificationTokens",
            "VerificationToken",
            "InsertVerificationToken"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/user/users.ts",
          "domain": "user-management",
          "subdomain": "users.ts",
          "layer": "other",
          "size": 8692,
          "lines": 201,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm",
            "drizzle-orm",
            "drizzle-zod",
            "zod"
          ],
          "exports": [
            "users",
            "usersRelations",
            "insertUserSchema",
            "User",
            "InsertUser"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "db/schema/user/userRoles.ts",
          "domain": "user-management",
          "subdomain": "userRoles.ts",
          "layer": "other",
          "size": 871,
          "lines": 29,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "userRoles",
            "UserRole",
            "InsertUserRole"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/user/userOwnedFrames.ts",
          "domain": "user-management",
          "subdomain": "userOwnedFrames.ts",
          "layer": "other",
          "size": 1131,
          "lines": 31,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "userOwnedFrames",
            "UserOwnedFrame",
            "InsertUserOwnedFrame"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/user/userGroups.ts",
          "domain": "user-management",
          "subdomain": "userGroups.ts",
          "layer": "other",
          "size": 229,
          "lines": 8,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "userGroups"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/user/user-social-preferences.ts",
          "domain": "user-management",
          "subdomain": "user-social-preferences.ts",
          "layer": "other",
          "size": 2163,
          "lines": 43,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core"
          ],
          "exports": [
            "userSocialPreferences"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/user/subscriptions.ts",
          "domain": "user-management",
          "subdomain": "subscriptions.ts",
          "layer": "other",
          "size": 6796,
          "lines": 212,
          "complexity": 2,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "SubscriptionType",
            "SubscriptionStatus",
            "subscriptions",
            "subscriptionBenefits",
            "cosmeticDrops",
            "Subscription",
            "InsertSubscription",
            "SubscriptionBenefit",
            "InsertSubscriptionBenefit",
            "CosmeticDrop",
            "InsertCosmeticDrop",
            "DEFAULT_SUBSCRIPTION_BENEFITS"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "db/schema/user/settingsHistory.ts",
          "domain": "user-management",
          "subdomain": "settingsHistory.ts",
          "layer": "other",
          "size": 835,
          "lines": 22,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "userSettingsHistory",
            "UserSettingsHistory",
            "InsertUserSettingsHistory"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/user/sessions.ts",
          "domain": "user-management",
          "subdomain": "sessions.ts",
          "layer": "other",
          "size": 446,
          "lines": 12,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core"
          ],
          "exports": [
            "userSessions",
            "UserSession",
            "InsertUserSession"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/user/roles.ts",
          "domain": "user-management",
          "subdomain": "roles.ts",
          "layer": "other",
          "size": 1956,
          "lines": 73,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "roles",
            "Role",
            "InsertRole"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/user/rolePermissions.ts",
          "domain": "user-management",
          "subdomain": "rolePermissions.ts",
          "layer": "other",
          "size": 932,
          "lines": 29,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "rolePermissions",
            "RolePermission",
            "InsertRolePermission"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/user/relationships.ts",
          "domain": "user-management",
          "subdomain": "relationships.ts",
          "layer": "other",
          "size": 2269,
          "lines": 68,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "userRelationships",
            "UserRelationship",
            "InsertUserRelationship"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "db/schema/user/preferences.ts",
          "domain": "user-management",
          "subdomain": "preferences.ts",
          "layer": "other",
          "size": 3602,
          "lines": 88,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "userSettings",
            "notificationSettings",
            "displayPreferences",
            "UserSetting",
            "InsertUserSetting",
            "NotificationSetting",
            "InsertNotificationSetting",
            "DisplayPreference",
            "InsertDisplayPreference"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/user/permissions.ts",
          "domain": "user-management",
          "subdomain": "permissions.ts",
          "layer": "other",
          "size": 612,
          "lines": 17,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "permissions",
            "Permission",
            "InsertPermission"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/user/passwordResetTokens.ts",
          "domain": "user-management",
          "subdomain": "passwordResetTokens.ts",
          "layer": "other",
          "size": 1097,
          "lines": 39,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "passwordResetTokens",
            "PasswordResetToken",
            "InsertPasswordResetToken"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/user/featurePermissions.ts",
          "domain": "user-management",
          "subdomain": "featurePermissions.ts",
          "layer": "other",
          "size": 749,
          "lines": 14,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core"
          ],
          "exports": [
            "featurePermissions",
            "FeaturePermission",
            "InsertFeaturePermission"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/user/bans.ts",
          "domain": "user-management",
          "subdomain": "bans.ts",
          "layer": "other",
          "size": 1050,
          "lines": 36,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "userBans",
            "UserBan",
            "InsertUserBan"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/user/avatarFrames.ts",
          "domain": "user-management",
          "subdomain": "avatarFrames.ts",
          "layer": "other",
          "size": 639,
          "lines": 17,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "avatarFrames",
            "AvatarFrame",
            "InsertAvatarFrame"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/system/userReferrals.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 1025,
          "lines": 40,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "userReferrals",
            "UserReferral"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/system/userAbuseFlags.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 705,
          "lines": 22,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "userAbuseFlags",
            "UserAbuseFlag"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/system/profileAnalytics.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 1491,
          "lines": 33,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "profileAnalytics",
            "ProfileAnalytics"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/social/user-follows.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 1043,
          "lines": 31,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core"
          ],
          "exports": [
            "userFollows"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/shop/userSignatureItems.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 1124,
          "lines": 32,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "userSignatureItems",
            "UserSignatureItem",
            "InsertUserSignatureItem"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/shop/userInventory.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 2621,
          "lines": 88,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "userInventory",
            "userInventoryRelations",
            "inventoryTransactionLinks",
            "inventoryTransactionLinksRelations",
            "UserInventoryItem",
            "InsertUserInventoryItem"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/messaging/onlineUsers.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 1484,
          "lines": 43,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "onlineUsers",
            "OnlineUser",
            "InsertOnlineUser"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "db/schema/gamification/userMissionProgress.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 1258,
          "lines": 32,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "userMissionProgress",
            "UserMissionProgress",
            "InsertUserMissionProgress"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/gamification/userAchievements.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 1561,
          "lines": 58,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "userAchievements",
            "UserAchievement",
            "InsertUserAchievement"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/forum/userRuleAgreements.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 958,
          "lines": 28,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "userRulesAgreements",
            "UserRulesAgreement",
            "InsertUserRulesAgreement"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/forum/userEmojiPacks.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 933,
          "lines": 28,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "userEmojiPacks",
            "UserEmojiPack"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/economy/xpCloutSettings.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 748,
          "lines": 18,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "xpCloutSettings",
            "XpCloutSettings",
            "InsertXpCloutSettings"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/economy/xpActionSettings.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 715,
          "lines": 19,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "xpActionSettings",
            "XpActionSetting",
            "InsertXpActionSetting"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/economy/userTitles.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 777,
          "lines": 27,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "userTitles",
            "UserTitle",
            "InsertUserTitle"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/economy/userCommands.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 718,
          "lines": 20,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "userCommands",
            "UserCommand",
            "InsertUserCommand"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/economy/userCloutLog.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 1115,
          "lines": 36,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "userCloutLog",
            "UserCloutLog",
            "InsertUserCloutLog"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/economy/userBadges.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 777,
          "lines": 27,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "userBadges",
            "UserBadge",
            "InsertUserBadge"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/economy/treasurySettings.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 2182,
          "lines": 44,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm",
            "drizzle-zod"
          ],
          "exports": [
            "platformTreasurySettings",
            "insertPlatformTreasurySettingSchema",
            "PlatformTreasurySetting",
            "InsertPlatformTreasurySetting",
            "selectPlatformTreasurySettingSchema"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "db/schema/economy/settings.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 5528,
          "lines": 125,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm",
            "drizzle-zod"
          ],
          "exports": [
            "dgtEconomyParameters",
            "DgtEconomyParameter",
            "InsertDgtEconomyParameter",
            "tipSettings",
            "TipSetting",
            "InsertTipSetting",
            "rainSettings",
            "RainSetting",
            "InsertRainSetting",
            "cooldownSettings",
            "CooldownSetting",
            "InsertCooldownSetting",
            "xpCloutSettings",
            "XpCloutSetting",
            "InsertXpCloutSetting",
            "economySettings",
            "insertEconomySettingSchema",
            "EconomySetting",
            "InsertEconomySetting"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "db/schema/economy/airdropSettings.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 850,
          "lines": 16,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core"
          ],
          "exports": [
            "airdropSettings",
            "AirdropSetting",
            "InsertAirdropSetting"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/advertising/user-promotions.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 11566,
          "lines": 301,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "promotionTypeEnum",
            "promotionStatusEnum",
            "slotPriorityEnum",
            "userPromotions",
            "announcementSlots",
            "shoutboxPins",
            "promotionPricingConfig",
            "threadBoosts",
            "profileSpotlights",
            "userPromotionAnalytics",
            "UserPromotion",
            "InsertUserPromotion",
            "AnnouncementSlot",
            "InsertAnnouncementSlot",
            "ShoutboxPin",
            "InsertShoutboxPin",
            "PromotionPricingConfig",
            "InsertPromotionPricingConfig",
            "ThreadBoost",
            "InsertThreadBoost"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/admin/siteSettings.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 1203,
          "lines": 24,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "siteSettings",
            "SiteSetting",
            "InsertSiteSetting"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "client/src/types/user.ts",
          "domain": "user-management",
          "layer": "types",
          "size": 96,
          "lines": 7,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "User"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/types/profile.ts",
          "domain": "user-management",
          "layer": "types",
          "size": 1700,
          "lines": 88,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "ProfileData"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 27,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 34,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 42,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 49,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 56,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 63,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 3.1
        },
        {
          "path": "client/src/pages/auth.tsx",
          "domain": "user-management",
          "layer": "pages",
          "size": 9937,
          "lines": 333,
          "complexity": 1,
          "dependencies": [
            "react",
            "react-hook-form",
            "@hookform/resolvers/zod",
            "zod",
            "wouter",
            "@/hooks/use-auth",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/tabs",
            "lucide-react",
            "@/hooks/useSearchParams"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "client/src/hooks/useUserXP.ts",
          "domain": "user-management",
          "layer": "hooks",
          "size": 1998,
          "lines": 92,
          "complexity": 1,
          "dependencies": [
            "@tanstack/react-query",
            "@/hooks/use-toast",
            "@/lib/queryClient"
          ],
          "exports": [
            "UserXPData",
            "useUserXP"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 6,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.8
        },
        {
          "path": "client/src/hooks/useUserInventory.ts",
          "domain": "user-management",
          "layer": "hooks",
          "size": 839,
          "lines": 30,
          "complexity": 1,
          "dependencies": [
            "@tanstack/react-query",
            "@/types/inventory",
            "@/lib/queryClient"
          ],
          "exports": [
            "useUserInventory"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "UserInventoryWithProduct"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/hooks/useUserCosmetics.ts",
          "domain": "user-management",
          "layer": "hooks",
          "size": 2856,
          "lines": 90,
          "complexity": 2,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/types/inventory",
            "@/lib/queryClient",
            "@/lib/utils/applyPluginRewards"
          ],
          "exports": [
            "useUserCosmetics"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 11,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "UserInventoryWithProduct",
              "AppliedCosmetics"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1
        },
        {
          "path": "client/src/hooks/useRouteProtection.ts",
          "domain": "user-management",
          "layer": "hooks",
          "size": 2437,
          "lines": 111,
          "complexity": 3,
          "dependencies": [
            "react",
            "@/lib/roles",
            "@/lib/roles"
          ],
          "exports": [
            "useRouteProtection",
            "useRequireAuth",
            "useRequireAdmin",
            "useRequireSuperAdmin",
            "useRequireModerator",
            "useRequireRole"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Role"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.1
        },
        {
          "path": "client/src/hooks/useProfileStats.ts",
          "domain": "user-management",
          "layer": "hooks",
          "size": 2759,
          "lines": 119,
          "complexity": 2,
          "dependencies": [
            "@tanstack/react-query",
            "@/lib/queryClient"
          ],
          "exports": [
            "ExtendedProfileStats",
            "useProfileStats",
            "useProfile",
            "useProfileStatsAvailable"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/hooks/useProfileEngagement.ts",
          "domain": "user-management",
          "layer": "hooks",
          "size": 6519,
          "lines": 250,
          "complexity": 3,
          "dependencies": [
            "react",
            "@/hooks/use-auth"
          ],
          "exports": [
            "useProfileEngagement"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.1
        },
        {
          "path": "client/src/hooks/use-auth.tsx",
          "domain": "user-management",
          "layer": "hooks",
          "size": 15680,
          "lines": 500,
          "complexity": 4,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "wouter",
            "@/lib/roles",
            "@/lib/roles"
          ],
          "exports": [
            "User",
            "AuthProvider",
            "useAuth",
            "AuthProvider",
            "LoginData",
            "RegisterData"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 12,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Role"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 4.4
        },
        {
          "path": "client/src/contexts/ProfileCardContext.tsx",
          "domain": "user-management",
          "layer": "other",
          "size": 1156,
          "lines": 38,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/hooks/use-auth"
          ],
          "exports": [
            "useProfileCard",
            "ProfileCardProvider"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "archive/legacy/codemods/migrate-user-fetch.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 6535,
          "lines": 144,
          "complexity": 1,
          "dependencies": [
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "HeatEventId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "archive/legacy/codemods/identify-legacy-user-fetch.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 9447,
          "lines": 221,
          "complexity": 6,
          "dependencies": [
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "HeatEventId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9000000000000001
        },
        {
          "path": "archive/auth-cleanup-2025-06-26/auth/fix-auth.ts",
          "domain": "user-management",
          "subdomain": "auth",
          "layer": "other",
          "size": 5622,
          "lines": 166,
          "complexity": 6,
          "dependencies": [
            "fs",
            "path",
            "\\nimport { isAuthenticated, isAdminOrModerator, isAdmin } from "
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.7
        },
        {
          "path": "archive/auth-cleanup-2025-06-26/auth/auth-standardize.ts",
          "domain": "user-management",
          "subdomain": "auth",
          "layer": "other",
          "size": 5170,
          "lines": 164,
          "complexity": 5,
          "dependencies": [
            "fs",
            "path"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "archive/auth-cleanup-2025-06-26/auth/auth-refactor.ts",
          "domain": "user-management",
          "subdomain": "auth",
          "layer": "other",
          "size": 3613,
          "lines": 110,
          "complexity": 2,
          "dependencies": [
            "fs",
            "path",
            "${canonicalImportPath}",
            "${canonicalImportPath}",
            "${canonicalImportPath}"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.0999999999999999
        },
        {
          "path": "server/src/core/services/user.service.ts",
          "domain": "user-management",
          "layer": "services",
          "size": 7278,
          "lines": 310,
          "complexity": 6,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [
            "User",
            "UserProfile",
            "AuthenticatedUser",
            "userService",
            "injectUserService",
            "getUserFromRequest"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 14,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 70,
              "context": "async getUserById(userId: number): Promise<UserProfile | null> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 190,
              "context": "async isActiveUser(userId: number): Promise<boolean> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 208,
              "context": "async updateLastActive(userId: number): Promise<void> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 3.8
        },
        {
          "path": "client/src/utils/dev/mockProfile.ts",
          "domain": "user-management",
          "layer": "utils",
          "size": 1141,
          "lines": 54,
          "complexity": 1,
          "dependencies": [
            "@/types/profile"
          ],
          "exports": [
            "generateMockProfile"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ProfileData"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/types/compat/user.ts",
          "domain": "user-management",
          "layer": "types",
          "size": 133,
          "lines": 4,
          "complexity": 0,
          "dependencies": [
            "@/types/canonical.types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "CanonicalUser"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/pages/profile/xp.tsx",
          "domain": "user-management",
          "subdomain": "xp.tsx",
          "layer": "pages",
          "size": 4101,
          "lines": 125,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "framer-motion",
            "lucide-react",
            "@/components/ui/skeleton",
            "@/components/ui/progress",
            "@/components/ui/card",
            "@/components/profile/XpLogView",
            "@/hooks/useUserXP"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/pages/profile/xp-demo.tsx",
          "domain": "user-management",
          "subdomain": "xp-demo.tsx",
          "layer": "pages",
          "size": 1398,
          "lines": 48,
          "complexity": 1,
          "dependencies": [
            "react"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/pages/profile/activity.tsx",
          "domain": "user-management",
          "subdomain": "activity.tsx",
          "layer": "pages",
          "size": 1060,
          "lines": 39,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/features/activity/components/PaginatedActivityFeed",
            "@/hooks/useAuth"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/pages/profile/[username].tsx",
          "domain": "user-management",
          "layer": "pages",
          "size": 9468,
          "lines": 285,
          "complexity": 2,
          "dependencies": [
            "react",
            "wouter",
            "@tanstack/react-query",
            "@/components/ui/tabs",
            "@/components/footer",
            "@/components/profile/ProfileSidebar",
            "@/components/profile/OverviewTab",
            "@/components/profile/InventoryTab",
            "@/components/profile/FriendsTab",
            "@/components/profile/WhaleWatchTab",
            "@/components/profile/AchievementsTab",
            "@/components/profile/XPProfileSection",
            "@/components/profile/CosmeticControlPanel",
            "@/components/profile/ProfileSkeleton",
            "@/components/profile/ProfileDashboard",
            "@/components/profile/ProfileNavigation",
            "@/components/ui/seo-head",
            "@/components/ui/error-display",
            "@/components/ui/loader",
            "@/components/common/BackToHomeButton"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ProfileData"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/pages/mod/users.tsx",
          "domain": "user-management",
          "layer": "pages",
          "size": 25926,
          "lines": 838,
          "complexity": 4,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/components/ui/card",
            "@/types/core.types",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/avatar",
            "@/components/ui/input",
            "@/components/ui/label",
            "@/components/ui/textarea",
            "@/components/ui/checkbox",
            "@/components/ui/separator",
            "@/components/ui/alert",
            "@/components/ui/tabs",
            "sonner",
            "@/lib/queryClient"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 94,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 106,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ApiErrorData"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 3.5
        },
        {
          "path": "client/src/pages/admin/users.tsx",
          "domain": "user-management",
          "layer": "pages",
          "size": 15247,
          "lines": 516,
          "complexity": 6,
          "dependencies": [
            "react",
            "wouter",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/hooks/useCrudMutation",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/admin/layout/AdminPageShell",
            "@/components/admin/common/AdminDataTable",
            "@/components/admin/common/AdminDataTable",
            "@/components/admin/layout/EntityFilters",
            "@/components/admin/layout/EntityFilters",
            "@/components/admin/forms/users/UserFormDialog",
            "@/constants/routes"
          ],
          "exports": [
            "AdminUser",
            "UserFormData"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "AdminDataTableProps"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.7
        },
        {
          "path": "client/src/pages/admin/tip-rain-settings.tsx",
          "domain": "user-management",
          "layer": "pages",
          "size": 16772,
          "lines": 531,
          "complexity": 2,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "axios",
            "@/components/ui/tabs",
            "@/components/ui/switch",
            "@/components/ui/label",
            "@/components/ui/input",
            "@/components/ui/button",
            "lucide-react",
            "@/components/ui/separator",
            "@/hooks/use-toast",
            "@/components/ui/alert",
            "@/components/admin/layout/AdminPageShell"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/hooks/wrappers/use-auth-wrapper.ts",
          "domain": "user-management",
          "layer": "hooks",
          "size": 305,
          "lines": 11,
          "complexity": 0,
          "dependencies": [
            "@/hooks/use-auth"
          ],
          "exports": [
            "useAuthWrapper"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.5
        },
        {
          "path": "client/src/hooks/preferences/useUserSettings.ts",
          "domain": "user-management",
          "layer": "hooks",
          "size": 1444,
          "lines": 61,
          "complexity": 1,
          "dependencies": [
            "@tanstack/react-query",
            "@/lib/queryClient"
          ],
          "exports": [
            "UserSettingsData",
            "useUserSettings"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 9,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 25,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 34,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 4
        },
        {
          "path": "client/src/hooks/preferences/useUpdateUserSettings.ts",
          "domain": "user-management",
          "layer": "hooks",
          "size": 2231,
          "lines": 84,
          "complexity": 2,
          "dependencies": [
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/hooks/use-toast",
            "@/types/preferences.types"
          ],
          "exports": [
            "useUpdateUserSettings",
            "useUpdatePassword"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "PreferenceSection"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/components/widgets/ProfileCard.tsx",
          "domain": "user-management",
          "layer": "components",
          "size": 10154,
          "lines": 317,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "framer-motion",
            "@/components/ui/card",
            "@/components/ui/badge",
            "@/components/ui/avatar",
            "@/components/ui/progress",
            "@/components/ui/button",
            "@/hooks/use-auth",
            "@/hooks/use-wallet",
            "@/lib/utils",
            "date-fns"
          ],
          "exports": [
            "ProfileCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/users/user-avatar.tsx",
          "domain": "user-management",
          "subdomain": "user-avatar.tsx",
          "layer": "components",
          "size": 131,
          "lines": 3,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "Avatar as UserAvatar "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/users/index.ts",
          "domain": "user-management",
          "subdomain": "index.ts",
          "layer": "components",
          "size": 229,
          "lines": 7,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "default as ActiveMembersWidget "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/users/framed-avatar.tsx",
          "domain": "user-management",
          "subdomain": "framed-avatar.tsx",
          "layer": "components",
          "size": 2709,
          "lines": 112,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/lib/utils"
          ],
          "exports": [
            "FramedAvatar"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/users/Username.tsx",
          "domain": "user-management",
          "subdomain": "Username.tsx",
          "layer": "components",
          "size": 5509,
          "lines": 194,
          "complexity": 3,
          "dependencies": [
            "react",
            "@/lib/utils",
            "@/components/ui/badge",
            "@/hooks/useUserCosmetics",
            "@/lib/utils/applyPluginRewards",
            "@/contexts/ProfileCardContext"
          ],
          "exports": [
            "Username",
            "SimpleUsername",
            "Username as UserName "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.1
        },
        {
          "path": "client/src/components/users/UserFilters.tsx",
          "domain": "user-management",
          "subdomain": "UserFilters.tsx",
          "layer": "components",
          "size": 3965,
          "lines": 128,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/switch",
            "@/components/ui/label",
            "@/components/ui/input",
            "lucide-react"
          ],
          "exports": [
            "UserFilters"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/components/users/UserDirectoryTable.tsx",
          "domain": "user-management",
          "subdomain": "UserDirectoryTable.tsx",
          "layer": "components",
          "size": 6410,
          "lines": 176,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "@/components/ui/avatar",
            "@/components/ui/badge",
            "@/components/ui/card",
            "lucide-react",
            "framer-motion",
            "@/pages/degen-index"
          ],
          "exports": [
            "UserDirectoryTable"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "DegenUser"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/users/UserCard.tsx",
          "domain": "user-management",
          "subdomain": "UserCard.tsx",
          "layer": "components",
          "size": 5040,
          "lines": 147,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "@/components/ui/card",
            "@/components/ui/avatar",
            "@/components/ui/badge",
            "lucide-react",
            "framer-motion",
            "@/pages/degen-index"
          ],
          "exports": [
            "UserCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "DegenUser"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/users/UserAvatar.tsx",
          "domain": "user-management",
          "subdomain": "UserAvatar.tsx",
          "layer": "components",
          "size": 1747,
          "lines": 67,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/lib/utils"
          ],
          "exports": [
            "UserAvatar",
            "PostAvatar",
            "ThreadListAvatar",
            "ProfileAvatar",
            "MiniAvatar"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 10,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.8
        },
        {
          "path": "client/src/components/users/Avatar.tsx",
          "domain": "user-management",
          "subdomain": "Avatar.tsx",
          "layer": "components",
          "size": 2840,
          "lines": 124,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/lib/utils",
            "@/hooks/useUserCosmetics"
          ],
          "exports": [
            "Avatar",
            "SimpleAvatar"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/users/ActiveMembersWidget.tsx",
          "domain": "user-management",
          "subdomain": "ActiveMembersWidget.tsx",
          "layer": "components",
          "size": 4039,
          "lines": 120,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "@tanstack/react-query",
            "@/components/ui/avatar",
            "lucide-react",
            "framer-motion",
            "@/hooks/widgetData",
            "@/components/ui/widget-skeleton"
          ],
          "exports": [
            "ActiveUser",
            "ActiveMembersWidgetProps"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 19,
              "context": "id: number | string;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.8
        },
        {
          "path": "client/src/components/ui/user-badge.tsx",
          "domain": "user-management",
          "layer": "components",
          "size": 1009,
          "lines": 48,
          "complexity": 1,
          "dependencies": [
            "@/types/compat/user",
            "@/components/ui/badge",
            "@/lib/utils"
          ],
          "exports": [
            "UserBadge"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "User"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/preferences/session-preferences.tsx",
          "domain": "user-management",
          "layer": "components",
          "size": 6741,
          "lines": 230,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/types/compat/user",
            "@/components/ui/button",
            "@/components/ui/card",
            "@/components/ui/badge",
            "@/components/ui/separator",
            "date-fns"
          ],
          "exports": [
            "SessionPreferences"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "User"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/preferences/profile-preferences.tsx",
          "domain": "user-management",
          "layer": "components",
          "size": 6003,
          "lines": 189,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/types/compat/user",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/textarea",
            "@/components/ui/switch",
            "@/components/ui/label",
            "@/components/ui/avatar",
            "@/components/ui/card",
            "@/components/ui/separator",
            "lucide-react",
            "@/hooks/preferences/useUserSettings",
            "@/hooks/preferences/useUpdateUserSettings"
          ],
          "exports": [
            "ProfilePreferences"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "User"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/profile/rarityUtils.ts",
          "domain": "user-management",
          "subdomain": "rarityUtils.ts",
          "layer": "components",
          "size": 481,
          "lines": 12,
          "complexity": 1,
          "dependencies": [
            "@/config/rarity.config"
          ],
          "exports": [
            "getRarityColor",
            "getRarityBorderClass"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/profile/index.ts",
          "domain": "user-management",
          "subdomain": "index.ts",
          "layer": "components",
          "size": 881,
          "lines": 24,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "UnifiedProfileCard ",
            "default as ProfileCard ",
            "UserProfileRenderer ",
            "default as FriendsTab ",
            "default as InventoryTab ",
            "default as OverviewTab ",
            "default as ProfileSidebar ",
            "default as XpLogView "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/profile/XpLogView.tsx",
          "domain": "user-management",
          "subdomain": "XpLogView.tsx",
          "layer": "components",
          "size": 11051,
          "lines": 371,
          "complexity": 3,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "date-fns",
            "framer-motion",
            "@/components/ui/tabs",
            "@/components/ui/badge",
            "@/components/ui/button",
            "@/components/ui/skeleton",
            "@db/types"
          ],
          "exports": [
            "XpLogMetadata"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 58,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "OrderId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.2000000000000002
        },
        {
          "path": "client/src/components/profile/XPProgressBar.tsx",
          "domain": "user-management",
          "subdomain": "XPProgressBar.tsx",
          "layer": "components",
          "size": 5122,
          "lines": 168,
          "complexity": 3,
          "dependencies": [
            "react",
            "@/lib/utils",
            "@/components/ui/progress",
            "@/lib/utils"
          ],
          "exports": [
            "XPProgressBar"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.1
        },
        {
          "path": "client/src/components/profile/XPProfileSection.tsx",
          "domain": "user-management",
          "subdomain": "XPProfileSection.tsx",
          "layer": "components",
          "size": 2783,
          "lines": 94,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/hooks/useXP",
            "@/components/economy/xp/XPProgressBar",
            "@/components/economy/xp/XPHistoryLog",
            "@/components/economy/badges/BadgeShowcase",
            "@/components/economy/xp/TitleSelector",
            "@/components/economy/xp/LevelUpNotification",
            "@/components/ui/tabs",
            "@/components/ui/card"
          ],
          "exports": [
            "XPProfileSection"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/profile/WhaleWatchTab.tsx",
          "domain": "user-management",
          "subdomain": "WhaleWatchTab.tsx",
          "layer": "components",
          "size": 440,
          "lines": 17,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/components/social/FollowingList",
            "@/types/profile"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ProfileData"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/profile/UserTitles.tsx",
          "domain": "user-management",
          "layer": "components",
          "size": 3693,
          "lines": 133,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/lib/utils",
            "@/components/ui/tooltip",
            "@/components/ui/badge",
            "@/config/rarity.config"
          ],
          "exports": [
            "UserTitles"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 9,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 64,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.9
        },
        {
          "path": "client/src/components/profile/UserProfileRenderer.tsx",
          "domain": "user-management",
          "layer": "components",
          "size": 1612,
          "lines": 67,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/lib/utils",
            "@/types/compat/user"
          ],
          "exports": [
            "UserProfileRendererProps",
            "UserProfileRenderer"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "User"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/components/profile/UserBadges.tsx",
          "domain": "user-management",
          "layer": "components",
          "size": 3897,
          "lines": 142,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/lib/utils",
            "@/components/ui/tooltip",
            "@/config/rarity.config"
          ],
          "exports": [
            "UserBadges"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 9,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 64,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.4
        },
        {
          "path": "client/src/components/profile/UnifiedProfileCard.tsx",
          "domain": "user-management",
          "subdomain": "UnifiedProfileCard.tsx",
          "layer": "components",
          "size": 7358,
          "lines": 250,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "framer-motion",
            "@tanstack/react-query",
            "@/components/ui/card",
            "@/components/ui/badge",
            "@/components/common/LoadingCard",
            "@/components/common/StandardErrorDisplay",
            "@/components/common/StatsBar",
            "@/components/identity/AvatarFrame",
            "@/components/users/Username",
            "@/components/economy/xp/LevelBadge",
            "@/hooks/useIdentityDisplay",
            "@/config/brand.config",
            "@/lib/utils",
            "date-fns",
            "lucide-react",
            "@/types/profile"
          ],
          "exports": [
            "UnifiedProfileCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ProfileData"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/components/profile/StatCard.tsx",
          "domain": "user-management",
          "subdomain": "StatCard.tsx",
          "layer": "components",
          "size": 849,
          "lines": 27,
          "complexity": 0,
          "dependencies": [
            "react",
            "@/lib/utils"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/profile/SignatureRenderer.tsx",
          "domain": "user-management",
          "subdomain": "SignatureRenderer.tsx",
          "layer": "components",
          "size": 4592,
          "lines": 159,
          "complexity": 3,
          "dependencies": [
            "react",
            "dompurify",
            "@shared/signature/SignatureTierConfig",
            "@/hooks/useUserCosmetics",
            "@/lib/utils"
          ],
          "exports": [
            "SignatureRenderer"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.1
        },
        {
          "path": "client/src/components/profile/ProfileSkeleton.tsx",
          "domain": "user-management",
          "subdomain": "ProfileSkeleton.tsx",
          "layer": "components",
          "size": 2155,
          "lines": 75,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/skeleton"
          ],
          "exports": [
            "ProfileSkeleton"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/profile/ProfileSidebar.tsx",
          "domain": "user-management",
          "subdomain": "ProfileSidebar.tsx",
          "layer": "components",
          "size": 8846,
          "lines": 259,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "@tanstack/react-query",
            "@/components/ui/badge",
            "@/components/ui/button",
            "@/components/ui/loader",
            "@/components/messages/WhisperButton",
            "@/components/messages/WhisperModal",
            "@/lib/utils",
            "@/hooks/use-toast",
            "@/lib/queryClient",
            "@/hooks/use-auth.tsx",
            "@/types/profile",
            "@/hooks/useIdentityDisplay",
            "@/components/identity/AvatarFrame",
            "@/components/users/Username",
            "@/components/economy/xp/LevelBadge",
            "@/components/social/FollowButton",
            "@/utils/avatar"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ProfileData"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/components/profile/ProfileNavigation.tsx",
          "domain": "user-management",
          "subdomain": "ProfileNavigation.tsx",
          "layer": "components",
          "size": 6845,
          "lines": 259,
          "complexity": 2,
          "dependencies": [
            "react",
            "framer-motion",
            "lucide-react",
            "@/components/ui/tabs",
            "@/lib/utils",
            "@/hooks/use-auth"
          ],
          "exports": [
            "ProfileNavigation"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/profile/ProfileEditor.tsx",
          "domain": "user-management",
          "subdomain": "ProfileEditor.tsx",
          "layer": "components",
          "size": 17906,
          "lines": 533,
          "complexity": 3,
          "dependencies": [
            "react",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/textarea",
            "@/components/ui/label",
            "@/components/ui/tabs",
            "@/hooks/use-toast",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "lucide-react",
            "@/components/ui/file-drop-zone"
          ],
          "exports": [
            "ProfileEditor"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.1
        },
        {
          "path": "client/src/components/profile/ProfileDashboard.tsx",
          "domain": "user-management",
          "subdomain": "ProfileDashboard.tsx",
          "layer": "components",
          "size": 7144,
          "lines": 254,
          "complexity": 2,
          "dependencies": [
            "react",
            "framer-motion",
            "@/hooks/use-auth",
            "@/hooks/useProfileStats",
            "@/types/profile"
          ],
          "exports": [
            "ProfileDashboard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "ProfileData"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.0999999999999999
        },
        {
          "path": "client/src/components/profile/ProfileCard.tsx",
          "domain": "user-management",
          "subdomain": "ProfileCard.tsx",
          "layer": "components",
          "size": 743,
          "lines": 30,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/lib/utils"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/profile/OverviewTab.tsx",
          "domain": "user-management",
          "subdomain": "OverviewTab.tsx",
          "layer": "components",
          "size": 4155,
          "lines": 124,
          "complexity": 0,
          "dependencies": [
            "react",
            "lucide-react",
            "@/components/profile/XPProgressBar",
            "@/hooks/useProfileStats",
            "@/types/profile"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ProfileData"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/profile/InventoryTab.tsx",
          "domain": "user-management",
          "subdomain": "InventoryTab.tsx",
          "layer": "components",
          "size": 3483,
          "lines": 109,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/hooks/useUserInventory",
            "@/types/profile",
            "@/components/ui/skeleton",
            "@/components/ui/badge",
            "@/config/rarity.config"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ProfileData"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/components/profile/FriendsTab.tsx",
          "domain": "user-management",
          "subdomain": "FriendsTab.tsx",
          "layer": "components",
          "size": 2717,
          "lines": 86,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/skeleton",
            "@/types/profile",
            "@/hooks/useFriends",
            "@/components/ui/avatar",
            "@/components/ui/tabs"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ProfileData"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/components/profile/CosmeticControlPanel.tsx",
          "domain": "user-management",
          "subdomain": "CosmeticControlPanel.tsx",
          "layer": "components",
          "size": 11811,
          "lines": 359,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/separator",
            "@/components/ui/tabs",
            "@/lib/utils",
            "@/hooks/use-toast",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/components/users/framed-avatar",
            "lucide-react",
            "wouter",
            "@/lib/utils/applyPluginRewards",
            "@/types/inventory",
            "@db/types"
          ],
          "exports": [
            "CosmeticControlPanel"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 23,
              "context": "activeFrame?: { id: number; name: string; imageUrl: string; rarity: string } | null; // IDs for frame, title, badge are numbers",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 24,
              "context": "activeTitle?: { id: number; name: string; description: string | null; rarity: string } | null; // IDs for frame, title, badge are numbers",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 26,
              "context": "id: number; // IDs for frame, title, badge are numbers",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "UserInventoryWithProduct"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 4.2
        },
        {
          "path": "client/src/components/profile/AchievementsTab.tsx",
          "domain": "user-management",
          "subdomain": "AchievementsTab.tsx",
          "layer": "components",
          "size": 10414,
          "lines": 313,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/hooks/use-achievements",
            "@/components/ui/card",
            "@/components/ui/badge",
            "@/components/ui/button",
            "@/components/ui/progress",
            "@/components/ui/loader",
            "lucide-react",
            "@/types/profile"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ProfileData"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/components/paths/user-paths-display.tsx",
          "domain": "user-management",
          "layer": "components",
          "size": 1411,
          "lines": 53,
          "complexity": 0,
          "dependencies": [
            "react",
            "@shared/path-config",
            "@/components/ui/alert",
            "lucide-react"
          ],
          "exports": [
            "UserPathsDisplay "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.5
        },
        {
          "path": "client/src/components/layout/ProfileBackground.tsx",
          "domain": "user-management",
          "layer": "components",
          "size": 1265,
          "lines": 47,
          "complexity": 1,
          "dependencies": [
            "react"
          ],
          "exports": [
            "ProfileBackground"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/identity/UserName.tsx",
          "domain": "user-management",
          "layer": "components",
          "size": 133,
          "lines": 3,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "Username as UserName "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/header/UserMenu.tsx",
          "domain": "user-management",
          "layer": "components",
          "size": 4548,
          "lines": 181,
          "complexity": 1,
          "dependencies": [
            "react",
            "framer-motion",
            "@/components/icons/iconRenderer",
            "@/components/ui/button",
            "@/components/ui/avatar",
            "@/components/ui/progress",
            "@/config/navigation",
            "@/hooks/use-auth"
          ],
          "exports": [
            "UserMenu"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/header/AuthButtons.tsx",
          "domain": "user-management",
          "layer": "components",
          "size": 724,
          "lines": 25,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/button"
          ],
          "exports": [
            "AuthButtons"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/gamification/profile-gamification-widget.tsx",
          "domain": "user-management",
          "layer": "components",
          "size": 6591,
          "lines": 195,
          "complexity": 1,
          "dependencies": [
            "@/lib/utils",
            "@/components/ui/card",
            "@/components/ui/badge",
            "@/components/ui/progress",
            "@/components/ui/button",
            "@/components/ui/separator",
            "@/lib/utils",
            "lucide-react",
            "wouter",
            "@/features/gamification/services/gamification-api.service"
          ],
          "exports": [
            "ProfileGamificationWidget"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "UserProgression"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/forum/UserLevelDisplay.tsx",
          "domain": "user-management",
          "layer": "components",
          "size": 2806,
          "lines": 89,
          "complexity": 2,
          "dependencies": [
            "@/lib/utils",
            "lucide-react",
            "@/components/ui/badge",
            "@/components/ui/tooltip",
            "@/components/economy/xp/LevelBadge",
            "@/components/economy/xp/LevelBadge"
          ],
          "exports": [
            "UserLevelDisplay"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "LevelVisualConfig"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/forum/ThreadAuthor.tsx",
          "domain": "user-management",
          "layer": "components",
          "size": 1713,
          "lines": 69,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "@/lib/utils",
            "@/components/identity/AvatarFrame",
            "@/components/users/Username",
            "@/components/economy/xp/LevelBadge",
            "@/hooks/useIdentityDisplay"
          ],
          "exports": [
            "ThreadAuthor"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/components/forum/ProfileCard.tsx",
          "domain": "user-management",
          "layer": "components",
          "size": 1033,
          "lines": 45,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/profile/UnifiedProfileCard",
            "@/lib/utils",
            "@/types/compat/user"
          ],
          "exports": [
            "ProfileCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "User"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/errors/UserNotFound.tsx",
          "domain": "user-management",
          "layer": "components",
          "size": 5417,
          "lines": 164,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "lucide-react",
            "@/components/ui/button",
            "@/components/ui/card",
            "@tanstack/react-query",
            "@/lib/queryClient"
          ],
          "exports": [
            "UserNotFound"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/auth/withRouteProtection.tsx",
          "domain": "user-management",
          "subdomain": "withRouteProtection.tsx",
          "layer": "components",
          "size": 2103,
          "lines": 73,
          "complexity": 2,
          "dependencies": [
            "react",
            "wouter",
            "@/lib/routeConfig"
          ],
          "exports": [
            "withRouteProtection",
            "withAuth",
            "withAdmin",
            "withModerator",
            "withSuperAdmin"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/auth/protected-route.tsx",
          "domain": "user-management",
          "subdomain": "protected-route.tsx",
          "layer": "components",
          "size": 781,
          "lines": 28,
          "complexity": 0,
          "dependencies": [
            "@/hooks/use-auth",
            "lucide-react",
            "wouter",
            "wouter"
          ],
          "exports": [
            "ProtectedRoute"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "RouteProps"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.5
        },
        {
          "path": "client/src/components/auth/index.ts",
          "domain": "user-management",
          "subdomain": "index.ts",
          "layer": "components",
          "size": 802,
          "lines": 39,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "ProtectedRoute ",
            "RequireRole ",
            "RequireAuth",
            "RequireAdmin",
            "RequireSuperAdmin",
            "RequireModerator",
            "RequireDev",
            "RequireShoutboxMod",
            "RequireContentMod",
            "RequireMarketMod",
            "RequireRole as RequireSpecificRole",
            "withRouteProtection",
            "withAuth",
            "withAdmin",
            "withModerator",
            "withSuperAdmin",
            "GlobalRouteGuard",
            "useRouteAnalytics",
            "useRouteProtection",
            "useRequireAuth"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/auth/RouteGuards.tsx",
          "domain": "user-management",
          "subdomain": "RouteGuards.tsx",
          "layer": "components",
          "size": 2989,
          "lines": 142,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/lib/roles"
          ],
          "exports": [
            "RequireAuth",
            "RequireAdmin",
            "RequireSuperAdmin",
            "RequireModerator",
            "RequireDev",
            "RequireShoutboxMod",
            "RequireContentMod",
            "RequireMarketMod",
            "RequireRole"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Role"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/components/auth/RequireRole.tsx",
          "domain": "user-management",
          "subdomain": "RequireRole.tsx",
          "layer": "components",
          "size": 551,
          "lines": 23,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/hooks/use-auth",
            "@/lib/roles",
            "@/lib/roles"
          ],
          "exports": [
            "RequireRole"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Role"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/auth/ProtectedRoute.tsx",
          "domain": "user-management",
          "subdomain": "ProtectedRoute.tsx",
          "layer": "components",
          "size": 3590,
          "lines": 132,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/hooks/use-auth",
            "@/lib/roles",
            "@/lib/roles",
            "wouter",
            "lucide-react",
            "@/components/ui/alert",
            "@/components/ui/button"
          ],
          "exports": [
            "ProtectedRoute"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Role"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/auth/GlobalRouteGuard.tsx",
          "domain": "user-management",
          "subdomain": "GlobalRouteGuard.tsx",
          "layer": "components",
          "size": 3119,
          "lines": 109,
          "complexity": 3,
          "dependencies": [
            "react",
            "wouter",
            "@/hooks/use-auth",
            "@/lib/routeConfig",
            "@/lib/roles",
            "@/lib/roles"
          ],
          "exports": [
            "GlobalRouteGuard",
            "useRouteAnalytics"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Role"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.1
        },
        {
          "path": "client/src/components/admin/cooldown-settings.tsx",
          "domain": "user-management",
          "layer": "components",
          "size": 6853,
          "lines": 229,
          "complexity": 2,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "axios",
            "@/components/ui/label",
            "@/components/ui/input",
            "@/components/ui/button",
            "@/components/ui/separator",
            "@/components/ui/alert",
            "@/components/ui/slider",
            "@/hooks/use-toast",
            "lucide-react"
          ],
          "exports": [
            "CooldownSettings"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9
        },
        {
          "path": "server/src/routes/api/user/frames.ts",
          "domain": "user-management",
          "subdomain": "frames.ts",
          "layer": "routes",
          "size": 947,
          "lines": 25,
          "complexity": 1,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.8999999999999999
        },
        {
          "path": "server/src/core/repository/repositories/user-repository.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 6455,
          "lines": 249,
          "complexity": 4,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "@schema",
            "@server/src/core/logger"
          ],
          "exports": [
            "UserRepository"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 82,
              "context": "async updateLastLogin(id: number): Promise<void> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 105,
              "context": "async incrementXP(id: number, amount: number): Promise<User> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 244,
              "context": "async update(id: number | string, data: Partial<User>): Promise<User> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "IUserRepository"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 3.3
        },
        {
          "path": "server/src/core/repository/__tests__/user-repository.test.ts",
          "domain": "user-management",
          "layer": "other",
          "size": 11313,
          "lines": 486,
          "complexity": 5,
          "dependencies": [
            "vitest",
            "@schema"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "User"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2
        },
        {
          "path": "client/src/pages/admin/users/[userId].tsx",
          "domain": "user-management",
          "subdomain": "[userId].tsx",
          "layer": "pages",
          "size": 7734,
          "lines": 226,
          "complexity": 2,
          "dependencies": [
            "react",
            "wouter",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/components/ui/button",
            "@/hooks/use-toast",
            "lucide-react",
            "@/components/ui/tabs",
            "@/types/inventory",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "UserInventoryWithProduct",
              "Product"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/pages/admin/xp/user-adjustment.tsx",
          "domain": "user-management",
          "layer": "pages",
          "size": 17071,
          "lines": 566,
          "complexity": 3,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "react-hook-form",
            "@hookform/resolvers/zod",
            "zod",
            "@/hooks/use-toast",
            "lucide-react",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/economy/xp/XPProgressBar",
            "@/components/ui/textarea",
            "@/components/ui/badge",
            "@/components/admin/layout/AdminPageShell"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 63,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 74,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 75,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 203,
              "context": "const refetchUserInfo = async (userId: number) => {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 3
        },
        {
          "path": "client/src/pages/admin/xp/settings.tsx",
          "domain": "user-management",
          "layer": "pages",
          "size": 13112,
          "lines": 457,
          "complexity": 2,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "lucide-react",
            "@/hooks/use-toast",
            "@/components/ui/input",
            "@/components/ui/button",
            "@/components/ui/label",
            "@/components/ui/tooltip",
            "@/components/ui/switch",
            "@/components/ui/tabs",
            "@/components/ui/separator",
            "@/components/ui/alert",
            "@/lib/queryClient",
            "@/components/admin/layout/AdminPageShell"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/features/users/services/usersApi.ts",
          "domain": "user-management",
          "subdomain": "services",
          "layer": "services",
          "size": 1467,
          "lines": 46,
          "complexity": 2,
          "dependencies": [
            "@/lib/queryClient",
            "@/components/users/ActiveMembersWidget"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 32,
              "context": "export async function getUserDetails(userId: number | string) {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ActiveUser"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 1
        },
        {
          "path": "client/src/features/users/services/referralsApi.ts",
          "domain": "user-management",
          "subdomain": "services",
          "layer": "services",
          "size": 1261,
          "lines": 62,
          "complexity": 1,
          "dependencies": [
            "@/lib/queryClient"
          ],
          "exports": [
            "UserReferralStats",
            "ReferralLinkResponse",
            "referralsApi"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 9,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 19,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/features/users/services/index.ts",
          "domain": "user-management",
          "subdomain": "services",
          "layer": "services",
          "size": 28,
          "lines": 2,
          "complexity": 0,
          "dependencies": [],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/features/users/hooks/useUserReferrals.ts",
          "domain": "user-management",
          "subdomain": "hooks",
          "layer": "hooks",
          "size": 1713,
          "lines": 72,
          "complexity": 1,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/hooks/use-toast"
          ],
          "exports": [
            "useUserReferrals"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "UserReferralStats"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/features/users/hooks/useActiveUsers.ts",
          "domain": "user-management",
          "subdomain": "hooks",
          "layer": "hooks",
          "size": 726,
          "lines": 24,
          "complexity": 1,
          "dependencies": [
            "@tanstack/react-query",
            "@/components/users/ActiveMembersWidget"
          ],
          "exports": [
            "useActiveUsers"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ActiveUser"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/features/users/hooks/index.ts",
          "domain": "user-management",
          "subdomain": "hooks",
          "layer": "hooks",
          "size": 96,
          "lines": 3,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "default as useActiveUsers "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/features/admin/services/settingsService.ts",
          "domain": "user-management",
          "layer": "services",
          "size": 1203,
          "lines": 43,
          "complexity": 1,
          "dependencies": [
            "@tanstack/react-query",
            "@/lib/adminApi"
          ],
          "exports": [
            "useSiteSettings",
            "useUpdateSetting",
            "useFeatureFlags",
            "useToggleFeatureFlag"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/components/profile/widgets/index.ts",
          "domain": "user-management",
          "subdomain": "widgets",
          "layer": "components",
          "size": 441,
          "lines": 9,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "ReputationCard ",
            "ActivityStatsCard ",
            "WalletOverviewCard ",
            "SocialStatsCard ",
            "MilestoneCard ",
            "QuickActionsCard ",
            "ProfileInsightsCard "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/profile/widgets/WalletOverviewCard.tsx",
          "domain": "user-management",
          "subdomain": "widgets",
          "layer": "components",
          "size": 2949,
          "lines": 92,
          "complexity": 1,
          "dependencies": [
            "react",
            "lucide-react",
            "@/lib/utils"
          ],
          "exports": [
            "WalletOverviewCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/profile/widgets/SocialStatsCard.tsx",
          "domain": "user-management",
          "subdomain": "widgets",
          "layer": "components",
          "size": 2896,
          "lines": 103,
          "complexity": 1,
          "dependencies": [
            "react",
            "lucide-react",
            "@/lib/utils"
          ],
          "exports": [
            "SocialStatsCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "client/src/components/profile/widgets/ReputationCard.tsx",
          "domain": "user-management",
          "subdomain": "widgets",
          "layer": "components",
          "size": 3584,
          "lines": 114,
          "complexity": 2,
          "dependencies": [
            "react",
            "lucide-react",
            "@/lib/utils"
          ],
          "exports": [
            "ReputationCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/profile/widgets/QuickActionsCard.tsx",
          "domain": "user-management",
          "subdomain": "widgets",
          "layer": "components",
          "size": 5876,
          "lines": 222,
          "complexity": 3,
          "dependencies": [
            "react",
            "lucide-react",
            "@/components/ui/button",
            "@/lib/utils",
            "@/hooks/use-auth",
            "sonner"
          ],
          "exports": [
            "QuickActionsCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.1
        },
        {
          "path": "client/src/components/profile/widgets/ProfileInsightsCard.tsx",
          "domain": "user-management",
          "subdomain": "widgets",
          "layer": "components",
          "size": 7387,
          "lines": 259,
          "complexity": 3,
          "dependencies": [
            "react",
            "lucide-react",
            "@/lib/utils",
            "@/types/profile",
            "@/hooks/useProfileStats"
          ],
          "exports": [
            "ProfileInsightsCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ProfileData"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.1
        },
        {
          "path": "client/src/components/profile/widgets/MilestoneCard.tsx",
          "domain": "user-management",
          "subdomain": "widgets",
          "layer": "components",
          "size": 5686,
          "lines": 221,
          "complexity": 1,
          "dependencies": [
            "react",
            "lucide-react",
            "@/lib/utils"
          ],
          "exports": [
            "MilestoneCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/profile/widgets/ActivityStatsCard.tsx",
          "domain": "user-management",
          "subdomain": "widgets",
          "layer": "components",
          "size": 3194,
          "lines": 119,
          "complexity": 1,
          "dependencies": [
            "react",
            "lucide-react",
            "@/lib/utils"
          ],
          "exports": [
            "ActivityStatsCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "client/src/components/economy/badges/UserBadgesDisplay.tsx",
          "domain": "user-management",
          "layer": "components",
          "size": 5561,
          "lines": 183,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/components/ui/tooltip",
            "@/lib/utils",
            "lucide-react",
            "@/components/ui/badge",
            "@/config/rarity.config"
          ],
          "exports": [
            "UserBadge",
            "UserBadgesDisplay"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 9,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 3
        },
        {
          "path": "client/src/pages/admin/activity/user/[userId].tsx",
          "domain": "user-management",
          "subdomain": "[userId].tsx",
          "layer": "pages",
          "size": 7810,
          "lines": 254,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "@/features/activity/hooks/useActivityFeed",
            "@/features/activity/services/activityApi",
            "date-fns",
            "@/hooks/useAuth",
            "wouter",
            "@/components/admin/layout/AdminPageShell",
            "@/layout/primitives"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "client/src/components/admin/forms/users/UserFormDialog.tsx",
          "domain": "user-management",
          "subdomain": "UserFormDialog.tsx",
          "layer": "components",
          "size": 1980,
          "lines": 67,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/label",
            "@/types/admin.types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "User",
              "UserFormData"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/admin/forms/users/UserActionDialogs.tsx",
          "domain": "user-management",
          "subdomain": "UserActionDialogs.tsx",
          "layer": "components",
          "size": 5422,
          "lines": 207,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "@/components/ui/label"
          ],
          "exports": [
            "BanUserDialog",
            "UnbanUserDialog",
            "DeleteUserDialog",
            "ChangeUserRoleDialog"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        }
      ],
      "totalIssues": 42,
      "avgComplexity": 1.247191011235955,
      "migrationEffort": 184.69999999999993,
      "dependencies": [
        "@playwright/test",
        "@schema",
        "@db",
        "@db/types",
        "@schema/user/users",
        "@faker-js/faker",
        "@db/types/id.types",
        "@db/schema/core/enums",
        "@/lib/db",
        "@server/src/core/services/user.service",
        "@server/src/core/logger",
        "@/db/types",
        "@hookform/resolvers/zod",
        "@/hooks/use-auth",
        "@/components/ui/button",
        "@/components/ui/input",
        "@/components/ui/tabs",
        "@/hooks/useSearchParams",
        "@tanstack/react-query",
        "@/hooks/use-toast",
        "@/lib/queryClient",
        "@/types/inventory",
        "@/lib/utils/applyPluginRewards",
        "@/lib/roles",
        "@/types/profile",
        "@/types/canonical.types",
        "@/components/ui/skeleton",
        "@/components/ui/progress",
        "@/components/ui/card",
        "@/components/profile/XpLogView",
        "@/hooks/useUserXP",
        "@/features/activity/components/PaginatedActivityFeed",
        "@/hooks/useAuth",
        "@/components/footer",
        "@/components/profile/ProfileSidebar",
        "@/components/profile/OverviewTab",
        "@/components/profile/InventoryTab",
        "@/components/profile/FriendsTab",
        "@/components/profile/WhaleWatchTab",
        "@/components/profile/AchievementsTab",
        "@/components/profile/XPProfileSection",
        "@/components/profile/CosmeticControlPanel",
        "@/components/profile/ProfileSkeleton",
        "@/components/profile/ProfileDashboard",
        "@/components/profile/ProfileNavigation",
        "@/components/ui/seo-head",
        "@/components/ui/error-display",
        "@/components/ui/loader",
        "@/components/common/BackToHomeButton",
        "@/types/core.types",
        "@/components/ui/badge",
        "@/components/ui/avatar",
        "@/components/ui/label",
        "@/components/ui/textarea",
        "@/components/ui/checkbox",
        "@/components/ui/separator",
        "@/components/ui/alert",
        "@/hooks/useCrudMutation",
        "@/components/admin/layout/AdminPageShell",
        "@/components/admin/common/AdminDataTable",
        "@/components/admin/layout/EntityFilters",
        "@/components/admin/forms/users/UserFormDialog",
        "@/constants/routes",
        "@/components/ui/switch",
        "@/types/preferences.types",
        "@/hooks/use-wallet",
        "@/lib/utils",
        "@/hooks/useUserCosmetics",
        "@/contexts/ProfileCardContext",
        "@/pages/degen-index",
        "@/hooks/widgetData",
        "@/components/ui/widget-skeleton",
        "@/types/compat/user",
        "@/hooks/preferences/useUserSettings",
        "@/hooks/preferences/useUpdateUserSettings",
        "@/config/rarity.config",
        "@/hooks/useXP",
        "@/components/economy/xp/XPProgressBar",
        "@/components/economy/xp/XPHistoryLog",
        "@/components/economy/badges/BadgeShowcase",
        "@/components/economy/xp/TitleSelector",
        "@/components/economy/xp/LevelUpNotification",
        "@/components/social/FollowingList",
        "@/components/ui/tooltip",
        "@/components/common/LoadingCard",
        "@/components/common/StandardErrorDisplay",
        "@/components/common/StatsBar",
        "@/components/identity/AvatarFrame",
        "@/components/users/Username",
        "@/components/economy/xp/LevelBadge",
        "@/hooks/useIdentityDisplay",
        "@/config/brand.config",
        "@shared/signature/SignatureTierConfig",
        "@/components/messages/WhisperButton",
        "@/components/messages/WhisperModal",
        "@/hooks/use-auth.tsx",
        "@/components/social/FollowButton",
        "@/utils/avatar",
        "@/components/ui/file-drop-zone",
        "@/hooks/useProfileStats",
        "@/components/profile/XPProgressBar",
        "@/hooks/useUserInventory",
        "@/hooks/useFriends",
        "@/components/users/framed-avatar",
        "@/hooks/use-achievements",
        "@shared/path-config",
        "@/components/icons/iconRenderer",
        "@/config/navigation",
        "@/features/gamification/services/gamification-api.service",
        "@/components/profile/UnifiedProfileCard",
        "@/lib/routeConfig",
        "@/components/ui/slider",
        "@/components/users/ActiveMembersWidget",
        "@/lib/adminApi",
        "@/features/activity/hooks/useActivityFeed",
        "@/features/activity/services/activityApi",
        "@/layout/primitives",
        "@/types/admin.types"
      ],
      "dependents": [],
      "criticalPath": true,
      "riskAssessment": {
        "runtime": "high",
        "testing": "high",
        "integration": "low"
      },
      "migrationStrategy": {
        "priority": 1,
        "approach": "parallel",
        "estimatedDays": 37,
        "blockers": [],
        "prerequisites": []
      }
    },
    {
      "name": "shoutbox",
      "files": [
        {
          "path": "server/src/domains/shoutbox/shoutbox.routes.ts",
          "domain": "shoutbox",
          "subdomain": "shoutbox.routes.ts",
          "layer": "routes",
          "size": 19293,
          "lines": 647,
          "complexity": 10,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "express",
            "@db",
            "drizzle-orm",
            "zod",
            "@lib/auth/canUser.ts",
            "@server/src/core/logger",
            "@/db/types"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 36,
              "context": "async function userHasRoomAccess(userId: number, roomId: RoomId): Promise<boolean> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 203,
              "context": "const messageId = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 266,
              "context": "const messageIdForLog = parseInt(req.params.id); // Ensure messageId is available for logging",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 559,
              "context": "const messageId = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 635,
              "context": "const messageIdForLog = parseInt(req.params.id); // Ensure messageId is available",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 2.7
        },
        {
          "path": "server/src/domains/shoutbox/enhanced-shoutbox.routes.ts",
          "domain": "shoutbox",
          "subdomain": "enhanced-shoutbox.routes.ts",
          "layer": "routes",
          "size": 30662,
          "lines": 1073,
          "complexity": 10,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "express",
            "@db",
            "drizzle-orm",
            "zod",
            "@server/src/core/logger",
            "@server/src/core/services/rate-limit.service"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.2
        },
        {
          "path": "server/src/domains/shoutbox/services/shoutbox.service.ts",
          "domain": "shoutbox",
          "subdomain": "services",
          "layer": "services",
          "size": 24655,
          "lines": 947,
          "complexity": 10,
          "dependencies": [
            "@db",
            "drizzle-orm",
            "@server/src/core/logger",
            "@paralleldrive/cuid2",
            "@schema/admin/shoutboxConfig",
            "@/db/types"
          ],
          "exports": [
            "ShoutboxService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 30,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "NewShoutboxConfig",
              "ShoutboxConfig"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 2.3000000000000003
        },
        {
          "path": "server/src/domains/shoutbox/services/room.service.ts",
          "domain": "shoutbox",
          "subdomain": "services",
          "layer": "services",
          "size": 19678,
          "lines": 749,
          "complexity": 10,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "@server/src/core/logger",
            "@paralleldrive/cuid2",
            "@/db/types"
          ],
          "exports": [
            "CreateRoomData",
            "RoomWithStats",
            "RoomService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 29,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 491,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 555,
              "context": "static async getUserIgnoreList(userId: number, roomId?: RoomId): Promise<number[]> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 582,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 628,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": true,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "RoomId",
              "GroupId"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 2.7
        },
        {
          "path": "server/src/domains/shoutbox/services/queue.service.ts",
          "domain": "shoutbox",
          "subdomain": "services",
          "layer": "services",
          "size": 10999,
          "lines": 425,
          "complexity": 6,
          "dependencies": [
            "@server/src/core/logger",
            "events",
            "@/db/types"
          ],
          "exports": [
            "MessageQueueService",
            "messageQueue"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 18,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "RoomId",
              "MessageId"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 2.8000000000000003
        },
        {
          "path": "server/src/domains/shoutbox/services/performance.service.ts",
          "domain": "shoutbox",
          "subdomain": "services",
          "layer": "services",
          "size": 13757,
          "lines": 534,
          "complexity": 5,
          "dependencies": [
            "@db",
            "@server/src/core/logger",
            "drizzle-orm",
            "@schema",
            "@/db/types"
          ],
          "exports": [
            "PerformanceService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 281,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 211,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "RoomId"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 3.4000000000000004
        },
        {
          "path": "server/src/domains/shoutbox/services/history.service.ts",
          "domain": "shoutbox",
          "subdomain": "services",
          "layer": "services",
          "size": 22573,
          "lines": 866,
          "complexity": 10,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "@server/src/core/logger",
            "fs",
            "stream/promises",
            "stream",
            "archiver",
            "date-fns",
            "@/db/types"
          ],
          "exports": [
            "MessageHistoryService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 47,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 48,
              "context": "userId: number | null;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "RoomId"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 5.2
        },
        {
          "path": "server/src/domains/shoutbox/services/cache.service.ts",
          "domain": "shoutbox",
          "subdomain": "services",
          "layer": "services",
          "size": 10916,
          "lines": 399,
          "complexity": 3,
          "dependencies": [
            "@server/src/core/logger",
            "crypto",
            "@/db/types"
          ],
          "exports": [
            "ShoutboxCacheService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 23,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 53,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 24,
              "context": "userId: number | null;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 39,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 122,
              "context": "static cacheUserSession(userId: number, session: UserSessionCache): void {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 130,
              "context": "static getCachedUserSession(userId: number): UserSessionCache | null {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 135,
              "context": "static updateUserLastSeen(userId: number): void {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 146,
              "context": "static invalidateUserSession(userId: number): void {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 156,
              "context": "userId: number",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 163,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 221,
              "context": "static addUserToRoom(roomId: RoomId, userId: number): void {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 232,
              "context": "static removeUserFromRoom(roomId: RoomId, userId: number): void {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 246,
              "context": "static setTypingIndicator(roomId: RoomId, userId: number, username: string): void {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 259,
              "context": "static removeTypingIndicator(roomId: RoomId, userId: number): void {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "RoomId",
              "MessageId"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 5.5
        }
      ],
      "totalIssues": 30,
      "avgComplexity": 8,
      "migrationEffort": 26.8,
      "dependencies": [
        "@server/src/core/services/user.service",
        "@db",
        "@lib/auth/canUser.ts",
        "@server/src/core/logger",
        "@/db/types",
        "@server/src/core/services/rate-limit.service",
        "@paralleldrive/cuid2",
        "@schema/admin/shoutboxConfig",
        "@schema"
      ],
      "dependents": [
        "other",
        "social",
        "engagement",
        "cosmetics"
      ],
      "criticalPath": true,
      "riskAssessment": {
        "runtime": "high",
        "testing": "high",
        "integration": "high"
      },
      "migrationStrategy": {
        "priority": 1,
        "approach": "parallel",
        "estimatedDays": 6,
        "blockers": [
          "Dependencies from: other, social, engagement, cosmetics"
        ],
        "prerequisites": []
      }
    },
    {
      "name": "cosmetics",
      "files": [
        {
          "path": "server/utils/shop-utils.ts",
          "domain": "cosmetics",
          "layer": "utils",
          "size": 6596,
          "lines": 253,
          "complexity": 4,
          "dependencies": [
            "@schema",
            "drizzle-orm",
            "@db",
            "slugify"
          ],
          "exports": [
            "shopItems"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.8
        },
        {
          "path": "scripts/seed/seed-avatar-frames.ts",
          "domain": "cosmetics",
          "layer": "other",
          "size": 13678,
          "lines": 257,
          "complexity": 2,
          "dependencies": [
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types"
          ],
          "exports": [
            "seedAvatarFrames "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "HeatEventId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        },
        {
          "path": "scripts/seed/avatar-frames.ts",
          "domain": "cosmetics",
          "layer": "other",
          "size": 2633,
          "lines": 76,
          "complexity": 2,
          "dependencies": [
            "@db/types",
            "path",
            "fast-glob",
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        },
        {
          "path": "scripts/db/seed-shop.ts",
          "domain": "cosmetics",
          "layer": "other",
          "size": 623,
          "lines": 24,
          "complexity": 1,
          "dependencies": [
            "@core/logger"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "shared/types/core/cosmetics.types.ts",
          "domain": "cosmetics",
          "layer": "types",
          "size": 6856,
          "lines": 325,
          "complexity": 2,
          "dependencies": [
            "@db/types/id.types"
          ],
          "exports": [
            "ItemRarity",
            "ItemCategory",
            "ItemType",
            "ShopItem",
            "ItemPrice",
            "ItemRequirements",
            "ItemMetadata",
            "ItemEffects",
            "ItemStats",
            "ItemStock",
            "Frame",
            "FrameBorderStyle",
            "FrameAnimation",
            "Badge",
            "Title",
            "TitleEffects",
            "UserCosmetics",
            "CosmeticInventory",
            "InventoryItem",
            "EquippedItems"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "UserId",
              "ItemId",
              "FrameId",
              "BadgeId",
              "TitleId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.10000000000000003
        },
        {
          "path": "scripts/seed/shop/seed-default-cosmetics.ts",
          "domain": "cosmetics",
          "layer": "other",
          "size": 6622,
          "lines": 163,
          "complexity": 2,
          "dependencies": [
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "HeatEventId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.5999999999999999
        },
        {
          "path": "db/schema/shop/signatureItems.ts",
          "domain": "cosmetics",
          "subdomain": "signatureItems.ts",
          "layer": "other",
          "size": 873,
          "lines": 21,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "signatureShopItems",
            "SignatureShopItem",
            "InsertSignatureShopItem"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/shop/rarities.ts",
          "domain": "cosmetics",
          "subdomain": "rarities.ts",
          "layer": "other",
          "size": 1208,
          "lines": 51,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "rarities",
            "Rarity",
            "InsertRarity"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/shop/products.ts",
          "domain": "cosmetics",
          "subdomain": "products.ts",
          "layer": "other",
          "size": 3189,
          "lines": 82,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "products",
            "Product",
            "InsertProduct"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/shop/productMedia.ts",
          "domain": "cosmetics",
          "subdomain": "productMedia.ts",
          "layer": "other",
          "size": 1109,
          "lines": 39,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "productMedia",
            "ProductMedia",
            "InsertProductMedia"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/shop/productCategories.ts",
          "domain": "cosmetics",
          "subdomain": "productCategories.ts",
          "layer": "other",
          "size": 1396,
          "lines": 45,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "productCategories",
            "ProductCategory",
            "InsertProductCategory"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "AnyPgColumn"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/shop/orders.ts",
          "domain": "cosmetics",
          "subdomain": "orders.ts",
          "layer": "other",
          "size": 1824,
          "lines": 56,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "orders",
            "Order",
            "InsertOrder"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/shop/orderItems.ts",
          "domain": "cosmetics",
          "subdomain": "orderItems.ts",
          "layer": "other",
          "size": 1401,
          "lines": 44,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "orderItems",
            "OrderItem"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "db/schema/shop/cosmeticCategories.ts",
          "domain": "cosmetics",
          "layer": "other",
          "size": 1557,
          "lines": 58,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "cosmeticCategories",
            "CosmeticCategory",
            "InsertCosmeticCategory"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/shop/animationPacks.ts",
          "domain": "cosmetics",
          "subdomain": "animationPacks.ts",
          "layer": "other",
          "size": 871,
          "lines": 31,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "animationPacks",
            "AnimationPack"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/shop/animationPackItems.ts",
          "domain": "cosmetics",
          "subdomain": "animationPackItems.ts",
          "layer": "other",
          "size": 628,
          "lines": 17,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core"
          ],
          "exports": [
            "animationPackItems",
            "AnimationPackItem"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/collectibles/stickers.ts",
          "domain": "cosmetics",
          "layer": "other",
          "size": 11640,
          "lines": 280,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "stickerPacks",
            "stickers",
            "userStickerInventory",
            "userStickerPacks",
            "stickerUsage",
            "StickerPack",
            "NewStickerPack",
            "Sticker",
            "NewSticker",
            "UserStickerInventory",
            "NewUserStickerInventory",
            "UserStickerPack",
            "NewUserStickerPack",
            "StickerUsage",
            "NewStickerUsage",
            "StickerRarity",
            "StickerUnlockType",
            "StickerFormat"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "client/src/types/inventory.ts",
          "domain": "cosmetics",
          "layer": "types",
          "size": 1179,
          "lines": 47,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "PluginReward",
            "Product",
            "UserInventory",
            "UserInventoryWithProduct",
            "AppliedCosmetics"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 9,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 19,
              "context": "id: number; // This is the inventory item's own ID, should be number",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 31,
              "context": "id: number; // This is the inventory item's own ID, should be number",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 3.8
        },
        {
          "path": "client/src/pages/shop.tsx",
          "domain": "cosmetics",
          "layer": "pages",
          "size": 10812,
          "lines": 333,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/hooks/use-shop-items",
            "@/hooks/use-vault-items",
            "@/hooks/use-shop-items",
            "wouter",
            "framer-motion",
            "@/layout/primitives",
            "@/components/shop/shop-item-card",
            "@/components/ui/skeleton",
            "@/components/ui/loader",
            "@/components/ui/error-display",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/input"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "ItemCategory"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.10000000000000003
        },
        {
          "path": "client/src/hooks/use-shop-ownership.tsx",
          "domain": "cosmetics",
          "layer": "hooks",
          "size": 1842,
          "lines": 71,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/lib/queryClient",
            "@tanstack/react-query"
          ],
          "exports": [
            "useShopItemOwnership",
            "useUserInventory"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/hooks/use-shop-items.tsx",
          "domain": "cosmetics",
          "layer": "hooks",
          "size": 1924,
          "lines": 94,
          "complexity": 1,
          "dependencies": [
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/hooks/use-vault-items"
          ],
          "exports": [
            "ShopItem",
            "useShopItems",
            "useShopItem"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ItemCategory"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/config/shop-items.config.ts",
          "domain": "cosmetics",
          "layer": "other",
          "size": 3758,
          "lines": 164,
          "complexity": 3,
          "dependencies": [],
          "exports": [
            "BaseShopItem",
            "UsernameColorItem",
            "AvatarFrameItem",
            "UserTitleItem",
            "ShopItem",
            "defaultShopItems",
            "shopCategories",
            "getItemsByType",
            "getItemById",
            "isUsernameColorItem",
            "isAvatarFrameItem",
            "isUserTitleItem"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.3000000000000001
        },
        {
          "path": "client/src/config/frames.config.ts",
          "domain": "cosmetics",
          "layer": "other",
          "size": 685,
          "lines": 33,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "frameRarityConfig",
            "FrameRarity"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/cosmetics/frameEquip.service.ts",
          "domain": "cosmetics",
          "subdomain": "frameEquip.service.ts",
          "layer": "other",
          "size": 1356,
          "lines": 42,
          "complexity": 2,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [
            "frameEquipService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        },
        {
          "path": "server/src/domains/cosmetics/avatarFrameStore.service.ts",
          "domain": "cosmetics",
          "subdomain": "avatarFrameStore.service.ts",
          "layer": "other",
          "size": 3363,
          "lines": 137,
          "complexity": 2,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [
            "StoreFrame",
            "avatarFrameStoreService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 7,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.5
        },
        {
          "path": "client/src/pages/shop-management/purchase-success.tsx",
          "domain": "cosmetics",
          "subdomain": "purchase-success.tsx",
          "layer": "pages",
          "size": 3760,
          "lines": 139,
          "complexity": 1,
          "dependencies": [
            "react",
            "wouter",
            "lucide-react",
            "@/components/ui/button",
            "wouter",
            "canvas-confetti",
            "@/layout/primitives",
            "@/hooks/useSearchParams"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/pages/shop/avatar-frames.tsx",
          "domain": "cosmetics",
          "layer": "pages",
          "size": 4595,
          "lines": 149,
          "complexity": 1,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/config/frames.config",
            "@/components/users/framed-avatar",
            "@/components/ui/button",
            "@/components/ui/card",
            "@/components/ui/badge",
            "@/hooks/use-toast",
            "@/components/ui/loader",
            "lucide-react"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 14,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.8
        },
        {
          "path": "client/src/pages/admin/stickers.tsx",
          "domain": "cosmetics",
          "layer": "pages",
          "size": 23275,
          "lines": 741,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/components/admin/layout/AdminPageShell",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/badge",
            "@/components/ui/card",
            "@/components/ui/tabs",
            "@/hooks/use-toast",
            "@/features/admin/services/sticker-api.service",
            "@/config/rarity.config"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/pages/admin/roles-titles.tsx",
          "domain": "cosmetics",
          "layer": "pages",
          "size": 8376,
          "lines": 296,
          "complexity": 1,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/components/ui/card",
            "@/components/ui/tabs",
            "@/components/ui/button",
            "@/components/ui/badge",
            "lucide-react",
            "@/components/admin/layout/AdminPageShell",
            "@/lib/queryClient",
            "@/components/admin/roles/RolesSection",
            "@/components/admin/titles/TitlesSection",
            "@/components/admin/permissions/PermissionsOverview"
          ],
          "exports": [
            "Role",
            "Title",
            "Permission"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 36,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 73,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 3.9
        },
        {
          "path": "client/src/pages/admin/avatar-frames.tsx",
          "domain": "cosmetics",
          "layer": "pages",
          "size": 13753,
          "lines": 462,
          "complexity": 1,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/label",
            "@/components/ui/card",
            "@/components/ui/badge",
            "@/config/rarity.config",
            "@/hooks/use-toast",
            "lucide-react",
            "@/components/users/framed-avatar",
            "@/components/admin/GrantFrameModal",
            "@/types/compat/avatar"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 100,
              "context": "const updateMutation = useMutation<AvatarFrame, Error, { id: number; data: CreateFrameData }>({",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "AvatarFrame"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.8
        },
        {
          "path": "client/src/lib/utils/cosmeticsUtils.tsx",
          "domain": "cosmetics",
          "layer": "utils",
          "size": 4500,
          "lines": 174,
          "complexity": 3,
          "dependencies": [],
          "exports": [
            "applyPluginRewards",
            "isFeatureUnlocked",
            "getRarityColorClass",
            "renderTextWithCustomEmojis"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.3
        },
        {
          "path": "client/src/components/shop/shop-item-card.tsx",
          "domain": "cosmetics",
          "subdomain": "shop-item-card.tsx",
          "layer": "components",
          "size": 7003,
          "lines": 222,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/hooks/use-shop-items",
            "@/hooks/use-shop-ownership",
            "@/hooks/use-auth.tsx",
            "@/components/ui/badge",
            "@/components/ui/button",
            "@/components/ui/card",
            "@/components/ui/tooltip",
            "@/hooks/use-toast",
            "@/components/ui/loader"
          ],
          "exports": [
            "ShopItemCard"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ShopItem"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/shop/purchase-modal.tsx",
          "domain": "cosmetics",
          "subdomain": "purchase-modal.tsx",
          "layer": "components",
          "size": 8380,
          "lines": 271,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/hooks/use-purchase-modal",
            "@/hooks/use-toast",
            "lucide-react",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/tabs",
            "@/components/ui/alert",
            "canvas-confetti"
          ],
          "exports": [
            "PurchaseModal"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/shop/ShopItem.tsx",
          "domain": "cosmetics",
          "subdomain": "ShopItem.tsx",
          "layer": "components",
          "size": 4145,
          "lines": 150,
          "complexity": 0,
          "dependencies": [
            "react",
            "next/image",
            "framer-motion",
            "lucide-react",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/tooltip",
            "@/hooks/use-auth",
            "@/components/ui/feature-gate"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/layout/WidgetFrame.tsx",
          "domain": "cosmetics",
          "layer": "components",
          "size": 8358,
          "lines": 254,
          "complexity": 2,
          "dependencies": [
            "react",
            "react-error-boundary",
            "lucide-react",
            "@/stores/useLayoutStore",
            "@/config/widgetRegistry",
            "@/components/ui/skeleton",
            "@/components/ui/button",
            "@/contexts/shoutbox-context",
            "@/lib/utils"
          ],
          "exports": [
            "WidgetFrame"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/components/identity/AvatarFrame.tsx",
          "domain": "cosmetics",
          "layer": "components",
          "size": 1738,
          "lines": 68,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/lib/utils"
          ],
          "exports": [
            "AvatarFrame"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/admin/GrantFrameModal.tsx",
          "domain": "cosmetics",
          "layer": "components",
          "size": 2713,
          "lines": 99,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/hooks/use-toast",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/components/ui/loader",
            "@/types/compat/avatar"
          ],
          "exports": [
            "GrantFrameModal"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "AvatarFrame"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "server/src/routes/api/store/avatar-frames.ts",
          "domain": "cosmetics",
          "layer": "routes",
          "size": 2239,
          "lines": 65,
          "complexity": 2,
          "dependencies": [
            "express",
            "@db",
            "@schema",
            "drizzle-orm",
            "zod"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5999999999999999
        },
        {
          "path": "client/src/pages/admin/shop/rarities.tsx",
          "domain": "cosmetics",
          "subdomain": "rarities.tsx",
          "layer": "pages",
          "size": 6885,
          "lines": 248,
          "complexity": 2,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/components/ui/input",
            "@/components/ui/button",
            "@/components/ui/badge",
            "lucide-react",
            "zod",
            "react-hook-form",
            "@hookform/resolvers/zod",
            "@/components/admin/layout/AdminPageShell",
            "@/lib/utils"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 38,
              "context": "type Rarity = z.infer<typeof RaritySchema> & { id: number };",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 91,
              "context": "mutationFn: async (id: number) => {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 3.5999999999999996
        },
        {
          "path": "client/src/pages/admin/shop/index.tsx",
          "domain": "cosmetics",
          "subdomain": "index.tsx",
          "layer": "pages",
          "size": 4158,
          "lines": 146,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "lucide-react",
            "@/lib/queryClient",
            "@tanstack/react-query",
            "wouter",
            "@/components/admin/layout/AdminPageShell",
            "@/components/admin/common/AdminDataTable",
            "@/components/admin/layout/EntityTable",
            "@/components/ui/badge"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "ColumnDef"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 1.4
        },
        {
          "path": "client/src/pages/admin/shop/edit.tsx",
          "domain": "cosmetics",
          "subdomain": "edit.tsx",
          "layer": "pages",
          "size": 11927,
          "lines": 376,
          "complexity": 3,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/textarea",
            "@/components/ui/label",
            "@/lib/queryClient",
            "@tanstack/react-query",
            "wouter",
            "lucide-react",
            "@/hooks/use-toast"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 2.1
        },
        {
          "path": "client/src/pages/admin/shop/categories.tsx",
          "domain": "cosmetics",
          "subdomain": "categories.tsx",
          "layer": "pages",
          "size": 8266,
          "lines": 285,
          "complexity": 2,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/components/ui/input",
            "@/components/ui/button",
            "@/components/ui/badge",
            "lucide-react",
            "zod",
            "react-hook-form",
            "@hookform/resolvers/zod",
            "@/components/admin/layout/AdminPageShell",
            "@/components/admin/inputs/AdminAccessSelector",
            "@/lib/utils"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 30,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 48,
              "context": "type Category = z.infer<typeof CategorySchema> & { id: number };",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.5
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 112,
              "context": "mutationFn: async (id: number) => {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 3.7
        },
        {
          "path": "client/src/features/admin/services/sticker-api.service.ts",
          "domain": "cosmetics",
          "layer": "services",
          "size": 10917,
          "lines": 464,
          "complexity": 4,
          "dependencies": [
            "@/lib/queryClient",
            "@db/types"
          ],
          "exports": [
            "Sticker",
            "StickerPack",
            "CreateStickerData",
            "UpdateStickerData",
            "CreateStickerPackData",
            "UpdateStickerPackData",
            "ListStickersParams",
            "ListStickerPacksParams",
            "PaginatedResponse",
            "ApiResponse",
            "StickerCategories",
            "StickerPreview",
            "StickerApiService",
            "stickerApiService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 12,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 45,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 203,
              "context": "async getSticker(id: number): Promise<ApiResponse<{ sticker: Sticker }>> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 227,
              "context": "id: number,",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 240,
              "context": "async deleteSticker(id: number): Promise<ApiResponse<{ message: string }>> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 278,
              "context": "async getStickerPack(id: number): Promise<ApiResponse<{ pack: StickerPack }>> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 302,
              "context": "id: number,",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 315,
              "context": "async deleteStickerPack(id: number): Promise<ApiResponse<{ message: string }>> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 337,
              "context": "async previewSticker(id: number): Promise<ApiResponse<StickerPreview>> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "PackId",
              "StickerId"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 4.2
        },
        {
          "path": "client/src/components/admin/titles/TitlesSection.tsx",
          "domain": "cosmetics",
          "subdomain": "TitlesSection.tsx",
          "layer": "components",
          "size": 731,
          "lines": 34,
          "complexity": 1,
          "dependencies": [
            "@/components/ui/card"
          ],
          "exports": [
            "TitlesSection"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.7
        }
      ],
      "totalIssues": 22,
      "avgComplexity": 1.3409090909090908,
      "migrationEffort": 52.20000000000002,
      "dependencies": [
        "@schema",
        "@db",
        "@db/types",
        "@core/logger",
        "@db/types/id.types",
        "@/hooks/use-shop-items",
        "@/hooks/use-vault-items",
        "@/layout/primitives",
        "@/components/shop/shop-item-card",
        "@/components/ui/skeleton",
        "@/components/ui/loader",
        "@/components/ui/error-display",
        "@/components/ui/button",
        "@/components/ui/badge",
        "@/components/ui/input",
        "@/lib/queryClient",
        "@tanstack/react-query",
        "@/hooks/useSearchParams",
        "@/config/frames.config",
        "@/components/users/framed-avatar",
        "@/components/ui/card",
        "@/hooks/use-toast",
        "@/components/admin/layout/AdminPageShell",
        "@/components/ui/tabs",
        "@/features/admin/services/sticker-api.service",
        "@/config/rarity.config",
        "@/components/admin/roles/RolesSection",
        "@/components/admin/titles/TitlesSection",
        "@/components/admin/permissions/PermissionsOverview",
        "@/components/ui/label",
        "@/components/admin/GrantFrameModal",
        "@/types/compat/avatar",
        "@/hooks/use-shop-ownership",
        "@/hooks/use-auth.tsx",
        "@/components/ui/tooltip",
        "@/hooks/use-purchase-modal",
        "@/components/ui/alert",
        "@/hooks/use-auth",
        "@/components/ui/feature-gate",
        "@/stores/useLayoutStore",
        "@/config/widgetRegistry",
        "@/contexts/shoutbox-context",
        "@/lib/utils",
        "@hookform/resolvers/zod",
        "@/components/admin/common/AdminDataTable",
        "@/components/admin/layout/EntityTable",
        "@/components/ui/textarea",
        "@/components/admin/inputs/AdminAccessSelector"
      ],
      "dependents": [],
      "criticalPath": false,
      "riskAssessment": {
        "runtime": "high",
        "testing": "high",
        "integration": "low"
      },
      "migrationStrategy": {
        "priority": 3,
        "approach": "parallel",
        "estimatedDays": 11,
        "blockers": [],
        "prerequisites": []
      }
    },
    {
      "name": "missions",
      "files": [
        {
          "path": "server/src/domains/missions/missions.service.ts",
          "domain": "missions",
          "subdomain": "missions.service.ts",
          "layer": "other",
          "size": 15752,
          "lines": 637,
          "complexity": 10,
          "dependencies": [
            "@db",
            "drizzle-orm",
            "date-fns"
          ],
          "exports": [
            "MissionsService",
            "missionsService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 73,
              "context": "async getMission(id: number): Promise<Mission | null> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 124,
              "context": "async updateMission(id: number, data: Partial<Mission>): Promise<Mission | null> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 15,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 142,
              "context": "userId: number",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 189,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 426,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 4.8
        },
        {
          "path": "server/src/domains/missions/missions.routes.ts",
          "domain": "missions",
          "subdomain": "missions.routes.ts",
          "layer": "routes",
          "size": 1239,
          "lines": 26,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/missions/missions.controller.ts",
          "domain": "missions",
          "subdomain": "missions.controller.ts",
          "layer": "controllers",
          "size": 6249,
          "lines": 234,
          "complexity": 6,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express"
          ],
          "exports": [
            "getAllMissions",
            "getActiveMissions",
            "getUserMissionProgress",
            "getUserMissionProgressById",
            "createMission",
            "updateMission",
            "claimMissionReward",
            "initializeDefaultMissions",
            "resetDailyMissions",
            "resetWeeklyMissions"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7000000000000002
        },
        {
          "path": "server/src/domains/missions/missions.admin.routes.ts",
          "domain": "missions",
          "subdomain": "missions.admin.routes.ts",
          "layer": "routes",
          "size": 1338,
          "lines": 40,
          "complexity": 0,
          "dependencies": [
            "express",
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/missions/missions.admin.controller.ts",
          "domain": "missions",
          "subdomain": "missions.admin.controller.ts",
          "layer": "controllers",
          "size": 1702,
          "lines": 54,
          "complexity": 2,
          "dependencies": [
            "express"
          ],
          "exports": [
            "getMissionAuditLog"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        }
      ],
      "totalIssues": 6,
      "avgComplexity": 3.6,
      "migrationEffort": 7.9,
      "dependencies": [
        "@db",
        "@server/src/core/services/user.service"
      ],
      "dependents": [
        "cosmetics"
      ],
      "criticalPath": false,
      "riskAssessment": {
        "runtime": "high",
        "testing": "low",
        "integration": "low"
      },
      "migrationStrategy": {
        "priority": 3,
        "approach": "atomic",
        "estimatedDays": 2,
        "blockers": [
          "Dependencies from: cosmetics"
        ],
        "prerequisites": []
      }
    },
    {
      "name": "collectibles",
      "files": [
        {
          "path": "server/src/domains/collectibles/stickers/stickers.validators.ts",
          "domain": "collectibles",
          "subdomain": "stickers",
          "layer": "other",
          "size": 6529,
          "lines": 190,
          "complexity": 0,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "StickerRaritySchema",
            "StickerUnlockTypeSchema",
            "StickerFormatSchema",
            "createStickerSchema",
            "updateStickerSchema",
            "listStickersSchema",
            "createStickerPackSchema",
            "updateStickerPackSchema",
            "listStickerPacksSchema",
            "bulkDeleteStickersSchema",
            "bulkDeleteStickerPacksSchema",
            "addStickersToPackSchema",
            "removeStickersFromPackSchema",
            "stickerFileUploadSchema",
            "trackStickerUsageSchema",
            "CreateStickerInput",
            "UpdateStickerInput",
            "ListStickersInput",
            "CreateStickerPackInput",
            "UpdateStickerPackInput"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "server/src/domains/collectibles/stickers/stickers.service.ts",
          "domain": "collectibles",
          "subdomain": "stickers",
          "layer": "other",
          "size": 17363,
          "lines": 676,
          "complexity": 9,
          "dependencies": [
            "drizzle-orm",
            "@db",
            "@/db/types"
          ],
          "exports": [
            "StickerService",
            "stickerService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 163,
              "context": "async getSticker(id: number): Promise<Sticker & { packName?: string }> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 277,
              "context": "id: number,",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 344,
              "context": "async deleteSticker(id: number, adminId: string): Promise<{ message: string }> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 490,
              "context": "async getStickerPack(id: number): Promise<StickerPack> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 535,
              "context": "id: number,",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 566,
              "context": "async deleteStickerPack(id: number, adminId: string): Promise<{ message: string }> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "PackId",
              "StickerId"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 3.6000000000000005
        },
        {
          "path": "server/src/domains/collectibles/stickers/stickers.routes.ts",
          "domain": "collectibles",
          "subdomain": "stickers",
          "layer": "routes",
          "size": 2387,
          "lines": 74,
          "complexity": 0,
          "dependencies": [
            "express",
            "@server/src/domains/admin/admin.middleware"
          ],
          "exports": [
            "stickerRoutes"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/collectibles/stickers/stickers.controller.ts",
          "domain": "collectibles",
          "subdomain": "stickers",
          "layer": "controllers",
          "size": 16624,
          "lines": 590,
          "complexity": 10,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "zod",
            "@server/src/domains/admin/shared",
            "@server/src/domains/admin/admin.errors"
          ],
          "exports": [
            "StickerController",
            "stickerController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 3
        }
      ],
      "totalIssues": 6,
      "avgComplexity": 4.75,
      "migrationEffort": 7.200000000000001,
      "dependencies": [
        "@db",
        "@/db/types",
        "@server/src/domains/admin/admin.middleware",
        "@server/src/core/services/user.service",
        "@server/src/domains/admin/shared",
        "@server/src/domains/admin/admin.errors"
      ],
      "dependents": [],
      "criticalPath": false,
      "riskAssessment": {
        "runtime": "high",
        "testing": "low",
        "integration": "low"
      },
      "migrationStrategy": {
        "priority": 3,
        "approach": "atomic",
        "estimatedDays": 2,
        "blockers": [],
        "prerequisites": []
      }
    },
    {
      "name": "auth",
      "files": [
        {
          "path": "server/src/domains/auth/index.ts",
          "domain": "auth",
          "subdomain": "index.ts",
          "layer": "other",
          "size": 434,
          "lines": 18,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "ORIGINAL_AUTH_DEPRECATED",
            "default as authRoutes ",
            "setupAuthPassport",
            "isAuthenticated",
            "isAuthenticatedOptional",
            "isAdmin",
            "isModerator",
            "isAdminOrModerator"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/auth/auth.routes.ts",
          "domain": "auth",
          "subdomain": "auth.routes.ts",
          "layer": "routes",
          "size": 6527,
          "lines": 213,
          "complexity": 4,
          "dependencies": [
            "express",
            "passport",
            "passport-local",
            "express-session",
            "@server/src/core/logger"
          ],
          "exports": [
            "setupAuthPassport",
            "isAuthenticated",
            "isAuthenticatedOptional",
            "isAdmin",
            "isModerator",
            "isAdminOrModerator"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 119,
              "context": "passport.deserializeUser(async (id: number | string, done) => {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 3.6
        },
        {
          "path": "server/src/domains/auth/routes/xAuthRoutes.ts",
          "domain": "auth",
          "subdomain": "routes",
          "layer": "routes",
          "size": 505,
          "lines": 17,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/auth/services/xAuthService.ts",
          "domain": "auth",
          "subdomain": "services",
          "layer": "services",
          "size": 4215,
          "lines": 150,
          "complexity": 4,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "twitter-api-v2",
            "@server/src/core/db",
            "@schema/user/users",
            "drizzle-orm",
            "@server/src/core/logger"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7999999999999998
        },
        {
          "path": "server/src/domains/auth/services/auth.service.ts",
          "domain": "auth",
          "subdomain": "services",
          "layer": "services",
          "size": 5423,
          "lines": 188,
          "complexity": 6,
          "dependencies": [
            "@server/src/core/services/user.service",
            "crypto",
            "util",
            "@schema",
            "@db",
            "drizzle-orm",
            "@server/src/core/logger",
            "uuid",
            "bcryptjs"
          ],
          "exports": [
            "createMockUser",
            "getSessionCookieSettings",
            "getUserId"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 99,
              "context": "export async function verifyEmailToken(token: string): Promise<{ userId: number } | false> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 121,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "high",
          "migrationEffort": 1.6000000000000003
        },
        {
          "path": "server/src/domains/auth/controllers/auth.controller.ts",
          "domain": "auth",
          "subdomain": "controllers",
          "layer": "controllers",
          "size": 8726,
          "lines": 283,
          "complexity": 7,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "zod",
            "crypto",
            "passport",
            "@schema",
            "@schema",
            "@server/src/core/logger",
            "@shared/wallet.config"
          ],
          "exports": [
            "login",
            "logout",
            "getCurrentUser"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.6000000000000003
        },
        {
          "path": "server/src/domains/auth/middleware/auth.middleware.ts",
          "domain": "auth",
          "subdomain": "middleware",
          "layer": "middleware",
          "size": 7155,
          "lines": 236,
          "complexity": 5,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "@server/src/core/config/environment",
            "@server/src/core/logger",
            "@server/src/utils/environment"
          ],
          "exports": [
            "hasRole",
            "isAuthenticated",
            "isAuthenticatedOptional",
            "isAdmin",
            "isModerator",
            "isAdminOrModerator",
            "devModeAuthHandler"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        }
      ],
      "totalIssues": 3,
      "avgComplexity": 3.7142857142857144,
      "migrationEffort": 11.299999999999999,
      "dependencies": [
        "@server/src/core/logger",
        "@server/src/core/services/user.service",
        "@server/src/core/db",
        "@schema/user/users",
        "@schema",
        "@db",
        "@shared/wallet.config",
        "@server/src/core/config/environment",
        "@server/src/utils/environment"
      ],
      "dependents": [
        "other",
        "forum-core",
        "user-management",
        "moderation",
        "gamification",
        "social",
        "shoutbox",
        "profile",
        "preferences",
        "messaging",
        "forum",
        "engagement",
        "cosmetics",
        "economy",
        "admin"
      ],
      "criticalPath": true,
      "riskAssessment": {
        "runtime": "high",
        "testing": "low",
        "integration": "high"
      },
      "migrationStrategy": {
        "priority": 1,
        "approach": "atomic",
        "estimatedDays": 3,
        "blockers": [
          "Dependencies from: other, forum-core, user-management, moderation, gamification, social, shoutbox, profile, preferences, messaging, forum, engagement, cosmetics, economy, admin"
        ],
        "prerequisites": []
      }
    },
    {
      "name": "forum",
      "files": [
        {
          "path": "server/src/domains/forum/forum.service.ts",
          "domain": "forum",
          "subdomain": "forum.service.ts",
          "layer": "other",
          "size": 9909,
          "lines": 379,
          "complexity": 7,
          "dependencies": [
            "@db",
            "@server/src/core/logger",
            "@schema",
            "drizzle-orm",
            "@/db/types"
          ],
          "exports": [
            "ThreadSearchParams",
            "forumService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 161,
              "context": "async getForumById(id: number): Promise<ForumStructureWithStats | null> {",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "ForumStructureWithStats",
              "ThreadWithPostsAndUser"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.5
        },
        {
          "path": "server/src/domains/forum/forum.service.test.ts",
          "domain": "forum",
          "subdomain": "forum.service.test.ts",
          "layer": "other",
          "size": 6129,
          "lines": 235,
          "complexity": 2,
          "dependencies": [
            "@schema",
            "@db",
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.4
        },
        {
          "path": "server/src/domains/forum/forum.routes.ts",
          "domain": "forum",
          "subdomain": "forum.routes.ts",
          "layer": "routes",
          "size": 9002,
          "lines": 322,
          "complexity": 4,
          "dependencies": [
            "express",
            "express",
            "@db",
            "zod",
            "drizzle-orm",
            "@server/src/core/logger",
            "@server/src/core/errors",
            "@/db/types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7999999999999998
        },
        {
          "path": "server/src/domains/forum/forum.controller.ts",
          "domain": "forum",
          "subdomain": "forum.controller.ts",
          "layer": "controllers",
          "size": 8518,
          "lines": 264,
          "complexity": 7,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "@server/src/core/logger",
            "@/db/types",
            "@server/src/domains/auth/middleware/auth.middleware"
          ],
          "exports": [
            "forumController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.4000000000000004
        },
        {
          "path": "server/src/domains/forum/services/thread.service.ts",
          "domain": "forum",
          "subdomain": "services",
          "layer": "services",
          "size": 29486,
          "lines": 1031,
          "complexity": 10,
          "dependencies": [
            "@db",
            "@server/src/core/logger",
            "@server/src/core/cache.service",
            "drizzle-orm",
            "@/db/types"
          ],
          "exports": [
            "ThreadSearchParams",
            "ContentTab",
            "TabContentParams",
            "ThreadCreateInput",
            "ThreadService",
            "threadService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "ThreadWithUser",
              "ThreadWithPostsAndUser",
              "ThreadWithUserAndCategory"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 3
        },
        {
          "path": "server/src/domains/forum/services/thread.service.batch-optimization.ts",
          "domain": "forum",
          "subdomain": "services",
          "layer": "services",
          "size": 5236,
          "lines": 183,
          "complexity": 3,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "@server/src/core/logger",
            "@/db/types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "StructureId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.6
        },
        {
          "path": "server/src/domains/forum/services/structure.service.ts",
          "domain": "forum",
          "subdomain": "services",
          "layer": "services",
          "size": 11005,
          "lines": 334,
          "complexity": 4,
          "dependencies": [
            "@db",
            "@server/src/core/logger",
            "@schema",
            "drizzle-orm",
            "@/db/types"
          ],
          "exports": [
            "ForumStructureService",
            "forumStructureService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "ForumStructureWithStats"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7999999999999998
        },
        {
          "path": "server/src/domains/forum/services/post.service.ts",
          "domain": "forum",
          "subdomain": "services",
          "layer": "services",
          "size": 10374,
          "lines": 415,
          "complexity": 6,
          "dependencies": [
            "@db",
            "@server/src/core/logger",
            "@schema",
            "drizzle-orm",
            "@/db/types"
          ],
          "exports": [
            "PostCreateInput",
            "PostUpdateInput",
            "PostSearchParams",
            "PostService",
            "postService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "PostWithUser"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.2000000000000002
        },
        {
          "path": "server/src/domains/forum/services/permissions.service.ts",
          "domain": "forum",
          "subdomain": "services",
          "layer": "services",
          "size": 8995,
          "lines": 371,
          "complexity": 10,
          "dependencies": [
            "@server/src/core/services/user.service",
            "@db",
            "@schema",
            "drizzle-orm",
            "@server/src/core/logger",
            "@/db/types"
          ],
          "exports": [
            "User",
            "PermissionContext",
            "isAdmin",
            "isModerator",
            "canModerate",
            "canAdministrate",
            "createPermissionChecker",
            "requirePostEditPermission",
            "requirePostDeletePermission",
            "requireThreadEditPermission",
            "requireThreadDeletePermission",
            "requireThreadSolvePermission",
            "requireThreadTagPermission",
            "requireModerator",
            "requireAdmin"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "EntityId",
              "ForumId",
              "UserId",
              "PostId",
              "ThreadId"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 2.2
        },
        {
          "path": "server/src/domains/forum/services/config.service.ts",
          "domain": "forum",
          "subdomain": "services",
          "layer": "services",
          "size": 4580,
          "lines": 160,
          "complexity": 2,
          "dependencies": [
            "@server/src/core/logger",
            "@/db/types"
          ],
          "exports": [
            "ForumConfigEntry",
            "ConfigService",
            "configService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "ForumCategoryWithStats"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.10000000000000003
        },
        {
          "path": "server/src/domains/forum/services/category.service.ts",
          "domain": "forum",
          "subdomain": "services",
          "layer": "services",
          "size": 6528,
          "lines": 207,
          "complexity": 3,
          "dependencies": [
            "@db",
            "@server/src/core/logger",
            "@schema",
            "drizzle-orm",
            "@/db/types"
          ],
          "exports": [
            "CategoryService",
            "categoryService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "ForumCategoryWithStats"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.6000000000000001
        },
        {
          "path": "server/src/domains/forum/services/cache.service.ts",
          "domain": "forum",
          "subdomain": "services",
          "layer": "services",
          "size": 2396,
          "lines": 108,
          "complexity": 2,
          "dependencies": [
            "@server/src/core/logger"
          ],
          "exports": [
            "CacheService",
            "cacheService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "ForumCategoryWithStats"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.0999999999999999
        },
        {
          "path": "server/src/domains/forum/rules/rules.routes.ts",
          "domain": "forum",
          "subdomain": "rules",
          "layer": "routes",
          "size": 8103,
          "lines": 272,
          "complexity": 5,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "express",
            "@db",
            "drizzle-orm",
            "crypto",
            "zod",
            "@server/src/core/errors",
            "@server/src/utils/auth"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "conversion",
              "pattern": "Number(req.params.id)",
              "line": 69,
              "context": "const ruleId = Number(req.params.id);",
              "suggestedFix": "remove Number(), use branded type",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.3
        },
        {
          "path": "server/src/domains/forum/routes/thread.routes.ts",
          "domain": "forum",
          "subdomain": "routes",
          "layer": "routes",
          "size": 9372,
          "lines": 402,
          "complexity": 5,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "express",
            "zod",
            "@server/src/core/logger",
            "@server/src/core/errors",
            "@/db/types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.2
        },
        {
          "path": "server/src/domains/forum/routes/post.routes.ts",
          "domain": "forum",
          "subdomain": "routes",
          "layer": "routes",
          "size": 6272,
          "lines": 268,
          "complexity": 4,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "express",
            "zod",
            "@server/src/core/logger",
            "@server/src/core/errors",
            "@/db/types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7999999999999998
        },
        {
          "path": "server/src/domains/forum/routes/content.routes.ts",
          "domain": "forum",
          "subdomain": "routes",
          "layer": "routes",
          "size": 2217,
          "lines": 83,
          "complexity": 1,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "express",
            "@server/src/core/errors",
            "@/db/types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "server/src/domains/forum/routes/category.routes.ts",
          "domain": "forum",
          "subdomain": "routes",
          "layer": "routes",
          "size": 4429,
          "lines": 167,
          "complexity": 3,
          "dependencies": [
            "express",
            "express",
            "@server/src/core/logger",
            "@server/src/core/errors"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.1
        },
        {
          "path": "server/src/domains/forum/routes/bookmark.routes.ts",
          "domain": "forum",
          "subdomain": "routes",
          "layer": "routes",
          "size": 4193,
          "lines": 175,
          "complexity": 2,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "express",
            "zod",
            "@db",
            "@schema",
            "drizzle-orm",
            "@server/src/core/logger",
            "@server/src/core/errors"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.4
        },
        {
          "path": "server/src/domains/forum/sub-domains/reports/reports.validators.ts",
          "domain": "forum",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 530,
          "lines": 27,
          "complexity": 0,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "CreateReportSchema"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "server/src/domains/forum/sub-domains/reports/reports.service.ts",
          "domain": "forum",
          "subdomain": "sub-domains",
          "layer": "other",
          "size": 810,
          "lines": 38,
          "complexity": 1,
          "dependencies": [
            "@db",
            "@schema",
            "@/db/types"
          ],
          "exports": [
            "CreateReportData",
            "ReportsService",
            "reportsService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "ContentId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "server/src/domains/forum/sub-domains/reports/reports.routes.ts",
          "domain": "forum",
          "subdomain": "sub-domains",
          "layer": "routes",
          "size": 343,
          "lines": 16,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/forum/sub-domains/reports/reports.controller.ts",
          "domain": "forum",
          "subdomain": "sub-domains",
          "layer": "controllers",
          "size": 1313,
          "lines": 48,
          "complexity": 2,
          "dependencies": [
            "express",
            "@server/src/utils/auth"
          ],
          "exports": [
            "ReportsController",
            "reportsController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        }
      ],
      "totalIssues": 2,
      "avgComplexity": 3.772727272727273,
      "migrationEffort": 27.400000000000002,
      "dependencies": [
        "@db",
        "@server/src/core/logger",
        "@schema",
        "@/db/types",
        "@server/src/core/errors",
        "@server/src/core/services/user.service",
        "@server/src/domains/auth/middleware/auth.middleware",
        "@server/src/core/cache.service",
        "@server/src/utils/auth"
      ],
      "dependents": [
        "forum-core",
        "other",
        "moderation",
        "gamification"
      ],
      "criticalPath": true,
      "riskAssessment": {
        "runtime": "high",
        "testing": "low",
        "integration": "high"
      },
      "migrationStrategy": {
        "priority": 1,
        "approach": "atomic",
        "estimatedDays": 6,
        "blockers": [
          "Dependencies from: forum-core, other, moderation, gamification"
        ],
        "prerequisites": []
      }
    },
    {
      "name": "wallet",
      "files": [
        {
          "path": "server/src/domains/wallet/withdrawal.controller.ts",
          "domain": "wallet",
          "subdomain": "withdrawal.controller.ts",
          "layer": "controllers",
          "size": 12704,
          "lines": 413,
          "complexity": 4,
          "dependencies": [
            "@server/src/core/services/user.service",
            "@/db/types",
            "express",
            "@db",
            "@schema",
            "drizzle-orm",
            "@shared/wallet.config",
            "zod"
          ],
          "exports": [
            "WithdrawalController",
            "withdrawalController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "UserId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "server/src/domains/wallet/webhook.service.ts",
          "domain": "wallet",
          "subdomain": "webhook.service.ts",
          "layer": "other",
          "size": 14626,
          "lines": 590,
          "complexity": 6,
          "dependencies": [
            "@db",
            "drizzle-orm",
            "crypto"
          ],
          "exports": [
            "WebhookService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.2
        },
        {
          "path": "server/src/domains/wallet/wallet.validators.ts",
          "domain": "wallet",
          "subdomain": "wallet.validators.ts",
          "layer": "other",
          "size": 3855,
          "lines": 149,
          "complexity": 2,
          "dependencies": [
            "express",
            "zod"
          ],
          "exports": [
            "validateAmountMiddleware",
            "transferDgtSchema",
            "depositAddressSchema",
            "dgtPurchaseSchema",
            "withdrawalSchema",
            "validateTransferDgt",
            "validateCreateDepositAddress",
            "validateDgtPurchase",
            "validateWithdrawal",
            "validateRequest",
            "WalletRequestSchemas"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "server/src/domains/wallet/wallet.test.routes.ts",
          "domain": "wallet",
          "subdomain": "wallet.test.routes.ts",
          "layer": "routes",
          "size": 2660,
          "lines": 98,
          "complexity": 1,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "@server/src/utils/environment"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.8999999999999999
        },
        {
          "path": "server/src/domains/wallet/wallet.test.controller.ts",
          "domain": "wallet",
          "subdomain": "wallet.test.controller.ts",
          "layer": "controllers",
          "size": 11201,
          "lines": 424,
          "complexity": 6,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "@server/src/core/logger",
            "@server/src/utils/environment"
          ],
          "exports": [
            "WalletTestController",
            "walletTestController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.9000000000000001
        },
        {
          "path": "server/src/domains/wallet/wallet.service.ts",
          "domain": "wallet",
          "subdomain": "wallet.service.ts",
          "layer": "other",
          "size": 14090,
          "lines": 543,
          "complexity": 8,
          "dependencies": [
            "@db",
            "drizzle-orm",
            "@/db/types"
          ],
          "exports": [
            "WalletService",
            "walletService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "CoinId",
              "ActionId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.6
        },
        {
          "path": "server/src/domains/wallet/wallet.routes.ts",
          "domain": "wallet",
          "subdomain": "wallet.routes.ts",
          "layer": "routes",
          "size": 7750,
          "lines": 310,
          "complexity": 5,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "@server/src/utils/environment"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "server/src/domains/wallet/wallet.dev.controller.ts",
          "domain": "wallet",
          "subdomain": "wallet.dev.controller.ts",
          "layer": "controllers",
          "size": 6743,
          "lines": 221,
          "complexity": 5,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "@shared/wallet.config",
            "zod"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.2
        },
        {
          "path": "server/src/domains/wallet/wallet.controller.ts",
          "domain": "wallet",
          "subdomain": "wallet.controller.ts",
          "layer": "controllers",
          "size": 20264,
          "lines": 670,
          "complexity": 9,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "@shared/types/api.types",
            "@db",
            "@schema",
            "drizzle-orm",
            "crypto",
            "zod",
            "@/db/types",
            "@shared/wallet.config"
          ],
          "exports": [
            "WalletController",
            "walletController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 2.8
        },
        {
          "path": "server/src/domains/wallet/wallet.constants.ts",
          "domain": "wallet",
          "subdomain": "wallet.constants.ts",
          "layer": "other",
          "size": 896,
          "lines": 17,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "DGT_CURRENCY",
            "TRANSACTION_FEE_PERCENT",
            "MIN_WITHDRAWAL_AMOUNT",
            "MAX_WITHDRAWAL_AMOUNT",
            "SUPPORTED_CRYPTO_CURRENCIES",
            "DEFAULT_CRYPTO_PRECISION",
            "MIN_TRANSACTION_AMOUNT",
            "MAX_USER_BALANCE",
            "DGT_TREASURY_USER_ID",
            "DEFAULT_DGT_REWARD_CREATE_THREAD"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/wallet/wallet-config.service.ts",
          "domain": "wallet",
          "subdomain": "wallet-config.service.ts",
          "layer": "other",
          "size": 9470,
          "lines": 353,
          "complexity": 7,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "@shared/wallet.config",
            "@shared/wallet.config"
          ],
          "exports": [
            "WalletConfigService",
            "walletConfigService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "WalletConfig"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.6000000000000003
        },
        {
          "path": "server/src/domains/wallet/wallet-api-tests.ts",
          "domain": "wallet",
          "subdomain": "wallet-api-tests.ts",
          "layer": "other",
          "size": 8720,
          "lines": 338,
          "complexity": 7,
          "dependencies": [
            "axios",
            "zod",
            "axios"
          ],
          "exports": [
            "testGetWalletBalance",
            "testGetTransactionHistory",
            "testCreateDepositAddress",
            "testProcessDgtPurchase",
            "testTransferDGT",
            "testSendTip",
            "testSendRain",
            "runAllTests"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.6000000000000003
        },
        {
          "path": "server/src/domains/wallet/user-management.service.ts",
          "domain": "wallet",
          "subdomain": "user-management.service.ts",
          "layer": "other",
          "size": 6408,
          "lines": 242,
          "complexity": 6,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "@/db/types"
          ],
          "exports": [
            "UserManagementService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "CoinId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.2000000000000002
        },
        {
          "path": "server/src/domains/wallet/treasury.controller.ts",
          "domain": "wallet",
          "subdomain": "treasury.controller.ts",
          "layer": "controllers",
          "size": 13763,
          "lines": 470,
          "complexity": 5,
          "dependencies": [
            "@server/src/core/services/user.service",
            "@/db/types",
            "express",
            "@db",
            "drizzle-orm",
            "zod"
          ],
          "exports": [
            "TreasuryController",
            "treasuryController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "UserId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.2
        },
        {
          "path": "server/src/domains/wallet/dgt.service.ts",
          "domain": "wallet",
          "subdomain": "dgt.service.ts",
          "layer": "other",
          "size": 13846,
          "lines": 539,
          "complexity": 7,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "@/db/types"
          ],
          "exports": [
            "DGTTransactionMetadata",
            "DGTBalance",
            "DGTTransaction",
            "DGTTransferResult",
            "DGTService",
            "dgtService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "ItemId",
              "ActionId",
              "WalletId",
              "TransactionId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.4000000000000004
        },
        {
          "path": "server/src/domains/wallet/ccpayment.service.ts",
          "domain": "wallet",
          "subdomain": "ccpayment.service.ts",
          "layer": "other",
          "size": 7206,
          "lines": 283,
          "complexity": 5,
          "dependencies": [
            "@/db/types"
          ],
          "exports": [
            "CCPaymentUser",
            "WithdrawalRequest",
            "CCPaymentWithdrawalResponse",
            "CCPaymentWebhookEvent",
            "CCPaymentService",
            "ccpaymentService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "UserId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.5
        },
        {
          "path": "server/src/domains/wallet/services/ccpayment-deposit.service.ts",
          "domain": "wallet",
          "subdomain": "services",
          "layer": "services",
          "size": 5692,
          "lines": 240,
          "complexity": 3,
          "dependencies": [
            "@server/src/core/logger",
            "@server/src/core/errors"
          ],
          "exports": [
            "DepositRequest",
            "DepositAddress",
            "CCPaymentOrderStatus",
            "CCPaymentDepositService",
            "ccpaymentDepositService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.1
        },
        {
          "path": "server/src/domains/wallet/services/ccpayment-balance.service.ts",
          "domain": "wallet",
          "subdomain": "services",
          "layer": "services",
          "size": 5838,
          "lines": 242,
          "complexity": 3,
          "dependencies": [
            "@server/src/core/logger",
            "@server/src/core/errors"
          ],
          "exports": [
            "CryptoBalance",
            "TransactionResponse",
            "TransactionHistoryRequest",
            "TransactionHistoryResponse",
            "CCPaymentBalanceService",
            "ccpaymentBalanceService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.1
        },
        {
          "path": "server/src/domains/wallet/services/ccpayment-api.service.ts",
          "domain": "wallet",
          "subdomain": "services",
          "layer": "services",
          "size": 5050,
          "lines": 201,
          "complexity": 2,
          "dependencies": [
            "axios",
            "crypto",
            "@server/src/core/logger",
            "@server/src/core/errors"
          ],
          "exports": [
            "CCPaymentConfig",
            "CCPaymentApiResponse",
            "CCPaymentApiService",
            "ccpaymentApiService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.0999999999999999
        },
        {
          "path": "server/src/domains/wallet/middleware/webhook.middleware.ts",
          "domain": "wallet",
          "subdomain": "middleware",
          "layer": "middleware",
          "size": 6504,
          "lines": 255,
          "complexity": 4,
          "dependencies": [
            "express",
            "crypto"
          ],
          "exports": [
            "webhookMiddleware",
            "validateCCPaymentWebhook",
            "rateLimitWebhooks",
            "validateWebhookPayload"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.3
        },
        {
          "path": "server/src/domains/wallet/middleware/types.ts",
          "domain": "wallet",
          "subdomain": "middleware",
          "layer": "middleware",
          "size": 1439,
          "lines": 53,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [
            "SecurityMiddleware",
            "WebhookMiddleware",
            "RateLimitRecord",
            "RateLimitResult",
            "SecurityError",
            "WebhookError"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/wallet/middleware/security.middleware.ts",
          "domain": "wallet",
          "subdomain": "middleware",
          "layer": "middleware",
          "size": 9533,
          "lines": 375,
          "complexity": 6,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [
            "securityMiddleware"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.2000000000000002
        },
        {
          "path": "server/src/domains/wallet/middleware/index.ts",
          "domain": "wallet",
          "subdomain": "middleware",
          "layer": "middleware",
          "size": 619,
          "lines": 30,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "walletMiddleware",
            "securityMiddleware ",
            "webhookMiddleware",
            "validateCCPaymentWebhook",
            "rateLimitWebhooks",
            "validateWebhookPayload"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        }
      ],
      "totalIssues": 0,
      "avgComplexity": 4.391304347826087,
      "migrationEffort": 31.300000000000004,
      "dependencies": [
        "@server/src/core/services/user.service",
        "@/db/types",
        "@db",
        "@schema",
        "@shared/wallet.config",
        "@server/src/utils/environment",
        "@server/src/core/logger",
        "@shared/types/api.types",
        "@server/src/core/errors"
      ],
      "dependents": [
        "economy",
        "shop",
        "moderation",
        "user-management",
        "engagement",
        "other",
        "auth",
        "forum-core"
      ],
      "criticalPath": true,
      "riskAssessment": {
        "runtime": "high",
        "testing": "low",
        "integration": "high"
      },
      "migrationStrategy": {
        "priority": 1,
        "approach": "atomic",
        "estimatedDays": 7,
        "blockers": [
          "Dependencies from: economy, shop, moderation, user-management, engagement, other, auth, forum-core"
        ],
        "prerequisites": []
      }
    },
    {
      "name": "advertising",
      "files": [
        {
          "path": "server/src/domains/advertising/user-promotion.service.ts",
          "domain": "advertising",
          "subdomain": "user-promotion.service.ts",
          "layer": "other",
          "size": 19621,
          "lines": 770,
          "complexity": 8,
          "dependencies": [
            "drizzle-orm",
            "@server/src/core/database"
          ],
          "exports": [
            "CreatePromotionRequest",
            "PromotionCostCalculation",
            "AvailableSlot",
            "UserPromotionService",
            "userPromotionService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.6
        },
        {
          "path": "server/src/domains/advertising/user-promotion.routes.ts",
          "domain": "advertising",
          "subdomain": "user-promotion.routes.ts",
          "layer": "routes",
          "size": 13417,
          "lines": 449,
          "complexity": 8,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "zod"
          ],
          "exports": [
            "router as userPromotionRoutes "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.6
        },
        {
          "path": "server/src/domains/advertising/campaign-management.service.ts",
          "domain": "advertising",
          "subdomain": "campaign-management.service.ts",
          "layer": "other",
          "size": 14274,
          "lines": 526,
          "complexity": 6,
          "dependencies": [
            "drizzle-orm",
            "@server/src/core/database"
          ],
          "exports": [
            "CreateCampaignRequest",
            "UpdateCampaignRequest",
            "CampaignAnalytics",
            "CampaignManagementService",
            "campaignManagementService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.2
        },
        {
          "path": "server/src/domains/advertising/ad.routes.ts",
          "domain": "advertising",
          "subdomain": "ad.routes.ts",
          "layer": "routes",
          "size": 8460,
          "lines": 285,
          "complexity": 1,
          "dependencies": [
            "express"
          ],
          "exports": [
            "router as adRoutes "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "server/src/domains/advertising/ad.controller.ts",
          "domain": "advertising",
          "subdomain": "ad.controller.ts",
          "layer": "controllers",
          "size": 12579,
          "lines": 438,
          "complexity": 7,
          "dependencies": [
            "express",
            "zod"
          ],
          "exports": [
            "AdController",
            "adController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.4000000000000001
        },
        {
          "path": "server/src/domains/advertising/ad-serving.service.ts",
          "domain": "advertising",
          "subdomain": "ad-serving.service.ts",
          "layer": "other",
          "size": 13585,
          "lines": 511,
          "complexity": 7,
          "dependencies": [
            "drizzle-orm",
            "@server/src/core/database"
          ],
          "exports": [
            "AdRequest",
            "AdResponse",
            "AdServingService",
            "adServingService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.6000000000000003
        },
        {
          "path": "server/src/domains/advertising/ad-configuration.service.ts",
          "domain": "advertising",
          "subdomain": "ad-configuration.service.ts",
          "layer": "other",
          "size": 15509,
          "lines": 634,
          "complexity": 8,
          "dependencies": [
            "drizzle-orm",
            "@server/src/core/database"
          ],
          "exports": [
            "PlacementConfiguration",
            "GlobalRule",
            "AdSystemConfiguration",
            "AdConfigurationService",
            "adConfigurationService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.8
        },
        {
          "path": "server/src/domains/advertising/ad-admin.controller.ts",
          "domain": "advertising",
          "subdomain": "ad-admin.controller.ts",
          "layer": "controllers",
          "size": 15591,
          "lines": 584,
          "complexity": 8,
          "dependencies": [
            "express",
            "zod"
          ],
          "exports": [
            "AdAdminController",
            "exportData",
            "adAdminController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "high",
          "migrationEffort": 2.6
        }
      ],
      "totalIssues": 0,
      "avgComplexity": 6.625,
      "migrationEffort": 14.5,
      "dependencies": [
        "@server/src/core/database",
        "@server/src/core/services/user.service"
      ],
      "dependents": [],
      "criticalPath": false,
      "riskAssessment": {
        "runtime": "high",
        "testing": "low",
        "integration": "low"
      },
      "migrationStrategy": {
        "priority": 3,
        "approach": "atomic",
        "estimatedDays": 3,
        "blockers": [],
        "prerequisites": []
      }
    },
    {
      "name": "engagement",
      "files": [
        {
          "path": "scripts/templates/vault-domain-template.ts",
          "domain": "engagement",
          "layer": "other",
          "size": 27419,
          "lines": 997,
          "complexity": 10,
          "dependencies": [
            "@db/types",
            "express",
            "express",
            "drizzle-orm",
            "express",
            "zod",
            "vitest",
            "@db"
          ],
          "exports": [
            "vaultRoutesTemplate",
            "vaultControllerTemplate",
            "VaultController",
            "vaultController",
            "vaultServiceTemplate",
            "VaultService",
            "vaultService",
            "vaultValidatorsTemplate",
            "createVaultSchema",
            "releaseVaultSchema",
            "validateCreateVault",
            "validateReleaseVault",
            "vaultErrorCodesTemplate",
            "vaultTestTemplate",
            "createVaultDomainScript",
            "createVaultSchema",
            "releaseVaultSchema"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 254,
              "context": "async getUserVaults(userId: number) {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 310,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 386,
              "context": "async releaseVault(userId: number, vaultId: number) {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 478,
              "context": "async getVaultHistory(userId: number, page: number = 1, limit: number = 10) {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 955,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "AdminId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.7
        },
        {
          "path": "scripts/db/seed-vaults.ts",
          "domain": "engagement",
          "layer": "other",
          "size": 1579,
          "lines": 40,
          "complexity": 2,
          "dependencies": [
            "@db"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.4
        },
        {
          "path": "db/schema/system/airdrop-records.ts",
          "domain": "engagement",
          "layer": "other",
          "size": 1283,
          "lines": 25,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core"
          ],
          "exports": [
            "tokenTypeEnumAirdrop",
            "adminManualAirdropLogs",
            "AdminManualAirdropLog",
            "NewAdminManualAirdropLog"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "client/src/types/vault.types.ts",
          "domain": "engagement",
          "layer": "types",
          "size": 6028,
          "lines": 235,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "ItemCategory",
            "ItemRarity",
            "UnlockMethod",
            "SeasonType",
            "BaseVaultItem",
            "VaultFrame",
            "VaultTitle",
            "VaultColor",
            "VaultBoost",
            "VaultEvent",
            "EventRequirement",
            "EventReward",
            "AdminActionLog",
            "VaultAdminAction",
            "VaultActionDetails",
            "UserVaultItem",
            "ItemHistory",
            "VaultAdminService",
            "ItemStatistics",
            "AdminLogFilters"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/lib/rare-items-vault.ts",
          "domain": "engagement",
          "layer": "utils",
          "size": 16933,
          "lines": 713,
          "complexity": 3,
          "dependencies": [],
          "exports": [
            "ItemRarity",
            "UnlockMethod",
            "ItemCategory",
            "SeasonType",
            "BaseVaultItem",
            "VaultFrame",
            "VaultTitle",
            "VaultColor",
            "VaultBoost",
            "vaultFrames",
            "vaultTitles",
            "vaultColors",
            "vaultBoosts",
            "vaultMysteryExclusives",
            "vaultItems",
            "getItemsByCategory",
            "getItemsByRarity",
            "getLootboxItems",
            "getSeasonalItems",
            "getItemsByXpRequirement"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 2.1
        },
        {
          "path": "client/src/hooks/use-vault-items.tsx",
          "domain": "engagement",
          "layer": "hooks",
          "size": 592,
          "lines": 31,
          "complexity": 0,
          "dependencies": [
            "react"
          ],
          "exports": [
            "ItemCategory",
            "useVaultItemsForShop"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ShopItem"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/hooks/use-rain.ts",
          "domain": "engagement",
          "layer": "hooks",
          "size": 2931,
          "lines": 120,
          "complexity": 2,
          "dependencies": [
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/hooks/use-toast",
            "@db/types"
          ],
          "exports": [
            "RainParams",
            "useRain"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 17,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 25,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "RoomId",
              "ActionId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.1
        },
        {
          "path": "client/src/contexts/shoutbox-context.tsx",
          "domain": "engagement",
          "layer": "other",
          "size": 9985,
          "lines": 331,
          "complexity": 5,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/hooks/use-media-query"
          ],
          "exports": [
            "ShoutboxPosition",
            "ShoutboxEffectivePosition",
            "ShoutboxExpansionLevel",
            "ShoutboxProvider",
            "useShoutbox"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/contexts/safe-shoutbox-provider.tsx",
          "domain": "engagement",
          "layer": "other",
          "size": 1875,
          "lines": 66,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/constants/env"
          ],
          "exports": [
            "SafeShoutboxProvider"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/contexts/mock-shoutbox-context.tsx",
          "domain": "engagement",
          "layer": "other",
          "size": 6433,
          "lines": 211,
          "complexity": 3,
          "dependencies": [
            "react",
            "@/hooks/use-toast",
            "@/hooks/use-media-query"
          ],
          "exports": [
            "ShoutboxPosition",
            "ShoutboxEffectivePosition",
            "ShoutboxExpansionLevel",
            "MockShoutboxProvider",
            "useMockShoutbox"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.3000000000000001
        },
        {
          "path": "server/src/domains/engagement/engagement.service.ts",
          "domain": "engagement",
          "subdomain": "engagement.service.ts",
          "layer": "other",
          "size": 4432,
          "lines": 166,
          "complexity": 3,
          "dependencies": [
            "@db",
            "@/db/types"
          ],
          "exports": [
            "EngagementService",
            "engagementService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 43,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 124,
              "context": "async getUserEngagementStats(userId: number) {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "AdminUserId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.3
        },
        {
          "path": "client/src/components/shoutbox/shoutbox.spec.tsx",
          "domain": "engagement",
          "subdomain": "shoutbox.spec.tsx",
          "layer": "components",
          "size": 1049,
          "lines": 36,
          "complexity": 1,
          "dependencies": [
            "@/test/utils/renderWithProviders",
            "vitest",
            "@/contexts/shoutbox-context"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/shoutbox/shoutbox-widget.tsx",
          "domain": "engagement",
          "subdomain": "shoutbox-widget.tsx",
          "layer": "components",
          "size": 27705,
          "lines": 878,
          "complexity": 4,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "axios",
            "date-fns",
            "@/components/ui/card",
            "@/components/ui/input",
            "@/components/ui/button",
            "@/components/identity/AvatarFrame",
            "@/components/users/Username",
            "@/components/economy/xp/LevelBadge",
            "@/components/ui/tooltip",
            "@/components/ui/tabs",
            "@/hooks/use-toast",
            "@/contexts/shoutbox-context",
            "@/hooks/useIdentityDisplay",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 58,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 67,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 79,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "GroupId",
              "MessageId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 3.8
        },
        {
          "path": "client/src/components/shoutbox/shoutbox-position-selector.tsx",
          "domain": "engagement",
          "subdomain": "shoutbox-position-selector.tsx",
          "layer": "components",
          "size": 8692,
          "lines": 267,
          "complexity": 2,
          "dependencies": [
            "react",
            "lucide-react",
            "@/components/ui/popover",
            "@/components/ui/button",
            "@/components/ui/radio-group",
            "@/components/ui/label",
            "@/contexts/shoutbox-context",
            "@/contexts/shoutbox-context",
            "@/hooks/use-toast",
            "@/hooks/use-media-query",
            "@/stores/useLayoutStore"
          ],
          "exports": [
            "ShoutboxPositionSelector"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ShoutboxPosition"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/components/shoutbox/shoutbox-help-command.tsx",
          "domain": "engagement",
          "subdomain": "shoutbox-help-command.tsx",
          "layer": "components",
          "size": 3224,
          "lines": 125,
          "complexity": 1,
          "dependencies": [
            "react"
          ],
          "exports": [
            "processHelpCommand"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/shoutbox/positioned-shoutbox.tsx",
          "domain": "engagement",
          "subdomain": "positioned-shoutbox.tsx",
          "layer": "components",
          "size": 5617,
          "lines": 178,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/contexts/shoutbox-context",
            "@/contexts/shoutbox-context",
            "react-dom",
            "lucide-react"
          ],
          "exports": [
            "PositionedShoutbox"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ShoutboxEffectivePosition"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/shoutbox/integration-example.tsx",
          "domain": "engagement",
          "subdomain": "integration-example.tsx",
          "layer": "components",
          "size": 3185,
          "lines": 96,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/hooks/use-rain-notifications"
          ],
          "exports": [
            "ShoutboxWithRainSupport"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/components/shoutbox/index.ts",
          "domain": "engagement",
          "subdomain": "index.ts",
          "layer": "components",
          "size": 702,
          "lines": 14,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "default as ShoutboxWidget ",
            "PositionedShoutbox ",
            "ShoutboxPositionSelector ",
            "ShoutboxRainNotification",
            "RainNotifications",
            "StyledShoutboxMessage",
            "detectMessageType",
            "default as ShoutboxHelpCommand",
            "processHelpCommand"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "client/src/components/shoutbox/ShoutboxInput.tsx",
          "domain": "engagement",
          "subdomain": "ShoutboxInput.tsx",
          "layer": "components",
          "size": 3618,
          "lines": 135,
          "complexity": 1,
          "dependencies": [
            "react",
            "lucide-react",
            "@/components/ui/input",
            "@/components/ui/button",
            "@/hooks/use-mentions",
            "@/components/mentions/MentionAutocomplete"
          ],
          "exports": [
            "ShoutboxInput"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/shoutbox/ShoutboxContainer.tsx",
          "domain": "engagement",
          "subdomain": "ShoutboxContainer.tsx",
          "layer": "components",
          "size": 6337,
          "lines": 194,
          "complexity": 1,
          "dependencies": [
            "react",
            "lucide-react",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/hooks/use-auth",
            "@/hooks/use-toast",
            "@/components/ui/input",
            "@/components/ui/button",
            "@/components/ui/avatar",
            "@/components/ui/badge",
            "@/components/ui/skeleton",
            "@/components/ui/feature-gate",
            "@/components/users/Username",
            "@/components/economy/wallet/rain-button"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 27,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1
        },
        {
          "path": "server/src/domains/engagement/tip/tip.service.ts",
          "domain": "engagement",
          "subdomain": "tip",
          "layer": "other",
          "size": 9216,
          "lines": 346,
          "complexity": 4,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "uuid"
          ],
          "exports": [
            "TipRequest",
            "TipResponse",
            "TipService",
            "tipService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 78,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 292,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2
        },
        {
          "path": "server/src/domains/engagement/tip/tip.routes.ts",
          "domain": "engagement",
          "subdomain": "tip",
          "layer": "routes",
          "size": 1798,
          "lines": 58,
          "complexity": 0,
          "dependencies": [
            "express",
            "zod"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "server/src/domains/engagement/tip/tip.controller.ts",
          "domain": "engagement",
          "subdomain": "tip",
          "layer": "controllers",
          "size": 3514,
          "lines": 134,
          "complexity": 2,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "zod"
          ],
          "exports": [
            "TipController",
            "tipController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        },
        {
          "path": "server/src/domains/engagement/vault/vault.service.ts",
          "domain": "engagement",
          "subdomain": "vault",
          "layer": "other",
          "size": 9758,
          "lines": 358,
          "complexity": 6,
          "dependencies": [
            "@db",
            "drizzle-orm",
            "@/db/types"
          ],
          "exports": [
            "VaultLockOptions",
            "VaultService",
            "vaultService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 25,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 274,
              "context": "async getUserVaultLocks(userId: number): Promise<any[]> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 298,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "UnlockTransactionId",
              "VaultLockId",
              "ActionId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.5
        },
        {
          "path": "server/src/domains/engagement/vault/vault.routes.ts",
          "domain": "engagement",
          "subdomain": "vault",
          "layer": "routes",
          "size": 10322,
          "lines": 393,
          "complexity": 6,
          "dependencies": [
            "express",
            "express",
            "zod",
            "@db",
            "drizzle-orm",
            "@schema",
            "@server/src/utils/auth"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.4000000000000001
        },
        {
          "path": "server/src/domains/engagement/vault/vault.controller.ts",
          "domain": "engagement",
          "subdomain": "vault",
          "layer": "controllers",
          "size": 5897,
          "lines": 223,
          "complexity": 4,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "@server/src/core/errors"
          ],
          "exports": [
            "VaultController",
            "vaultController"
          ],
          "idPatterns": [
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 97,
              "context": "const vaultLockId = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.4
        },
        {
          "path": "server/src/domains/engagement/airdrop/airdrop.service.ts",
          "domain": "engagement",
          "subdomain": "airdrop",
          "layer": "other",
          "size": 11003,
          "lines": 457,
          "complexity": 5,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "uuid",
            "@/db/types"
          ],
          "exports": [
            "AirdropOptions",
            "AirdropResult",
            "AirdropService",
            "airdropService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 36,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "AdminUserId",
              "AirdropId",
              "ActionId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.1
        },
        {
          "path": "server/src/domains/engagement/airdrop/airdrop.routes.ts",
          "domain": "engagement",
          "subdomain": "airdrop",
          "layer": "routes",
          "size": 1862,
          "lines": 69,
          "complexity": 1,
          "dependencies": [
            "express"
          ],
          "exports": [
            "registerAirdropRoutes"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "server/src/domains/engagement/airdrop/airdrop.controller.ts",
          "domain": "engagement",
          "subdomain": "airdrop",
          "layer": "controllers",
          "size": 5084,
          "lines": 194,
          "complexity": 4,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express"
          ],
          "exports": [
            "AirdropController",
            "airdropController"
          ],
          "idPatterns": [
            {
              "type": "conversion",
              "pattern": "parseInt(req.params.id)",
              "line": 158,
              "context": "const airdropId = parseInt(req.params.id);",
              "suggestedFix": "remove parseInt, use branded type",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.4
        },
        {
          "path": "server/src/domains/engagement/rain/rain.service.ts",
          "domain": "engagement",
          "subdomain": "rain",
          "layer": "other",
          "size": 15153,
          "lines": 563,
          "complexity": 8,
          "dependencies": [
            "@db",
            "drizzle-orm",
            "@/db/types"
          ],
          "exports": [
            "RainService",
            "rainService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 63,
              "context": "recipients: Array<{ id: number; username: string }>;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 372,
              "context": "private async checkCooldowns(userId: number, commandType: 'tip' | 'rain'): Promise<void> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 467,
              "context": "private async updateLastCommandTime(userId: number, commandType: 'tip' | 'rain'): Promise<void> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 520,
              "context": "async updateRainSettings(userId: number, settings: any) {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "ActionId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 3
        },
        {
          "path": "server/src/domains/engagement/rain/rain.routes.ts",
          "domain": "engagement",
          "subdomain": "rain",
          "layer": "routes",
          "size": 1848,
          "lines": 61,
          "complexity": 0,
          "dependencies": [
            "express",
            "zod"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "server/src/domains/engagement/rain/rain.controller.ts",
          "domain": "engagement",
          "subdomain": "rain",
          "layer": "controllers",
          "size": 3137,
          "lines": 133,
          "complexity": 2,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "zod"
          ],
          "exports": [
            "RainController",
            "rainController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        }
      ],
      "totalIssues": 25,
      "avgComplexity": 2.6875,
      "migrationEffort": 41.199999999999996,
      "dependencies": [
        "@db/types",
        "@db",
        "@tanstack/react-query",
        "@/lib/queryClient",
        "@/hooks/use-toast",
        "@/hooks/use-media-query",
        "@/constants/env",
        "@/db/types",
        "@/test/utils/renderWithProviders",
        "@/contexts/shoutbox-context",
        "@/components/ui/card",
        "@/components/ui/input",
        "@/components/ui/button",
        "@/components/identity/AvatarFrame",
        "@/components/users/Username",
        "@/components/economy/xp/LevelBadge",
        "@/components/ui/tooltip",
        "@/components/ui/tabs",
        "@/hooks/useIdentityDisplay",
        "@/components/ui/popover",
        "@/components/ui/radio-group",
        "@/components/ui/label",
        "@/stores/useLayoutStore",
        "@/hooks/use-rain-notifications",
        "@/hooks/use-mentions",
        "@/components/mentions/MentionAutocomplete",
        "@/hooks/use-auth",
        "@/components/ui/avatar",
        "@/components/ui/badge",
        "@/components/ui/skeleton",
        "@/components/ui/feature-gate",
        "@/components/economy/wallet/rain-button",
        "@schema",
        "@server/src/core/services/user.service",
        "@server/src/utils/auth",
        "@server/src/core/errors"
      ],
      "dependents": [],
      "criticalPath": false,
      "riskAssessment": {
        "runtime": "medium",
        "testing": "high",
        "integration": "low"
      },
      "migrationStrategy": {
        "priority": 3,
        "approach": "parallel",
        "estimatedDays": 9,
        "blockers": [],
        "prerequisites": []
      }
    },
    {
      "name": "social",
      "files": [
        {
          "path": "scripts/migration/fix-shoutbox-message-id.ts",
          "domain": "social",
          "layer": "other",
          "size": 1148,
          "lines": 41,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm",
            "chalk"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "scripts/db/seed-dev-subscriptions.ts",
          "domain": "social",
          "layer": "other",
          "size": 5960,
          "lines": 144,
          "complexity": 2,
          "dependencies": [
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types",
            "@db/types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "HeatEventId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        },
        {
          "path": "server/src/cron/subscription-management.ts",
          "domain": "social",
          "layer": "other",
          "size": 3578,
          "lines": 115,
          "complexity": 4,
          "dependencies": [
            "node-cron"
          ],
          "exports": [
            "initializeSubscriptionJobs"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.3
        },
        {
          "path": "db/schema/system/notifications.ts",
          "domain": "social",
          "layer": "other",
          "size": 1454,
          "lines": 44,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "notifications",
            "Notification",
            "InsertNotification"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "db/schema/social/friends.ts",
          "domain": "social",
          "layer": "other",
          "size": 4235,
          "lines": 119,
          "complexity": 1,
          "dependencies": [],
          "exports": [
            "friendshipStatusEnum",
            "friendships",
            "userFriendPreferences",
            "friendGroups",
            "friendGroupMembers"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "db/schema/messaging/shoutboxMessages.ts",
          "domain": "social",
          "layer": "other",
          "size": 1690,
          "lines": 55,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm",
            "drizzle-zod",
            "zod"
          ],
          "exports": [
            "shoutboxMessages",
            "insertShoutboxMessageSchema",
            "ShoutboxMessage",
            "InsertShoutboxMessage"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/messaging/messages.ts",
          "domain": "social",
          "layer": "other",
          "size": 1736,
          "lines": 51,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "messages",
            "Message"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "db/schema/messaging/messageReads.ts",
          "domain": "social",
          "layer": "other",
          "size": 880,
          "lines": 27,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm/pg-core",
            "drizzle-orm"
          ],
          "exports": [
            "messageReads",
            "MessageRead"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "db/schema/messaging/directMessages.ts",
          "domain": "social",
          "layer": "other",
          "size": 1783,
          "lines": 54,
          "complexity": 0,
          "dependencies": [
            "drizzle-orm",
            "drizzle-zod",
            "zod"
          ],
          "exports": [
            "directMessages",
            "insertDirectMessageSchema",
            "DirectMessage",
            "InsertDirectMessage"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "client/src/types/notifications.ts",
          "domain": "social",
          "layer": "types",
          "size": 521,
          "lines": 28,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "Notification",
            "NotificationData",
            "NotificationsParams"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 5,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 6,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.7
        },
        {
          "path": "client/src/hooks/useFriends.ts",
          "domain": "social",
          "layer": "hooks",
          "size": 2264,
          "lines": 74,
          "complexity": 2,
          "dependencies": [
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/hooks/use-auth.tsx"
          ],
          "exports": [
            "FriendUserLite",
            "useFriends"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/hooks/use-rain-notifications.ts",
          "domain": "social",
          "layer": "hooks",
          "size": 3073,
          "lines": 105,
          "complexity": 2,
          "dependencies": [
            "react",
            "@/components/shoutbox/shoutbox-rain-notification",
            "@/hooks/use-auth"
          ],
          "exports": [
            "useRainNotifications"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.9
        },
        {
          "path": "client/src/hooks/use-notifications.ts",
          "domain": "social",
          "layer": "hooks",
          "size": 1186,
          "lines": 44,
          "complexity": 1,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/hooks/use-toast",
            "@/types/notifications",
            "@/core/api"
          ],
          "exports": [
            "useNotifications"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Notification"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/hooks/use-messages.tsx",
          "domain": "social",
          "layer": "hooks",
          "size": 3836,
          "lines": 158,
          "complexity": 2,
          "dependencies": [
            "@tanstack/react-query"
          ],
          "exports": [
            "Message",
            "Conversation",
            "SendMessagePayload",
            "useMessages"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 4,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 3
        },
        {
          "path": "server/src/domains/social/whale-watch.service.ts",
          "domain": "social",
          "subdomain": "whale-watch.service.ts",
          "layer": "other",
          "size": 8150,
          "lines": 308,
          "complexity": 4,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [
            "FollowUser",
            "FollowCounts",
            "WhaleWatchService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.1
        },
        {
          "path": "server/src/domains/social/whale-watch.routes.ts",
          "domain": "social",
          "subdomain": "whale-watch.routes.ts",
          "layer": "routes",
          "size": 6292,
          "lines": 231,
          "complexity": 5,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "zod",
            "@server/src/core/logger"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.2
        },
        {
          "path": "server/src/domains/social/social.routes.ts",
          "domain": "social",
          "subdomain": "social.routes.ts",
          "layer": "routes",
          "size": 389,
          "lines": 14,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [
            "router as socialRoutes "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/social/relationships.routes.ts",
          "domain": "social",
          "subdomain": "relationships.routes.ts",
          "layer": "routes",
          "size": 6662,
          "lines": 235,
          "complexity": 4,
          "dependencies": [
            "express",
            "express",
            "@db",
            "@schema",
            "drizzle-orm",
            "@server/src/utils/auth"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "server/src/domains/social/mentions.types.ts",
          "domain": "social",
          "subdomain": "mentions.types.ts",
          "layer": "other",
          "size": 1086,
          "lines": 52,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "MentionType",
            "MentionRecord",
            "UserMentionPreferences",
            "MentionUser",
            "ProcessMentionsRequest"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 4,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 20,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "server/src/domains/social/mentions.service.ts",
          "domain": "social",
          "subdomain": "mentions.service.ts",
          "layer": "other",
          "size": 7638,
          "lines": 296,
          "complexity": 5,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [
            "MentionsService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "MentionType"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.2
        },
        {
          "path": "server/src/domains/social/mentions.routes.ts",
          "domain": "social",
          "subdomain": "mentions.routes.ts",
          "layer": "routes",
          "size": 4290,
          "lines": 148,
          "complexity": 3,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "zod"
          ],
          "exports": [
            "router as mentionsRoutes "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.6000000000000001
        },
        {
          "path": "server/src/domains/social/friends.service.ts",
          "domain": "social",
          "subdomain": "friends.service.ts",
          "layer": "other",
          "size": 13446,
          "lines": 522,
          "complexity": 6,
          "dependencies": [
            "@db",
            "drizzle-orm",
            "@/db/types"
          ],
          "exports": [
            "FriendsService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "RequestId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.2
        },
        {
          "path": "server/src/domains/social/friends.routes.ts",
          "domain": "social",
          "subdomain": "friends.routes.ts",
          "layer": "routes",
          "size": 9697,
          "lines": 334,
          "complexity": 7,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "zod"
          ],
          "exports": [
            "router as friendsRoutes "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.6000000000000001
        },
        {
          "path": "server/src/domains/social/follows.types.ts",
          "domain": "social",
          "subdomain": "follows.types.ts",
          "layer": "other",
          "size": 1901,
          "lines": 93,
          "complexity": 0,
          "dependencies": [],
          "exports": [
            "FollowNotificationSettings",
            "UserStats",
            "FollowUser",
            "FollowRelationship",
            "FollowRequest",
            "FollowCounts",
            "FollowPreferences",
            "WhaleActivity",
            "FollowingActivityFeed"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 36,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 46,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.7
        },
        {
          "path": "server/src/domains/social/follows.service.ts",
          "domain": "social",
          "subdomain": "follows.service.ts",
          "layer": "other",
          "size": 10585,
          "lines": 418,
          "complexity": 5,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "@/db/types"
          ],
          "exports": [
            "FollowsService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "FollowNotificationSettings",
              "UserStats"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.2
        },
        {
          "path": "server/src/domains/social/follows.routes.ts",
          "domain": "social",
          "subdomain": "follows.routes.ts",
          "layer": "routes",
          "size": 9852,
          "lines": 354,
          "complexity": 7,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "zod"
          ],
          "exports": [
            "router as followsRoutes "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.6000000000000001
        },
        {
          "path": "client/src/components/social/FriendsManager.tsx",
          "domain": "social",
          "layer": "components",
          "size": 23999,
          "lines": 795,
          "complexity": 3,
          "dependencies": [
            "react",
            "@tanstack/react-query",
            "@/lib/queryClient",
            "@/components/ui/card",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/textarea",
            "@/components/ui/badge",
            "@/components/ui/avatar",
            "@/components/ui/tabs",
            "@/components/ui/scroll-area",
            "@/components/ui/skeleton",
            "date-fns",
            "wouter",
            "@/lib/utils",
            "@/hooks/use-toast",
            "@db/types"
          ],
          "exports": [
            "FriendsManager"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 55,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 66,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "RequestId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 4.3
        },
        {
          "path": "client/src/components/ui/enhanced-notifications.tsx",
          "domain": "social",
          "layer": "components",
          "size": 11035,
          "lines": 424,
          "complexity": 1,
          "dependencies": [
            "react",
            "framer-motion",
            "framer-motion",
            "@/lib/utils",
            "@/hooks/useMediaQuery"
          ],
          "exports": [
            "NotificationType",
            "NotificationData",
            "useNotifications",
            "NotificationProvider",
            "useNotificationHelpers"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "PanInfo"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 1.7
        },
        {
          "path": "client/src/components/shoutbox/shoutbox-rain-notification.tsx",
          "domain": "social",
          "layer": "components",
          "size": 4133,
          "lines": 142,
          "complexity": 1,
          "dependencies": [
            "react",
            "framer-motion",
            "lucide-react",
            "@/components/ui/card"
          ],
          "exports": [
            "RainNotificationProps",
            "ShoutboxRainNotification",
            "RainNotification",
            "RainNotifications"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/shoutbox/shoutbox-message-styles.tsx",
          "domain": "social",
          "layer": "components",
          "size": 3780,
          "lines": 133,
          "complexity": 2,
          "dependencies": [
            "react",
            "lucide-react"
          ],
          "exports": [
            "ShoutboxMessageStyleProps",
            "StyledShoutboxMessage",
            "detectMessageType"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.9
        },
        {
          "path": "client/src/components/preferences/notification-preferences.tsx",
          "domain": "social",
          "layer": "components",
          "size": 4965,
          "lines": 158,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/types/compat/user",
            "@/components/ui/button",
            "@/hooks/preferences/useUserSettings",
            "@/hooks/preferences/useUpdateUserSettings"
          ],
          "exports": [
            "NotificationPreferences"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "User"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/notifications/NotificationPanel.tsx",
          "domain": "social",
          "subdomain": "NotificationPanel.tsx",
          "layer": "components",
          "size": 3406,
          "lines": 117,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "@/components/ui/scroll-area",
            "@/lib/utils",
            "date-fns",
            "@/hooks/use-notifications"
          ],
          "exports": [
            "NotificationPanel"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/messages/WhispersInbox.tsx",
          "domain": "social",
          "subdomain": "WhispersInbox.tsx",
          "layer": "components",
          "size": 12899,
          "lines": 393,
          "complexity": 3,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "@/components/ui/avatar",
            "@/components/ui/scroll-area",
            "@/components/ui/input",
            "@/components/ui/textarea",
            "@/hooks/use-messages",
            "@/hooks/use-async-button",
            "@/lib/utils",
            "lucide-react",
            "@/hooks/use-toast",
            "@tanstack/react-query"
          ],
          "exports": [
            "WhispersInbox"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.1
        },
        {
          "path": "client/src/components/messages/WhisperModal.tsx",
          "domain": "social",
          "subdomain": "WhisperModal.tsx",
          "layer": "components",
          "size": 7549,
          "lines": 256,
          "complexity": 3,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "@/components/ui/input",
            "@/components/ui/textarea",
            "@/components/ui/avatar",
            "@/hooks/use-messages",
            "@/hooks/use-async-button",
            "lucide-react",
            "@tanstack/react-query",
            "@/hooks/use-toast",
            "@/lib/utils"
          ],
          "exports": [
            "WhisperModal"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.1
        },
        {
          "path": "client/src/components/messages/WhisperButton.tsx",
          "domain": "social",
          "subdomain": "WhisperButton.tsx",
          "layer": "components",
          "size": 1991,
          "lines": 76,
          "complexity": 1,
          "dependencies": [
            "react",
            "@/components/ui/button",
            "@/components/ui/button",
            "@/components/messages/icons/MessageSquareWave",
            "@/components/ui/badge",
            "@/hooks/use-messages",
            "@tanstack/react-query"
          ],
          "exports": [
            "WhisperButton"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ButtonProps"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/header/NotificationButton.tsx",
          "domain": "social",
          "layer": "components",
          "size": 2571,
          "lines": 101,
          "complexity": 1,
          "dependencies": [
            "react",
            "framer-motion",
            "@/components/ui/button",
            "@/components/ui/badge",
            "@/components/ui/popover",
            "@/components/notifications/NotificationPanel",
            "@/components/icons/iconRenderer"
          ],
          "exports": [
            "NotificationButton"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.7
        },
        {
          "path": "client/src/components/messages/icons/MessageSquareWave.tsx",
          "domain": "social",
          "subdomain": "icons",
          "layer": "components",
          "size": 721,
          "lines": 31,
          "complexity": 0,
          "dependencies": [
            "react"
          ],
          "exports": [
            "MessageSquareWave"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        }
      ],
      "totalIssues": 9,
      "avgComplexity": 2.135135135135135,
      "migrationEffort": 37.10000000000001,
      "dependencies": [
        "@db/types",
        "@tanstack/react-query",
        "@/lib/queryClient",
        "@/hooks/use-auth.tsx",
        "@/components/shoutbox/shoutbox-rain-notification",
        "@/hooks/use-auth",
        "@/hooks/use-toast",
        "@/types/notifications",
        "@/core/api",
        "@db",
        "@schema",
        "@server/src/core/services/user.service",
        "@server/src/core/logger",
        "@server/src/utils/auth",
        "@/db/types",
        "@/components/ui/card",
        "@/components/ui/button",
        "@/components/ui/input",
        "@/components/ui/textarea",
        "@/components/ui/badge",
        "@/components/ui/avatar",
        "@/components/ui/tabs",
        "@/components/ui/scroll-area",
        "@/components/ui/skeleton",
        "@/lib/utils",
        "@/hooks/useMediaQuery",
        "@/types/compat/user",
        "@/hooks/preferences/useUserSettings",
        "@/hooks/preferences/useUpdateUserSettings",
        "@/hooks/use-notifications",
        "@/hooks/use-messages",
        "@/hooks/use-async-button",
        "@/components/messages/icons/MessageSquareWave",
        "@/components/ui/popover",
        "@/components/notifications/NotificationPanel",
        "@/components/icons/iconRenderer"
      ],
      "dependents": [
        "other",
        "moderation",
        "user-management",
        "admin"
      ],
      "criticalPath": true,
      "riskAssessment": {
        "runtime": "medium",
        "testing": "low",
        "integration": "high"
      },
      "migrationStrategy": {
        "priority": 2,
        "approach": "atomic",
        "estimatedDays": 8,
        "blockers": [
          "Dependencies from: other, moderation, user-management, admin"
        ],
        "prerequisites": []
      }
    },
    {
      "name": "profile",
      "files": [
        {
          "path": "server/src/domains/profile/social-actions.service.ts",
          "domain": "profile",
          "subdomain": "social-actions.service.ts",
          "layer": "other",
          "size": 10865,
          "lines": 458,
          "complexity": 6,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "RelationshipType",
            "RelationshipStatus",
            "SocialActionResult",
            "SocialActionsService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.2
        },
        {
          "path": "server/src/domains/profile/social-actions.routes.ts",
          "domain": "profile",
          "subdomain": "social-actions.routes.ts",
          "layer": "routes",
          "size": 3416,
          "lines": 107,
          "complexity": 1,
          "dependencies": [
            "express"
          ],
          "exports": [
            "router as socialActionsRoutes "
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "server/src/domains/profile/social-actions.controller.ts",
          "domain": "profile",
          "subdomain": "social-actions.controller.ts",
          "layer": "controllers",
          "size": 6408,
          "lines": 259,
          "complexity": 5,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "zod"
          ],
          "exports": [
            "SocialActionsController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1
        },
        {
          "path": "server/src/domains/profile/signature.service.ts",
          "domain": "profile",
          "subdomain": "signature.service.ts",
          "layer": "other",
          "size": 6339,
          "lines": 228,
          "complexity": 4,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "@shared/signature/SignatureTierConfig",
            "@/db/types"
          ],
          "exports": [
            "SignatureService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 14,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 22,
              "context": "static async getUserSignature(userId: number) {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 118,
              "context": "static async getUserSignatureItems(userId: number) {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 130,
              "context": "static async purchaseSignatureItem(userId: number, itemId: ItemId) {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 198,
              "context": "static async activateSignatureItem(userId: number, itemId: ItemId) {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "ItemId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.3
        },
        {
          "path": "server/src/domains/profile/signature.routes.ts",
          "domain": "profile",
          "subdomain": "signature.routes.ts",
          "layer": "routes",
          "size": 5154,
          "lines": 195,
          "complexity": 4,
          "dependencies": [
            "express",
            "express",
            "zod",
            "@server/src/utils/auth"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1
        },
        {
          "path": "server/src/domains/profile/referrals.service.ts",
          "domain": "profile",
          "subdomain": "referrals.service.ts",
          "layer": "other",
          "size": 1448,
          "lines": 63,
          "complexity": 2,
          "dependencies": [
            "drizzle-orm",
            "@schema/user/users"
          ],
          "exports": [
            "referralsService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 15,
              "context": "export async function getUserReferrals(userId: number) {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 42,
              "context": "export async function getUserReferralLink(userId: number) {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.6000000000000001
        },
        {
          "path": "server/src/domains/profile/profile.service.ts",
          "domain": "profile",
          "subdomain": "profile.service.ts",
          "layer": "other",
          "size": 9093,
          "lines": 271,
          "complexity": 4,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm",
            "@server/src/core/logger"
          ],
          "exports": [
            "PROFILE_UPDATED_EVENT",
            "ProfileMediaUpdateParams",
            "profileService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 18,
              "context": "userId: number; // User ID is a number in the database",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 27,
              "context": "export async function getUserProfile(userId: number) {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2
        },
        {
          "path": "server/src/domains/profile/profile.routes.ts",
          "domain": "profile",
          "subdomain": "profile.routes.ts",
          "layer": "routes",
          "size": 6744,
          "lines": 227,
          "complexity": 3,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "express",
            "@db",
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.6000000000000001
        },
        {
          "path": "server/src/domains/profile/profile-stats.service.ts",
          "domain": "profile",
          "subdomain": "profile-stats.service.ts",
          "layer": "other",
          "size": 9773,
          "lines": 380,
          "complexity": 3,
          "dependencies": [
            "drizzle-orm"
          ],
          "exports": [
            "ExtendedProfileStats",
            "ProfileStatsService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.6000000000000001
        },
        {
          "path": "server/src/domains/profile/profile-stats.routes.ts",
          "domain": "profile",
          "subdomain": "profile-stats.routes.ts",
          "layer": "routes",
          "size": 2407,
          "lines": 71,
          "complexity": 1,
          "dependencies": [
            "express"
          ],
          "exports": [
            "router as profileStatsRoutes",
            "analyticsRouter"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "server/src/domains/profile/profile-stats.controller.ts",
          "domain": "profile",
          "subdomain": "profile-stats.controller.ts",
          "layer": "controllers",
          "size": 6331,
          "lines": 214,
          "complexity": 5,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "zod"
          ],
          "exports": [
            "ProfileStatsController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.2
        }
      ],
      "totalIssues": 9,
      "avgComplexity": 3.4545454545454546,
      "migrationEffort": 11.399999999999999,
      "dependencies": [
        "@server/src/core/services/user.service",
        "@db",
        "@schema",
        "@shared/signature/SignatureTierConfig",
        "@/db/types",
        "@server/src/utils/auth",
        "@schema/user/users",
        "@server/src/core/logger"
      ],
      "dependents": [
        "user-management",
        "other",
        "forum-core"
      ],
      "criticalPath": false,
      "riskAssessment": {
        "runtime": "medium",
        "testing": "low",
        "integration": "medium"
      },
      "migrationStrategy": {
        "priority": 3,
        "approach": "atomic",
        "estimatedDays": 3,
        "blockers": [
          "Dependencies from: user-management, other, forum-core"
        ],
        "prerequisites": []
      }
    },
    {
      "name": "preferences",
      "files": [
        {
          "path": "server/src/domains/preferences/preferences.validators.ts",
          "domain": "preferences",
          "subdomain": "preferences.validators.ts",
          "layer": "other",
          "size": 2769,
          "lines": 74,
          "complexity": 0,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "profileSettingsSchema",
            "accountSettingsSchema",
            "notificationSettingsSchema",
            "passwordChangeSchema",
            "ProfileSettingsInput",
            "AccountSettingsInput",
            "NotificationSettingsInput",
            "PasswordChangeInput",
            "displayPreferencesSchema",
            "DisplayPreferencesInput"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1
        },
        {
          "path": "server/src/domains/preferences/preferences.service.ts",
          "domain": "preferences",
          "subdomain": "preferences.service.ts",
          "layer": "other",
          "size": 11581,
          "lines": 450,
          "complexity": 5,
          "dependencies": [
            "@db",
            "drizzle-orm",
            "bcrypt"
          ],
          "exports": [
            "getAllPreferences",
            "updateProfilePreferences",
            "updateAccountPreferences",
            "updateNotificationPreferences",
            "updateDisplayPreferences",
            "changePassword",
            "createDefaultPreferences"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 28,
              "context": "export const getAllPreferences = async (userId: number) => {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 84,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 141,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 215,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 281,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 344,
              "context": "userId: number,",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 390,
              "context": "export const createDefaultPreferences = async (userId: number) => {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "ProfileSettingsInput",
              "AccountSettingsInput",
              "NotificationSettingsInput",
              "PasswordChangeInput",
              "DisplayPreferencesInput"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7000000000000002
        },
        {
          "path": "server/src/domains/preferences/preferences.routes.ts",
          "domain": "preferences",
          "subdomain": "preferences.routes.ts",
          "layer": "routes",
          "size": 15535,
          "lines": 503,
          "complexity": 10,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "express",
            "express",
            "@db",
            "@schema",
            "drizzle-orm",
            "drizzle-orm",
            "zod",
            "ws",
            "@server/src/utils/auth"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 3
        }
      ],
      "totalIssues": 7,
      "avgComplexity": 5,
      "migrationEffort": 5.7,
      "dependencies": [
        "@db",
        "@server/src/core/services/user.service",
        "@schema",
        "@server/src/utils/auth"
      ],
      "dependents": [
        "other",
        "user-management",
        "social"
      ],
      "criticalPath": false,
      "riskAssessment": {
        "runtime": "medium",
        "testing": "low",
        "integration": "medium"
      },
      "migrationStrategy": {
        "priority": 3,
        "approach": "atomic",
        "estimatedDays": 2,
        "blockers": [
          "Dependencies from: other, user-management, social"
        ],
        "prerequisites": []
      }
    },
    {
      "name": "shop",
      "files": [
        {
          "path": "server/src/domains/shop/shop.routes.ts",
          "domain": "shop",
          "subdomain": "shop.routes.ts",
          "layer": "routes",
          "size": 8064,
          "lines": 284,
          "complexity": 4,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "@db",
            "@schema",
            "drizzle-orm",
            "@shared/wallet.config",
            "zod"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 133,
              "context": "const userId = (userService.getUserFromRequest(req) as { id: number }).id;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            },
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 253,
              "context": "const userId = (userService.getUserFromRequest(req) as { id: number }).id;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.2
        }
      ],
      "totalIssues": 2,
      "avgComplexity": 4,
      "migrationEffort": 2.2,
      "dependencies": [
        "@server/src/core/services/user.service",
        "@db",
        "@schema",
        "@shared/wallet.config"
      ],
      "dependents": [
        "cosmetics",
        "other"
      ],
      "criticalPath": false,
      "riskAssessment": {
        "runtime": "medium",
        "testing": "low",
        "integration": "medium"
      },
      "migrationStrategy": {
        "priority": 3,
        "approach": "atomic",
        "estimatedDays": 1,
        "blockers": [
          "Dependencies from: cosmetics, other"
        ],
        "prerequisites": []
      }
    },
    {
      "name": "feature-gates",
      "files": [
        {
          "path": "server/src/domains/feature-gates/feature-gates.service.ts",
          "domain": "feature-gates",
          "subdomain": "feature-gates.service.ts",
          "layer": "other",
          "size": 5242,
          "lines": 205,
          "complexity": 3,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [
            "FeatureGate",
            "UserFeatureAccess",
            "FeatureGatesService",
            "featureGatesService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 125,
              "context": "async checkFeatureAccess(userId: number, featureId: string): Promise<UserFeatureAccess> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            },
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 195,
              "context": "async checkAllFeatureAccess(userId: number): Promise<UserFeatureAccess[]> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7999999999999998
        },
        {
          "path": "server/src/domains/feature-gates/feature-gates.routes.ts",
          "domain": "feature-gates",
          "subdomain": "feature-gates.routes.ts",
          "layer": "routes",
          "size": 839,
          "lines": 28,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/feature-gates/feature-gates.controller.ts",
          "domain": "feature-gates",
          "subdomain": "feature-gates.controller.ts",
          "layer": "controllers",
          "size": 3615,
          "lines": 140,
          "complexity": 4,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express"
          ],
          "exports": [
            "getAllFeatureGates",
            "getFeatureGate",
            "checkFeatureAccess",
            "checkAllFeatureAccess",
            "checkFeatureAccessForUser",
            "getAllFeatureAccessForUser"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.3
        }
      ],
      "totalIssues": 2,
      "avgComplexity": 2.3333333333333335,
      "migrationEffort": 3.5999999999999996,
      "dependencies": [
        "@db",
        "@schema",
        "@server/src/core/services/user.service"
      ],
      "dependents": [],
      "criticalPath": false,
      "riskAssessment": {
        "runtime": "medium",
        "testing": "low",
        "integration": "low"
      },
      "migrationStrategy": {
        "priority": 3,
        "approach": "atomic",
        "estimatedDays": 1,
        "blockers": [],
        "prerequisites": []
      }
    },
    {
      "name": "dictionary",
      "files": [
        {
          "path": "server/src/domains/dictionary/dictionary.service.ts",
          "domain": "dictionary",
          "subdomain": "dictionary.service.ts",
          "layer": "other",
          "size": 5304,
          "lines": 197,
          "complexity": 4,
          "dependencies": [
            "@db",
            "drizzle-orm",
            "@schema",
            "slugify",
            "@/db/types"
          ],
          "exports": [
            "DictionaryStatus",
            "DictionaryService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "EntryId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 1.7999999999999998
        },
        {
          "path": "server/src/domains/dictionary/dictionary.routes.ts",
          "domain": "dictionary",
          "subdomain": "dictionary.routes.ts",
          "layer": "routes",
          "size": 3130,
          "lines": 101,
          "complexity": 3,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "@schema",
            "express-rate-limit"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "conversion",
              "pattern": "Number(req.params.id)",
              "line": 75,
              "context": "Number(req.params.id),",
              "suggestedFix": "remove Number(), use branded type",
              "confidence": 0.5
            },
            {
              "type": "conversion",
              "pattern": "Number(req.params.id)",
              "line": 90,
              "context": "Number(req.params.id),",
              "suggestedFix": "remove Number(), use branded type",
              "confidence": 0.5
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7999999999999998
        }
      ],
      "totalIssues": 2,
      "avgComplexity": 3.5,
      "migrationEffort": 3.5999999999999996,
      "dependencies": [
        "@db",
        "@schema",
        "@/db/types",
        "@server/src/core/services/user.service"
      ],
      "dependents": [
        "other",
        "moderation"
      ],
      "criticalPath": false,
      "riskAssessment": {
        "runtime": "medium",
        "testing": "low",
        "integration": "medium"
      },
      "migrationStrategy": {
        "priority": 3,
        "approach": "atomic",
        "estimatedDays": 1,
        "blockers": [
          "Dependencies from: other, moderation"
        ],
        "prerequisites": []
      }
    },
    {
      "name": "xp",
      "files": [
        {
          "path": "server/src/domains/xp/xp.service.ts",
          "domain": "xp",
          "subdomain": "xp.service.ts",
          "layer": "other",
          "size": 17016,
          "lines": 603,
          "complexity": 10,
          "dependencies": [
            "drizzle-orm",
            "@db",
            "@shared/economy/economy.config",
            "@/db/types"
          ],
          "exports": [
            "XpService",
            "xpService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 431,
              "context": "// private async updateActionLimits(userId: number, action: XP_ACTION): Promise<void> {",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "AdminId",
              "ForumId",
              "UserId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 3.1
        },
        {
          "path": "server/src/domains/xp/xp.routes.ts",
          "domain": "xp",
          "subdomain": "xp.routes.ts",
          "layer": "routes",
          "size": 1027,
          "lines": 30,
          "complexity": 1,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "server/src/domains/xp/xp.events.ts",
          "domain": "xp",
          "subdomain": "xp.events.ts",
          "layer": "other",
          "size": 822,
          "lines": 46,
          "complexity": 1,
          "dependencies": [
            "@/db/types"
          ],
          "exports": [
            "XpGainEvent",
            "XpLossEvent",
            "LevelUpEvent"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "UserId"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 1.7
        },
        {
          "path": "server/src/domains/xp/xp.controller.ts",
          "domain": "xp",
          "subdomain": "xp.controller.ts",
          "layer": "controllers",
          "size": 9238,
          "lines": 298,
          "complexity": 7,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "@schema",
            "@db",
            "drizzle-orm",
            "@schema",
            "zod",
            "drizzle-orm/select-builder/select"
          ],
          "exports": [
            "awardXpForAction",
            "getUserXpInfo",
            "getXpActions",
            "getUserXpLogs",
            "awardActionXp"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.4000000000000004
        },
        {
          "path": "server/src/domains/xp/xp.admin.routes.ts",
          "domain": "xp",
          "subdomain": "xp.admin.routes.ts",
          "layer": "routes",
          "size": 1857,
          "lines": 46,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/xp/xp-actions.ts",
          "domain": "xp",
          "subdomain": "xp-actions.ts",
          "layer": "other",
          "size": 5451,
          "lines": 210,
          "complexity": 4,
          "dependencies": [
            "@schema",
            "drizzle-orm",
            "@db"
          ],
          "exports": [
            "XpActionConfig",
            "DEFAULT_XP_ACTIONS",
            "XP_ACTIONS",
            "getXpActionSync",
            "getXpValueForActionSync"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.8
        },
        {
          "path": "server/src/domains/xp/xp-actions.controller.ts",
          "domain": "xp",
          "subdomain": "xp-actions.controller.ts",
          "layer": "controllers",
          "size": 471,
          "lines": 18,
          "complexity": 1,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "server/src/domains/xp/xp-actions-schema.ts",
          "domain": "xp",
          "subdomain": "xp-actions-schema.ts",
          "layer": "other",
          "size": 1865,
          "lines": 51,
          "complexity": 1,
          "dependencies": [
            "drizzle-orm/pg-core",
            "@schema"
          ],
          "exports": [
            "xpActionLogs",
            "xpActionLimits",
            "XpActionLog",
            "InsertXpActionLog",
            "XpActionLimit",
            "InsertXpActionLimit"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "server/src/domains/xp/events/xp.events.ts",
          "domain": "xp",
          "subdomain": "events",
          "layer": "other",
          "size": 9222,
          "lines": 390,
          "complexity": 6,
          "dependencies": [
            "@db",
            "drizzle-orm",
            "drizzle-orm/pg-core",
            "@/db/types"
          ],
          "exports": [
            "XpGainEvent",
            "XpLossEvent",
            "LevelUpEvent"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "UserId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.2
        }
      ],
      "totalIssues": 1,
      "avgComplexity": 3.4444444444444446,
      "migrationEffort": 11.8,
      "dependencies": [
        "@db",
        "@shared/economy/economy.config",
        "@/db/types",
        "@server/src/core/services/user.service",
        "@schema"
      ],
      "dependents": [
        "other",
        "engagement",
        "gamification",
        "user-management",
        "infrastructure",
        "economy",
        "wallet",
        "user",
        "uploads",
        "treasury",
        "subscriptions",
        "social",
        "shoutbox",
        "shop",
        "profile",
        "preferences",
        "paths",
        "notifications",
        "missions",
        "messaging",
        "forum",
        "feature-gates",
        "editor",
        "dictionary",
        "ccpayment-webhook",
        "auth",
        "advertising",
        "admin",
        "cosmetics",
        "share",
        "collectibles",
        "activity",
        "forum-core"
      ],
      "criticalPath": true,
      "riskAssessment": {
        "runtime": "medium",
        "testing": "low",
        "integration": "high"
      },
      "migrationStrategy": {
        "priority": 2,
        "approach": "atomic",
        "estimatedDays": 3,
        "blockers": [
          "Dependencies from: other, engagement, gamification, user-management, infrastructure, economy, wallet, user, uploads, treasury, subscriptions, social, shoutbox, shop, profile, preferences, paths, notifications, missions, messaging, forum, feature-gates, editor, dictionary, ccpayment-webhook, auth, advertising, admin, cosmetics, share, collectibles, activity, forum-core"
        ],
        "prerequisites": []
      }
    },
    {
      "name": "subscriptions",
      "files": [
        {
          "path": "server/src/domains/subscriptions/subscription.validators.ts",
          "domain": "subscriptions",
          "subdomain": "subscription.validators.ts",
          "layer": "other",
          "size": 1861,
          "lines": 61,
          "complexity": 1,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "purchaseSubscriptionSchema",
            "cancelSubscriptionSchema",
            "grantSubscriptionSchema",
            "subscriptionQuerySchema",
            "benefitKeySchema",
            "PurchaseSubscriptionRequest",
            "CancelSubscriptionRequest",
            "GrantSubscriptionRequest",
            "SubscriptionQuery",
            "BenefitKeyRequest"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "server/src/domains/subscriptions/subscription.service.ts",
          "domain": "subscriptions",
          "subdomain": "subscription.service.ts",
          "layer": "other",
          "size": 17140,
          "lines": 610,
          "complexity": 9,
          "dependencies": [
            "@db",
            "drizzle-orm",
            "@/db/types"
          ],
          "exports": [
            "SubscriptionPurchaseRequest",
            "SubscriptionInfo",
            "CosmeticDropInfo",
            "SubscriptionService",
            "subscriptionService"
          ],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "id: number",
              "line": 29,
              "context": "id: number;",
              "suggestedFix": "check entity context for correct branded type",
              "confidence": 0.3
            }
          ],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": true,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "CosmeticId",
              "ItemId",
              "SubscriptionId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 4.9
        },
        {
          "path": "server/src/domains/subscriptions/subscription.routes.ts",
          "domain": "subscriptions",
          "subdomain": "subscription.routes.ts",
          "layer": "routes",
          "size": 1789,
          "lines": 67,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/subscriptions/subscription.controller.ts",
          "domain": "subscriptions",
          "subdomain": "subscription.controller.ts",
          "layer": "controllers",
          "size": 8230,
          "lines": 346,
          "complexity": 5,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express"
          ],
          "exports": [
            "SubscriptionController",
            "subscriptionController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.7
        },
        {
          "path": "server/src/domains/subscriptions/subscription-permissions.service.ts",
          "domain": "subscriptions",
          "subdomain": "subscription-permissions.service.ts",
          "layer": "other",
          "size": 8085,
          "lines": 312,
          "complexity": 7,
          "dependencies": [],
          "exports": [
            "SubscriptionPermissions",
            "SubscriptionPermissionsService",
            "subscriptionPermissionsService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.9000000000000004
        }
      ],
      "totalIssues": 1,
      "avgComplexity": 4.4,
      "migrationEffort": 9.200000000000001,
      "dependencies": [
        "@db",
        "@/db/types",
        "@server/src/core/services/user.service"
      ],
      "dependents": [],
      "criticalPath": false,
      "riskAssessment": {
        "runtime": "medium",
        "testing": "low",
        "integration": "low"
      },
      "migrationStrategy": {
        "priority": 3,
        "approach": "atomic",
        "estimatedDays": 2,
        "blockers": [],
        "prerequisites": []
      }
    },
    {
      "name": "share",
      "files": [
        {
          "path": "server/src/domains/share/services/xShareService.ts",
          "domain": "share",
          "subdomain": "services",
          "layer": "services",
          "size": 1802,
          "lines": 57,
          "complexity": 1,
          "dependencies": [
            "twitter-api-v2",
            "@server/src/core/db",
            "@schema/user/users",
            "@schema/user/xShares",
            "drizzle-orm",
            "@server/src/core/logger",
            "@/db/types"
          ],
          "exports": [],
          "idPatterns": [
            {
              "type": "definition",
              "pattern": "userId: number",
              "line": 11,
              "context": "userId: number;",
              "suggestedFix": "UserId",
              "confidence": 0.8
            }
          ],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "ContentId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.30000000000000004
        },
        {
          "path": "server/src/domains/share/routes/xShareRoutes.ts",
          "domain": "share",
          "subdomain": "routes",
          "layer": "routes",
          "size": 1257,
          "lines": 50,
          "complexity": 1,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "@/db/types"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "ContentId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        }
      ],
      "totalIssues": 1,
      "avgComplexity": 1,
      "migrationEffort": 2,
      "dependencies": [
        "@server/src/core/db",
        "@schema/user/users",
        "@schema/user/xShares",
        "@server/src/core/logger",
        "@/db/types",
        "@server/src/core/services/user.service"
      ],
      "dependents": [
        "other",
        "gamification",
        "economy",
        "moderation",
        "xp",
        "wallet",
        "shop",
        "profile",
        "user-management",
        "forum-core",
        "collectibles",
        "auth",
        "admin"
      ],
      "criticalPath": true,
      "riskAssessment": {
        "runtime": "medium",
        "testing": "low",
        "integration": "high"
      },
      "migrationStrategy": {
        "priority": 2,
        "approach": "atomic",
        "estimatedDays": 1,
        "blockers": [
          "Dependencies from: other, gamification, economy, moderation, xp, wallet, shop, profile, user-management, forum-core, collectibles, auth, admin"
        ],
        "prerequisites": []
      }
    },
    {
      "name": "infrastructure",
      "files": [
        {
          "path": "shared/validation/common.schemas.ts",
          "domain": "infrastructure",
          "subdomain": "common.schemas.ts",
          "layer": "other",
          "size": 8814,
          "lines": 320,
          "complexity": 3,
          "dependencies": [
            "zod"
          ],
          "exports": [
            "positiveInt",
            "nonNegativeInt",
            "positiveFloat",
            "nonNegativeFloat",
            "nonEmptyString",
            "trimmedString",
            "email",
            "url",
            "slug",
            "username",
            "dateString",
            "futureDate",
            "pastDate",
            "userId",
            "groupId",
            "threadId",
            "postId",
            "forumId",
            "paginationSchema",
            "sortSchema"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": true,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 1.6
        },
        {
          "path": "scripts/validation/validate-uuid-migration.ts",
          "domain": "infrastructure",
          "subdomain": "validate-uuid-migration.ts",
          "layer": "other",
          "size": 10613,
          "lines": 354,
          "complexity": 7,
          "dependencies": [
            "fs/promises",
            "path",
            "chalk"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.6000000000000001
        },
        {
          "path": "shared/types/validation/index.ts",
          "domain": "infrastructure",
          "subdomain": "index.ts",
          "layer": "types",
          "size": 4901,
          "lines": 183,
          "complexity": 6,
          "dependencies": [
            "@db/types/id.types"
          ],
          "exports": [
            "isValidUuid",
            "isValidUserId",
            "createIdValidator",
            "isValidDate",
            "isValidDateString",
            "isPositiveNumber",
            "isNonNegativeNumber",
            "isValidAmount",
            "isNonEmptyString",
            "isValidEmail",
            "isValidUsername",
            "isNonEmptyArray",
            "isArrayOf",
            "hasProperty",
            "hasProperties",
            "validateApiInput",
            "validateOptionalInput",
            "isEnumValue",
            "validatePaginationParams",
            "validateSortParams"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "UserId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9000000000000001
        },
        {
          "path": "server/src/middleware/validate.ts",
          "domain": "infrastructure",
          "subdomain": "validate.ts",
          "layer": "middleware",
          "size": 1790,
          "lines": 66,
          "complexity": 1,
          "dependencies": [
            "express",
            "zod"
          ],
          "exports": [
            "validateBody",
            "validateQuery",
            "validateParams"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "server/src/middleware/validate-request.ts",
          "domain": "infrastructure",
          "subdomain": "validate-request.ts",
          "layer": "middleware",
          "size": 419,
          "lines": 17,
          "complexity": 1,
          "dependencies": [
            "express",
            "zod"
          ],
          "exports": [
            "validateRequest"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.19999999999999996
        },
        {
          "path": "server/src/middleware/trace.middleware.ts",
          "domain": "infrastructure",
          "subdomain": "trace.middleware.ts",
          "layer": "middleware",
          "size": 1126,
          "lines": 40,
          "complexity": 1,
          "dependencies": [
            "express",
            "uuid"
          ],
          "exports": [
            "traceMiddleware"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        },
        {
          "path": "server/src/middleware/dev-security.middleware.ts",
          "domain": "infrastructure",
          "subdomain": "dev-security.middleware.ts",
          "layer": "middleware",
          "size": 4289,
          "lines": 172,
          "complexity": 2,
          "dependencies": [
            "express",
            "@server/src/core/logger",
            "@server/src/core/services/user.service",
            "@server/src/utils/environment"
          ],
          "exports": [
            "devSecurity"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.10000000000000003
        },
        {
          "path": "server/src/core/middleware.ts",
          "domain": "infrastructure",
          "layer": "other",
          "size": 109,
          "lines": 4,
          "complexity": 0,
          "dependencies": [],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "low",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/core/cache.service.ts",
          "domain": "infrastructure",
          "layer": "other",
          "size": 4303,
          "lines": 201,
          "complexity": 5,
          "dependencies": [],
          "exports": [
            "cacheService",
            "memoryCache"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 2.5
        },
        {
          "path": "server/src/core/middleware/security.middleware.ts",
          "domain": "infrastructure",
          "subdomain": "security.middleware.ts",
          "layer": "middleware",
          "size": 9663,
          "lines": 380,
          "complexity": 5,
          "dependencies": [
            "cors",
            "helmet",
            "crypto",
            "express"
          ],
          "exports": [
            "corsMiddleware",
            "csrfProtection",
            "generateSessionCsrfToken",
            "securityHeaders",
            "rateLimitConfigs",
            "csrfTokenProvider",
            "securityAuditLogger",
            "originValidation",
            "developmentSecurityWarning",
            "apiResponseSecurity",
            "requestSizeLimits",
            "cors",
            "helmet"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response",
              "NextFunction"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7
        }
      ],
      "totalIssues": 0,
      "avgComplexity": 3.1,
      "migrationEffort": 10,
      "dependencies": [
        "@db/types/id.types",
        "@server/src/core/logger",
        "@server/src/core/services/user.service",
        "@server/src/utils/environment"
      ],
      "dependents": [],
      "criticalPath": false,
      "riskAssessment": {
        "runtime": "medium",
        "testing": "low",
        "integration": "low"
      },
      "migrationStrategy": {
        "priority": 3,
        "approach": "atomic",
        "estimatedDays": 2,
        "blockers": [],
        "prerequisites": []
      }
    },
    {
      "name": "user",
      "files": [
        {
          "path": "server/src/domains/user/user-preferences.service.ts",
          "domain": "user",
          "subdomain": "user-preferences.service.ts",
          "layer": "other",
          "size": 9735,
          "lines": 278,
          "complexity": 5,
          "dependencies": [
            "@db",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [
            "SocialPreferences",
            "UserPreferencesService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 1
        },
        {
          "path": "server/src/domains/user/user-preferences.routes.ts",
          "domain": "user",
          "subdomain": "user-preferences.routes.ts",
          "layer": "routes",
          "size": 3992,
          "lines": 124,
          "complexity": 2,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "zod"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        }
      ],
      "totalIssues": 0,
      "avgComplexity": 3.5,
      "migrationEffort": 1.4,
      "dependencies": [
        "@db",
        "@schema",
        "@server/src/core/services/user.service"
      ],
      "dependents": [
        "user-management",
        "infrastructure",
        "other",
        "xp",
        "wallet",
        "uploads",
        "treasury",
        "subscriptions",
        "social",
        "shoutbox",
        "shop",
        "profile",
        "preferences",
        "paths",
        "notifications",
        "missions",
        "gamification",
        "forum",
        "feature-gates",
        "dictionary",
        "advertising",
        "admin",
        "cosmetics",
        "forum-core",
        "engagement",
        "share",
        "collectibles",
        "auth",
        "activity"
      ],
      "criticalPath": true,
      "riskAssessment": {
        "runtime": "medium",
        "testing": "low",
        "integration": "high"
      },
      "migrationStrategy": {
        "priority": 2,
        "approach": "atomic",
        "estimatedDays": 1,
        "blockers": [
          "Dependencies from: user-management, infrastructure, other, xp, wallet, uploads, treasury, subscriptions, social, shoutbox, shop, profile, preferences, paths, notifications, missions, gamification, forum, feature-gates, dictionary, advertising, admin, cosmetics, forum-core, engagement, share, collectibles, auth, activity"
        ],
        "prerequisites": []
      }
    },
    {
      "name": "uploads",
      "files": [
        {
          "path": "server/src/domains/uploads/upload.service.ts",
          "domain": "uploads",
          "subdomain": "upload.service.ts",
          "layer": "other",
          "size": 9895,
          "lines": 317,
          "complexity": 6,
          "dependencies": [
            "uuid",
            "@/db/types"
          ],
          "exports": [
            "UploadType",
            "CreatePresignedUrlServiceParams",
            "PresignedUploadServiceResult",
            "ConfirmUploadServiceParams",
            "UploadConfirmationServiceResult",
            "DegenUploadError",
            "UploadService",
            "uploadService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "PackId",
              "StickerId"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7000000000000002
        },
        {
          "path": "server/src/domains/uploads/upload.routes.ts",
          "domain": "uploads",
          "subdomain": "upload.routes.ts",
          "layer": "routes",
          "size": 692,
          "lines": 18,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/uploads/upload.controller.ts",
          "domain": "uploads",
          "subdomain": "upload.controller.ts",
          "layer": "controllers",
          "size": 7002,
          "lines": 179,
          "complexity": 4,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": true,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.3
        }
      ],
      "totalIssues": 0,
      "avgComplexity": 3.3333333333333335,
      "migrationEffort": 3.5,
      "dependencies": [
        "@/db/types",
        "@server/src/core/services/user.service"
      ],
      "dependents": [],
      "criticalPath": false,
      "riskAssessment": {
        "runtime": "medium",
        "testing": "low",
        "integration": "low"
      },
      "migrationStrategy": {
        "priority": 3,
        "approach": "atomic",
        "estimatedDays": 1,
        "blockers": [],
        "prerequisites": []
      }
    },
    {
      "name": "treasury",
      "files": [
        {
          "path": "server/src/domains/treasury/treasury.routes.ts",
          "domain": "treasury",
          "subdomain": "treasury.routes.ts",
          "layer": "routes",
          "size": 20849,
          "lines": 693,
          "complexity": 10,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "express",
            "@db",
            "drizzle-orm",
            "@schema",
            "drizzle-orm"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 2.2
        }
      ],
      "totalIssues": 0,
      "avgComplexity": 10,
      "migrationEffort": 2.2,
      "dependencies": [
        "@server/src/core/services/user.service",
        "@db",
        "@schema"
      ],
      "dependents": [],
      "criticalPath": false,
      "riskAssessment": {
        "runtime": "medium",
        "testing": "low",
        "integration": "low"
      },
      "migrationStrategy": {
        "priority": 3,
        "approach": "atomic",
        "estimatedDays": 1,
        "blockers": [],
        "prerequisites": []
      }
    },
    {
      "name": "paths",
      "files": [
        {
          "path": "server/src/domains/paths/paths.routes.ts",
          "domain": "paths",
          "subdomain": "paths.routes.ts",
          "layer": "routes",
          "size": 6242,
          "lines": 222,
          "complexity": 6,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "express",
            "@server/src/utils/xpProcessor",
            "@db",
            "drizzle-orm"
          ],
          "exports": [
            "registerPathRoutes"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9000000000000001
        }
      ],
      "totalIssues": 0,
      "avgComplexity": 6,
      "migrationEffort": 0.9000000000000001,
      "dependencies": [
        "@server/src/core/services/user.service",
        "@server/src/utils/xpProcessor",
        "@db"
      ],
      "dependents": [
        "other"
      ],
      "criticalPath": false,
      "riskAssessment": {
        "runtime": "medium",
        "testing": "low",
        "integration": "low"
      },
      "migrationStrategy": {
        "priority": 3,
        "approach": "atomic",
        "estimatedDays": 1,
        "blockers": [
          "Dependencies from: other"
        ],
        "prerequisites": []
      }
    },
    {
      "name": "notifications",
      "files": [
        {
          "path": "server/src/domains/notifications/notification.service.ts",
          "domain": "notifications",
          "subdomain": "notification.service.ts",
          "layer": "other",
          "size": 3360,
          "lines": 117,
          "complexity": 2,
          "dependencies": [
            "@db",
            "@schema",
            "@server/src/core/logger",
            "drizzle-orm",
            "@schema",
            "@schema"
          ],
          "exports": [
            "getNotifications",
            "createNotificationFromEvent",
            "markNotificationAsRead",
            "markAllNotificationsAsRead",
            "getUnreadNotificationCount"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "InsertNotification"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        },
        {
          "path": "server/src/domains/notifications/notification.routes.ts",
          "domain": "notifications",
          "subdomain": "notification.routes.ts",
          "layer": "routes",
          "size": 3370,
          "lines": 124,
          "complexity": 3,
          "dependencies": [
            "@server/src/core/services/user.service",
            "express",
            "express",
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.1
        },
        {
          "path": "server/src/domains/notifications/notification-generator.service.ts",
          "domain": "notifications",
          "subdomain": "notification-generator.service.ts",
          "layer": "other",
          "size": 3460,
          "lines": 127,
          "complexity": 2,
          "dependencies": [
            "@schema"
          ],
          "exports": [
            "generateNotificationFromEvent"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "EventLog"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        },
        {
          "path": "server/src/domains/notifications/event-notification-listener.ts",
          "domain": "notifications",
          "subdomain": "event-notification-listener.ts",
          "layer": "other",
          "size": 1437,
          "lines": 49,
          "complexity": 2,
          "dependencies": [
            "events",
            "@server/src/core/logger",
            "@schema"
          ],
          "exports": [
            "eventEmitter",
            "EVENT_LOG_CREATED",
            "initEventNotificationListener",
            "emitEventLogCreated"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "EventLog"
            ]
          },
          "riskLevel": "low",
          "migrationEffort": 0.4
        }
      ],
      "totalIssues": 0,
      "avgComplexity": 2.25,
      "migrationEffort": 2.3,
      "dependencies": [
        "@db",
        "@schema",
        "@server/src/core/logger",
        "@server/src/core/services/user.service"
      ],
      "dependents": [
        "social",
        "other",
        "engagement"
      ],
      "criticalPath": false,
      "riskAssessment": {
        "runtime": "medium",
        "testing": "low",
        "integration": "medium"
      },
      "migrationStrategy": {
        "priority": 3,
        "approach": "atomic",
        "estimatedDays": 1,
        "blockers": [
          "Dependencies from: social, other, engagement"
        ],
        "prerequisites": []
      }
    },
    {
      "name": "messaging",
      "files": [
        {
          "path": "server/src/domains/messaging/message.routes.ts",
          "domain": "messaging",
          "subdomain": "message.routes.ts",
          "layer": "routes",
          "size": 7740,
          "lines": 264,
          "complexity": 5,
          "dependencies": [
            "express",
            "express",
            "zod",
            "@db",
            "crypto",
            "drizzle-orm",
            "@schema",
            "@server/src/utils/auth"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": true,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.2
        }
      ],
      "totalIssues": 0,
      "avgComplexity": 5,
      "migrationEffort": 0.2,
      "dependencies": [
        "@db",
        "@schema",
        "@server/src/utils/auth"
      ],
      "dependents": [],
      "criticalPath": false,
      "riskAssessment": {
        "runtime": "medium",
        "testing": "low",
        "integration": "low"
      },
      "migrationStrategy": {
        "priority": 3,
        "approach": "atomic",
        "estimatedDays": 1,
        "blockers": [],
        "prerequisites": []
      }
    },
    {
      "name": "editor",
      "files": [
        {
          "path": "server/src/domains/editor/editor.routes.ts",
          "domain": "editor",
          "subdomain": "editor.routes.ts",
          "layer": "routes",
          "size": 3500,
          "lines": 121,
          "complexity": 2,
          "dependencies": [
            "express",
            "express",
            "axios",
            "zod"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.4
        }
      ],
      "totalIssues": 0,
      "avgComplexity": 2,
      "migrationEffort": 0.4,
      "dependencies": [],
      "dependents": [
        "forum-core",
        "moderation"
      ],
      "criticalPath": false,
      "riskAssessment": {
        "runtime": "medium",
        "testing": "low",
        "integration": "medium"
      },
      "migrationStrategy": {
        "priority": 3,
        "approach": "atomic",
        "estimatedDays": 1,
        "blockers": [
          "Dependencies from: forum-core, moderation"
        ],
        "prerequisites": []
      }
    },
    {
      "name": "ccpayment-webhook",
      "files": [
        {
          "path": "server/src/domains/ccpayment-webhook/ccpayment-webhook.service.ts",
          "domain": "ccpayment-webhook",
          "subdomain": "ccpayment-webhook.service.ts",
          "layer": "other",
          "size": 10934,
          "lines": 401,
          "complexity": 6,
          "dependencies": [
            "@schema",
            "drizzle-orm",
            "@db"
          ],
          "exports": [
            "CCPaymentWebhookService",
            "ccpaymentWebhookService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "CCPaymentWebhookEvent"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.2000000000000002
        },
        {
          "path": "server/src/domains/ccpayment-webhook/ccpayment-webhook.routes.ts",
          "domain": "ccpayment-webhook",
          "subdomain": "ccpayment-webhook.routes.ts",
          "layer": "routes",
          "size": 759,
          "lines": 28,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/ccpayment-webhook/ccpayment-webhook.controller.ts",
          "domain": "ccpayment-webhook",
          "subdomain": "ccpayment-webhook.controller.ts",
          "layer": "controllers",
          "size": 3055,
          "lines": 100,
          "complexity": 2,
          "dependencies": [
            "express",
            "crypto"
          ],
          "exports": [
            "CCPaymentWebhookController",
            "ccpaymentWebhookController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.9
        }
      ],
      "totalIssues": 0,
      "avgComplexity": 2.6666666666666665,
      "migrationEffort": 2.6,
      "dependencies": [
        "@schema",
        "@db"
      ],
      "dependents": [],
      "criticalPath": false,
      "riskAssessment": {
        "runtime": "medium",
        "testing": "low",
        "integration": "low"
      },
      "migrationStrategy": {
        "priority": 3,
        "approach": "atomic",
        "estimatedDays": 1,
        "blockers": [],
        "prerequisites": []
      }
    },
    {
      "name": "activity",
      "files": [
        {
          "path": "server/src/domains/activity/services/event-logger.service.ts",
          "domain": "activity",
          "subdomain": "services",
          "layer": "services",
          "size": 4940,
          "lines": 307,
          "complexity": 4,
          "dependencies": [
            "@schema/system/event_logs"
          ],
          "exports": [
            "EventLoggerService",
            "eventLogger"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "InsertEventLog"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7999999999999998
        },
        {
          "path": "server/src/domains/activity/services/event-log.service.ts",
          "domain": "activity",
          "subdomain": "services",
          "layer": "services",
          "size": 3150,
          "lines": 125,
          "complexity": 3,
          "dependencies": [
            "@schema/system/event_logs",
            "@schema/user/users",
            "drizzle-orm",
            "@db_types/system.types",
            "@schema/system/event_logs"
          ],
          "exports": [
            "EventLogService",
            "eventLogService"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": true,
            "hasZodValidation": true,
            "typeImports": [
              "EventLogFilters",
              "EventLogPagination"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 0.1
        },
        {
          "path": "server/src/domains/activity/routes/index.ts",
          "domain": "activity",
          "subdomain": "routes",
          "layer": "routes",
          "size": 182,
          "lines": 9,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/activity/routes/event-log.routes.ts",
          "domain": "activity",
          "subdomain": "routes",
          "layer": "routes",
          "size": 837,
          "lines": 20,
          "complexity": 0,
          "dependencies": [
            "express"
          ],
          "exports": [],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": false,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": false,
            "typeImports": []
          },
          "riskLevel": "medium",
          "migrationEffort": 0.5
        },
        {
          "path": "server/src/domains/activity/controllers/event-log.controller.ts",
          "domain": "activity",
          "subdomain": "controllers",
          "layer": "controllers",
          "size": 5501,
          "lines": 222,
          "complexity": 4,
          "dependencies": [
            "express",
            "zod",
            "@schema/system/event_logs"
          ],
          "exports": [
            "EventLogController",
            "eventLogController"
          ],
          "idPatterns": [],
          "typeUsage": {
            "hasAnyTypes": true,
            "hasUnknownTypes": false,
            "hasBrandedIds": false,
            "hasNumericIds": false,
            "hasTypeGuards": false,
            "hasZodValidation": true,
            "typeImports": [
              "Request",
              "Response"
            ]
          },
          "riskLevel": "medium",
          "migrationEffort": 1.7999999999999998
        }
      ],
      "totalIssues": 0,
      "avgComplexity": 2.2,
      "migrationEffort": 4.699999999999999,
      "dependencies": [
        "@schema/system/event_logs",
        "@schema/user/users",
        "@db_types/system.types"
      ],
      "dependents": [
        "user-management",
        "moderation",
        "other",
        "forum-core"
      ],
      "criticalPath": true,
      "riskAssessment": {
        "runtime": "medium",
        "testing": "low",
        "integration": "high"
      },
      "migrationStrategy": {
        "priority": 2,
        "approach": "atomic",
        "estimatedDays": 1,
        "blockers": [
          "Dependencies from: user-management, moderation, other, forum-core"
        ],
        "prerequisites": []
      }
    }
  ],
  "dependencyGraph": {
    "forum-core": [
      "other",
      "user-management",
      "forum",
      "gamification",
      "user",
      "admin",
      "economy",
      "profile",
      "editor",
      "activity",
      "cosmetics"
    ],
    "other": [
      "forum-core",
      "xp",
      "user-management",
      "economy",
      "paths",
      "auth",
      "moderation",
      "forum",
      "infrastructure",
      "engagement",
      "gamification",
      "social",
      "user",
      "cosmetics",
      "profile",
      "preferences",
      "dictionary",
      "admin",
      "activity"
    ],
    "economy": [
      "other",
      "xp",
      "forum-core",
      "wallet",
      "user-management",
      "gamification",
      "admin",
      "moderation",
      "engagement"
    ],
    "user-management": [
      "other",
      "economy",
      "xp",
      "user",
      "forum-core",
      "cosmetics",
      "moderation",
      "profile",
      "activity",
      "gamification",
      "admin",
      "preferences",
      "social"
    ],
    "moderation": [
      "forum-core",
      "other",
      "user-management",
      "gamification",
      "admin",
      "economy",
      "forum",
      "auth",
      "dictionary",
      "activity",
      "editor"
    ],
    "infrastructure": [
      "other",
      "xp",
      "user",
      "economy"
    ],
    "cosmetics": [
      "other",
      "forum-core",
      "engagement",
      "shop",
      "gamification",
      "user",
      "admin",
      "missions",
      "user-management",
      "economy",
      "moderation",
      "xp"
    ],
    "gamification": [
      "other",
      "economy",
      "forum-core",
      "xp",
      "user-management",
      "user",
      "admin",
      "moderation",
      "auth",
      "cosmetics"
    ],
    "engagement": [
      "other",
      "xp",
      "forum-core",
      "cosmetics",
      "user",
      "economy",
      "social",
      "user-management",
      "gamification"
    ],
    "social": [
      "other",
      "user-management",
      "forum-core",
      "shoutbox",
      "user",
      "xp",
      "gamification",
      "preferences",
      "notifications"
    ],
    "xp": [
      "other",
      "economy",
      "user"
    ],
    "wallet": [
      "user",
      "other",
      "xp",
      "economy"
    ],
    "user": [
      "other",
      "xp"
    ],
    "uploads": [
      "other",
      "xp",
      "user"
    ],
    "treasury": [
      "user",
      "xp",
      "other"
    ],
    "subscriptions": [
      "other",
      "xp",
      "user"
    ],
    "shoutbox": [
      "user",
      "xp",
      "other",
      "user-management",
      "moderation",
      "economy"
    ],
    "shop": [
      "user",
      "xp",
      "other",
      "economy"
    ],
    "profile": [
      "xp",
      "user",
      "other",
      "user-management"
    ],
    "preferences": [
      "other",
      "user",
      "xp",
      "user-management"
    ],
    "paths": [
      "user",
      "xp",
      "other"
    ],
    "notifications": [
      "other",
      "user",
      "xp",
      "economy"
    ],
    "missions": [
      "other",
      "xp",
      "user"
    ],
    "messaging": [
      "xp",
      "other",
      "economy",
      "user-management"
    ],
    "forum": [
      "other",
      "xp",
      "user",
      "auth",
      "infrastructure",
      "economy",
      "user-management"
    ],
    "feature-gates": [
      "other",
      "xp",
      "user"
    ],
    "editor": [
      "xp"
    ],
    "dictionary": [
      "other",
      "user",
      "xp"
    ],
    "ccpayment-webhook": [
      "other",
      "xp",
      "economy"
    ],
    "auth": [
      "xp",
      "other",
      "user",
      "user-management",
      "economy"
    ],
    "advertising": [
      "other",
      "user",
      "xp"
    ],
    "admin": [
      "xp",
      "other",
      "user",
      "moderation",
      "infrastructure",
      "user-management",
      "economy"
    ],
    "share": [
      "other",
      "user-management",
      "user",
      "xp"
    ],
    "collectibles": [
      "other",
      "xp",
      "admin",
      "user"
    ],
    "activity": [
      "other",
      "user-management",
      "xp"
    ]
  },
  "migrationRoadmap": [
    {
      "phase": 1,
      "name": "Critical Foundation",
      "duration": 40,
      "domains": [
        "forum-core"
      ],
      "parallel": false,
      "blockers": [],
      "deliverables": [
        "Type-safe core services",
        "Runtime validation",
        "Zero critical issues"
      ],
      "successCriteria": [
        "All tests pass",
        "No type errors",
        "API contracts maintained"
      ]
    },
    {
      "phase": 2,
      "name": "Core Systems",
      "duration": 81,
      "domains": [
        "other",
        "admin",
        "moderation",
        "economy",
        "user-management",
        "shoutbox",
        "cosmetics",
        "missions",
        "collectibles",
        "auth",
        "forum",
        "wallet",
        "advertising",
        "social",
        "xp",
        "share",
        "user",
        "activity"
      ],
      "parallel": true,
      "blockers": [
        "forum-core"
      ],
      "deliverables": [
        "Domain type safety",
        "Integration tests",
        "Performance validation"
      ],
      "successCriteria": [
        "End-to-end tests pass",
        "No runtime type errors",
        "Performance maintained"
      ]
    },
    {
      "phase": 3,
      "name": "Extended Systems",
      "duration": 9,
      "domains": [
        "engagement",
        "profile",
        "preferences",
        "shop",
        "feature-gates",
        "dictionary",
        "subscriptions",
        "infrastructure",
        "uploads",
        "treasury",
        "paths",
        "notifications",
        "messaging",
        "editor",
        "ccpayment-webhook"
      ],
      "parallel": true,
      "blockers": [
        "forum-core",
        "other",
        "admin",
        "moderation",
        "economy",
        "user-management",
        "shoutbox",
        "cosmetics",
        "missions",
        "collectibles",
        "auth",
        "forum",
        "wallet",
        "advertising",
        "social",
        "xp",
        "share",
        "user",
        "activity"
      ],
      "deliverables": [
        "Complete type coverage",
        "Documentation updates"
      ],
      "successCriteria": [
        "All domains type-safe",
        "Documentation complete"
      ]
    },
    {
      "phase": 4,
      "name": "Final Cleanup",
      "duration": 28,
      "domains": [
        "gamification"
      ],
      "parallel": true,
      "blockers": [],
      "deliverables": [
        "100% type safety",
        "Code quality improvements"
      ],
      "successCriteria": [
        "Zero type issues",
        "ESLint rules enforced"
      ]
    }
  ],
  "riskMatrix": [
    {
      "domain": "forum-core",
      "risk": "critical",
      "factors": [
        "117 ID issues",
        "186 files",
        "0 dependents",
        "Complexity: 1.4"
      ],
      "mitigation": [
        "Incremental migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "End-to-end critical path tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "gamification",
      "risk": "critical",
      "factors": [
        "54 ID issues",
        "96 files",
        "2 dependents",
        "Complexity: 2.2"
      ],
      "mitigation": [
        "Incremental migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "Smoke tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "other",
      "risk": "high",
      "factors": [
        "180 ID issues",
        "420 files",
        "0 dependents",
        "Complexity: 1.4"
      ],
      "mitigation": [
        "Incremental migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "Smoke tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "admin",
      "risk": "high",
      "factors": [
        "86 ID issues",
        "147 files",
        "9 dependents",
        "Complexity: 3.0"
      ],
      "mitigation": [
        "Incremental migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "End-to-end critical path tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "moderation",
      "risk": "high",
      "factors": [
        "50 ID issues",
        "140 files",
        "0 dependents",
        "Complexity: 1.7"
      ],
      "mitigation": [
        "Incremental migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "Smoke tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "economy",
      "risk": "high",
      "factors": [
        "42 ID issues",
        "115 files",
        "8 dependents",
        "Complexity: 1.6"
      ],
      "mitigation": [
        "Incremental migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "End-to-end critical path tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "user-management",
      "risk": "high",
      "factors": [
        "42 ID issues",
        "178 files",
        "0 dependents",
        "Complexity: 1.2"
      ],
      "mitigation": [
        "Incremental migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "End-to-end critical path tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "shoutbox",
      "risk": "high",
      "factors": [
        "30 ID issues",
        "8 files",
        "4 dependents",
        "Complexity: 8.0"
      ],
      "mitigation": [
        "Incremental migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "End-to-end critical path tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "cosmetics",
      "risk": "high",
      "factors": [
        "22 ID issues",
        "44 files",
        "0 dependents",
        "Complexity: 1.3"
      ],
      "mitigation": [
        "Incremental migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "Smoke tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "missions",
      "risk": "high",
      "factors": [
        "6 ID issues",
        "5 files",
        "1 dependents",
        "Complexity: 3.6"
      ],
      "mitigation": [
        "Single-shot migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "Smoke tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "collectibles",
      "risk": "high",
      "factors": [
        "6 ID issues",
        "4 files",
        "0 dependents",
        "Complexity: 4.8"
      ],
      "mitigation": [
        "Single-shot migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "Smoke tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "auth",
      "risk": "high",
      "factors": [
        "3 ID issues",
        "7 files",
        "15 dependents",
        "Complexity: 3.7"
      ],
      "mitigation": [
        "Single-shot migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "End-to-end critical path tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "forum",
      "risk": "high",
      "factors": [
        "2 ID issues",
        "22 files",
        "4 dependents",
        "Complexity: 3.8"
      ],
      "mitigation": [
        "Single-shot migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "End-to-end critical path tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "wallet",
      "risk": "high",
      "factors": [
        "0 ID issues",
        "23 files",
        "8 dependents",
        "Complexity: 4.4"
      ],
      "mitigation": [
        "Single-shot migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "End-to-end critical path tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "advertising",
      "risk": "high",
      "factors": [
        "0 ID issues",
        "8 files",
        "0 dependents",
        "Complexity: 6.6"
      ],
      "mitigation": [
        "Single-shot migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "Smoke tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "engagement",
      "risk": "medium",
      "factors": [
        "25 ID issues",
        "32 files",
        "0 dependents",
        "Complexity: 2.7"
      ],
      "mitigation": [
        "Incremental migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "Smoke tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "social",
      "risk": "medium",
      "factors": [
        "9 ID issues",
        "37 files",
        "4 dependents",
        "Complexity: 2.1"
      ],
      "mitigation": [
        "Single-shot migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "End-to-end critical path tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "profile",
      "risk": "medium",
      "factors": [
        "9 ID issues",
        "11 files",
        "3 dependents",
        "Complexity: 3.5"
      ],
      "mitigation": [
        "Single-shot migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "Smoke tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "preferences",
      "risk": "medium",
      "factors": [
        "7 ID issues",
        "3 files",
        "3 dependents",
        "Complexity: 5.0"
      ],
      "mitigation": [
        "Single-shot migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "Smoke tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "shop",
      "risk": "medium",
      "factors": [
        "2 ID issues",
        "1 files",
        "2 dependents",
        "Complexity: 4.0"
      ],
      "mitigation": [
        "Single-shot migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "Smoke tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "feature-gates",
      "risk": "medium",
      "factors": [
        "2 ID issues",
        "3 files",
        "0 dependents",
        "Complexity: 2.3"
      ],
      "mitigation": [
        "Single-shot migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "Smoke tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "dictionary",
      "risk": "medium",
      "factors": [
        "2 ID issues",
        "2 files",
        "2 dependents",
        "Complexity: 3.5"
      ],
      "mitigation": [
        "Single-shot migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "Smoke tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "xp",
      "risk": "medium",
      "factors": [
        "1 ID issues",
        "9 files",
        "33 dependents",
        "Complexity: 3.4"
      ],
      "mitigation": [
        "Single-shot migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "End-to-end critical path tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "subscriptions",
      "risk": "medium",
      "factors": [
        "1 ID issues",
        "5 files",
        "0 dependents",
        "Complexity: 4.4"
      ],
      "mitigation": [
        "Single-shot migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "Smoke tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "share",
      "risk": "medium",
      "factors": [
        "1 ID issues",
        "2 files",
        "13 dependents",
        "Complexity: 1.0"
      ],
      "mitigation": [
        "Single-shot migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "End-to-end critical path tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "infrastructure",
      "risk": "medium",
      "factors": [
        "0 ID issues",
        "10 files",
        "0 dependents",
        "Complexity: 3.1"
      ],
      "mitigation": [
        "Single-shot migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "Smoke tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "user",
      "risk": "medium",
      "factors": [
        "0 ID issues",
        "2 files",
        "29 dependents",
        "Complexity: 3.5"
      ],
      "mitigation": [
        "Single-shot migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "End-to-end critical path tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "uploads",
      "risk": "medium",
      "factors": [
        "0 ID issues",
        "3 files",
        "0 dependents",
        "Complexity: 3.3"
      ],
      "mitigation": [
        "Single-shot migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "Smoke tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "treasury",
      "risk": "medium",
      "factors": [
        "0 ID issues",
        "1 files",
        "0 dependents",
        "Complexity: 10.0"
      ],
      "mitigation": [
        "Single-shot migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "Smoke tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "paths",
      "risk": "medium",
      "factors": [
        "0 ID issues",
        "1 files",
        "1 dependents",
        "Complexity: 6.0"
      ],
      "mitigation": [
        "Single-shot migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "Smoke tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "notifications",
      "risk": "medium",
      "factors": [
        "0 ID issues",
        "4 files",
        "3 dependents",
        "Complexity: 2.3"
      ],
      "mitigation": [
        "Single-shot migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "Smoke tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "messaging",
      "risk": "medium",
      "factors": [
        "0 ID issues",
        "1 files",
        "0 dependents",
        "Complexity: 5.0"
      ],
      "mitigation": [
        "Single-shot migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "Smoke tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "editor",
      "risk": "medium",
      "factors": [
        "0 ID issues",
        "1 files",
        "2 dependents",
        "Complexity: 2.0"
      ],
      "mitigation": [
        "Single-shot migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "Smoke tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "ccpayment-webhook",
      "risk": "medium",
      "factors": [
        "0 ID issues",
        "3 files",
        "0 dependents",
        "Complexity: 2.7"
      ],
      "mitigation": [
        "Single-shot migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "Smoke tests",
        "Performance regression tests"
      ]
    },
    {
      "domain": "activity",
      "risk": "medium",
      "factors": [
        "0 ID issues",
        "5 files",
        "4 dependents",
        "Complexity: 2.2"
      ],
      "mitigation": [
        "Single-shot migration",
        "Comprehensive testing",
        "Feature flags for rollback",
        "Dependency isolation"
      ],
      "testingRequired": [
        "Unit tests for all changed functions",
        "Integration tests for API contracts",
        "End-to-end critical path tests",
        "Performance regression tests"
      ]
    }
  ]
}