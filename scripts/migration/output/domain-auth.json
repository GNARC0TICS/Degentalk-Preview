{
  "name": "auth",
  "files": [
    {
      "path": "server/src/domains/auth/index.ts",
      "domain": "auth",
      "subdomain": "index.ts",
      "layer": "other",
      "size": 434,
      "lines": 18,
      "complexity": 0,
      "dependencies": [],
      "exports": [
        "ORIGINAL_AUTH_DEPRECATED",
        "default as authRoutes ",
        "setupAuthPassport",
        "isAuthenticated",
        "isAuthenticatedOptional",
        "isAdmin",
        "isModerator",
        "isAdminOrModerator"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "low",
      "migrationEffort": 0.5
    },
    {
      "path": "server/src/domains/auth/auth.routes.ts",
      "domain": "auth",
      "subdomain": "auth.routes.ts",
      "layer": "routes",
      "size": 6527,
      "lines": 213,
      "complexity": 4,
      "dependencies": [
        "express",
        "passport",
        "passport-local",
        "express-session",
        "@server/src/core/logger"
      ],
      "exports": [
        "setupAuthPassport",
        "isAuthenticated",
        "isAuthenticatedOptional",
        "isAdmin",
        "isModerator",
        "isAdminOrModerator"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "id: number",
          "line": 119,
          "context": "passport.deserializeUser(async (id: number | string, done) => {",
          "suggestedFix": "check entity context for correct branded type",
          "confidence": 0.3
        }
      ],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": true,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 3.6
    },
    {
      "path": "server/src/domains/auth/routes/xAuthRoutes.ts",
      "domain": "auth",
      "subdomain": "routes",
      "layer": "routes",
      "size": 505,
      "lines": 17,
      "complexity": 0,
      "dependencies": [
        "express"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": false,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": false,
        "typeImports": []
      },
      "riskLevel": "medium",
      "migrationEffort": 0.5
    },
    {
      "path": "server/src/domains/auth/services/xAuthService.ts",
      "domain": "auth",
      "subdomain": "services",
      "layer": "services",
      "size": 4215,
      "lines": 150,
      "complexity": 4,
      "dependencies": [
        "@server/src/core/services/user.service",
        "express",
        "twitter-api-v2",
        "@server/src/core/db",
        "@schema/user/users",
        "drizzle-orm",
        "@server/src/core/logger"
      ],
      "exports": [],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": false,
        "hasZodValidation": true,
        "typeImports": [
          "Request",
          "Response",
          "NextFunction"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 1.7999999999999998
    },
    {
      "path": "server/src/domains/auth/services/auth.service.ts",
      "domain": "auth",
      "subdomain": "services",
      "layer": "services",
      "size": 5423,
      "lines": 188,
      "complexity": 6,
      "dependencies": [
        "@server/src/core/services/user.service",
        "crypto",
        "util",
        "@schema",
        "@db",
        "drizzle-orm",
        "@server/src/core/logger",
        "uuid",
        "bcryptjs"
      ],
      "exports": [
        "createMockUser",
        "getSessionCookieSettings",
        "getUserId"
      ],
      "idPatterns": [
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 99,
          "context": "export async function verifyEmailToken(token: string): Promise<{ userId: number } | false> {",
          "suggestedFix": "UserId",
          "confidence": 0.8
        },
        {
          "type": "definition",
          "pattern": "userId: number",
          "line": 121,
          "context": "userId: number,",
          "suggestedFix": "UserId",
          "confidence": 0.8
        }
      ],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": true,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": true,
        "typeImports": []
      },
      "riskLevel": "high",
      "migrationEffort": 1.6000000000000003
    },
    {
      "path": "server/src/domains/auth/controllers/auth.controller.ts",
      "domain": "auth",
      "subdomain": "controllers",
      "layer": "controllers",
      "size": 8726,
      "lines": 283,
      "complexity": 7,
      "dependencies": [
        "@server/src/core/services/user.service",
        "express",
        "zod",
        "crypto",
        "passport",
        "@schema",
        "@schema",
        "@server/src/core/logger",
        "@shared/wallet.config"
      ],
      "exports": [
        "login",
        "logout",
        "getCurrentUser"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": true,
        "typeImports": [
          "Request",
          "Response",
          "NextFunction"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 1.6000000000000003
    },
    {
      "path": "server/src/domains/auth/middleware/auth.middleware.ts",
      "domain": "auth",
      "subdomain": "middleware",
      "layer": "middleware",
      "size": 7155,
      "lines": 236,
      "complexity": 5,
      "dependencies": [
        "@server/src/core/services/user.service",
        "express",
        "@server/src/core/config/environment",
        "@server/src/core/logger",
        "@server/src/utils/environment"
      ],
      "exports": [
        "hasRole",
        "isAuthenticated",
        "isAuthenticatedOptional",
        "isAdmin",
        "isModerator",
        "isAdminOrModerator",
        "devModeAuthHandler"
      ],
      "idPatterns": [],
      "typeUsage": {
        "hasAnyTypes": true,
        "hasUnknownTypes": false,
        "hasBrandedIds": false,
        "hasNumericIds": false,
        "hasTypeGuards": true,
        "hasZodValidation": false,
        "typeImports": [
          "Request",
          "Response",
          "NextFunction"
        ]
      },
      "riskLevel": "medium",
      "migrationEffort": 1.7
    }
  ],
  "totalIssues": 3,
  "avgComplexity": 3.7142857142857144,
  "migrationEffort": 11.299999999999999,
  "dependencies": [
    "@server/src/core/logger",
    "@server/src/core/services/user.service",
    "@server/src/core/db",
    "@schema/user/users",
    "@schema",
    "@db",
    "@shared/wallet.config",
    "@server/src/core/config/environment",
    "@server/src/utils/environment"
  ],
  "dependents": [
    "other",
    "forum-core",
    "user-management",
    "moderation",
    "gamification",
    "social",
    "shoutbox",
    "profile",
    "preferences",
    "messaging",
    "forum",
    "engagement",
    "cosmetics",
    "economy",
    "admin"
  ],
  "criticalPath": true,
  "riskAssessment": {
    "runtime": "high",
    "testing": "low",
    "integration": "high"
  },
  "migrationStrategy": {
    "priority": 1,
    "approach": "atomic",
    "estimatedDays": 3,
    "blockers": [
      "Dependencies from: other, forum-core, user-management, moderation, gamification, social, shoutbox, profile, preferences, messaging, forum, engagement, cosmetics, economy, admin"
    ],
    "prerequisites": []
  }
}